initSidebarItems({"macro":[["_array_base",""],["_implement_numeric_signed_public",""],["_implement_numeric_signed_secret",""],["_implement_numeric_unsigned_public",""],["_implement_numeric_unsigned_secret",""],["_public_array",""],["_secret_array","This creates arrays for secret integers, i.e. `$t` is the secret integer type and `$tbase` is the according Rust type."],["array","Create a new array with the given name, length, and type."],["assert_bytes_eq",""],["assert_secret_array_eq",""],["both_arrays",""],["both_bytes",""],["bytes","Convenience function to create a new byte array (of type `U8`) with the given name and length."],["generic_array",""],["nat_mod",""],["public_bytes","Convenience function to create a new public byte array (of type `u8`) with the given name and length."],["public_nat_mod",""],["secret_array",""],["secret_bytes",""],["signed_integer",""],["signed_public_integer",""],["unsigned_integer",""],["unsigned_public_integer",""]],"mod":[["prelude","This module conveniently exports common subroutines necessary for hacspecs"]],"struct":[["DocParametricArray","Fixed length byte array."],["DocPublicArray","Fixed length byte array."],["DocPublicBytes","Fixed length byte array."],["DocSecretArray","Fixed length byte array."],["DocSecretBytes","Fixed length byte array."]]});