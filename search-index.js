var searchIndex = JSON.parse('{\
"abstract_integers":{"doc":"This crate defines specification-friendly natural integers…","i":[[3,"BigUint","abstract_integers","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`\'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",1,[[],["option",4]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",2,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,[[]]],[0,"traits","","",null,null],[0,"bounds","abstract_integers::traits","",null,null],[8,"Bounded","abstract_integers::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",3,[[]]],[10,"max_value","","returns the largest finite number this type can represent",3,[[]]],[0,"cast","abstract_integers::traits","",null,null],[8,"ToPrimitive","abstract_integers::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",4,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",4,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",4,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",4,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",4,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",4,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",4,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",4,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",4,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",4,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",4,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",4,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",4,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",4,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",5,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",5,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",5,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",5,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",5,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",5,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",5,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",5,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",5,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",5,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",5,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",5,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",5,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",5,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",6,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",7,[[]]],[0,"float","abstract_integers::traits","",null,null],[8,"FloatCore","abstract_integers::traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",8,[[]]],[10,"neg_infinity","","Returns negative infinity.",8,[[]]],[10,"nan","","Returns NaN.",8,[[]]],[10,"neg_zero","","Returns `-0.0`.",8,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",8,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",8,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",8,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",8,[[]]],[11,"is_nan","","Returns `true` if the number is NaN.",8,[[]]],[11,"is_infinite","","Returns `true` if the number is infinite.",8,[[]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",8,[[]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",8,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",8,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a number.",8,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",8,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",8,[[]]],[11,"trunc","","Return the integer part of a number.",8,[[]]],[11,"fract","","Returns the fractional part of a number.",8,[[]]],[11,"abs","","Computes the absolute value of `self`. Returns…",8,[[]]],[11,"signum","","Returns a number that represents the sign of `self`.",8,[[]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",8,[[]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",8,[[]]],[11,"min","","Returns the minimum of the two numbers.",8,[[]]],[11,"max","","Returns the maximum of the two numbers.",8,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",8,[[]]],[11,"powi","","Raise a number to an integer power.",8,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",8,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",8,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",8,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",9,[[]]],[10,"infinity","","Returns the infinite value.",9,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",9,[[]]],[10,"neg_zero","","Returns `-0.0`.",9,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",9,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",9,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",9,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",9,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",9,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",9,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",9,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",9,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",9,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",9,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",9,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",9,[[]]],[10,"trunc","","Return the integer part of a number.",9,[[]]],[10,"fract","","Returns the fractional part of a number.",9,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",9,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",9,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",9,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",9,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",9,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",9,[[]]],[10,"powi","","Raise a number to an integer power.",9,[[]]],[10,"powf","","Raise a number to a floating point power.",9,[[]]],[10,"sqrt","","Take the square root of a number.",9,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",9,[[]]],[10,"exp2","","Returns `2^(self)`.",9,[[]]],[10,"ln","","Returns the natural logarithm of the number.",9,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",9,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",9,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",9,[[]]],[11,"to_degrees","","Converts radians to degrees.",9,[[]]],[11,"to_radians","","Converts degrees to radians.",9,[[]]],[10,"max","","Returns the maximum of the two numbers.",9,[[]]],[10,"min","","Returns the minimum of the two numbers.",9,[[]]],[10,"abs_sub","","The positive difference of two numbers.",9,[[]]],[10,"cbrt","","Take the cubic root of a number.",9,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",9,[[]]],[10,"sin","","Computes the sine of a number (in radians).",9,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",9,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",9,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",9,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",9,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",9,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",9,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",9,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",9,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",9,[[]]],[10,"sinh","","Hyperbolic sine function.",9,[[]]],[10,"cosh","","Hyperbolic cosine function.",9,[[]]],[10,"tanh","","Hyperbolic tangent function.",9,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",9,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",9,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",9,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",9,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",10,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",10,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",10,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",10,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",10,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",10,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",10,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",10,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",10,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",10,[[]]],[10,"LN_10","","Return `ln(10.0)`.",10,[[]]],[10,"LN_2","","Return `ln(2.0)`.",10,[[]]],[10,"LOG10_E","","Return `log10(e)`.",10,[[]]],[10,"LOG2_E","","Return `log2(e)`.",10,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",10,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",10,[[]]],[11,"TAU","","Return the full circle constant `τ`.",10,[[]]],[11,"LOG10_2","","Return `log10(2.0)`.",10,[[]]],[11,"LOG2_10","","Return `log2(10.0)`.",10,[[]]],[0,"identities","abstract_integers::traits","",null,null],[8,"Zero","abstract_integers::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",2,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",11,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",11,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[0,"int","abstract_integers::traits","",null,null],[8,"PrimInt","abstract_integers::traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",12,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",12,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",12,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",12,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[]]],[0,"ops","abstract_integers::traits","",null,null],[0,"checked","abstract_integers::traits::ops","",null,null],[8,"CheckedAdd","abstract_integers::traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",13,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",1,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",14,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",15,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",16,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",17,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",18,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",19,[[],["option",4]]],[0,"inv","abstract_integers::traits::ops","",null,null],[8,"Inv","abstract_integers::traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",20,null],[10,"inv","","Returns the multiplicative inverse of `self`.",20,[[]]],[0,"mul_add","abstract_integers::traits::ops","",null,null],[8,"MulAdd","abstract_integers::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",21,null],[10,"mul_add","","Performs the fused multiply-add operation.",21,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",22,[[]]],[0,"saturating","abstract_integers::traits::ops","",null,null],[8,"Saturating","abstract_integers::traits::ops::saturating","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",23,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",23,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds…",null,null],[10,"saturating_add","","Saturating addition. Computes `self + other`, saturating…",24,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds…",null,null],[10,"saturating_sub","","Saturating subtraction. Computes `self - other`,…",25,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric…",null,null],[10,"saturating_mul","","Saturating multiplication. Computes `self * other`,…",26,[[]]],[0,"wrapping","abstract_integers::traits::ops","",null,null],[8,"WrappingAdd","abstract_integers::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",27,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",28,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",29,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",30,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",31,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",32,[[]]],[0,"pow","abstract_integers::traits","",null,null],[8,"Pow","abstract_integers::traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",33,null],[10,"pow","","Returns `self` to the power `rhs`.",33,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[0,"real","abstract_integers::traits","",null,null],[8,"Real","abstract_integers::traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can…",34,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",34,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",34,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",34,[[]]],[10,"floor","","Returns the largest integer less than or equal to a number.",34,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",34,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",34,[[]]],[10,"trunc","","Return the integer part of a number.",34,[[]]],[10,"fract","","Returns the fractional part of a number.",34,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",34,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",34,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",34,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",34,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",34,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",34,[[]]],[10,"powi","","Raise a number to an integer power.",34,[[]]],[10,"powf","","Raise a number to a real number power.",34,[[]]],[10,"sqrt","","Take the square root of a number.",34,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",34,[[]]],[10,"exp2","","Returns `2^(self)`.",34,[[]]],[10,"ln","","Returns the natural logarithm of the number.",34,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",34,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",34,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",34,[[]]],[10,"to_degrees","","Converts radians to degrees.",34,[[]]],[10,"to_radians","","Converts degrees to radians.",34,[[]]],[10,"max","","Returns the maximum of the two numbers.",34,[[]]],[10,"min","","Returns the minimum of the two numbers.",34,[[]]],[10,"abs_sub","","The positive difference of two numbers.",34,[[]]],[10,"cbrt","","Take the cubic root of a number.",34,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",34,[[]]],[10,"sin","","Computes the sine of a number (in radians).",34,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",34,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",34,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",34,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",34,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",34,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",34,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",34,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",34,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",34,[[]]],[10,"sinh","","Hyperbolic sine function.",34,[[]]],[10,"cosh","","Hyperbolic cosine function.",34,[[]]],[10,"tanh","","Hyperbolic tangent function.",34,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",34,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",34,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",34,[[]]],[0,"sign","abstract_integers::traits","",null,null],[8,"Signed","abstract_integers::traits::sign","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",35,[[]]],[10,"abs_sub","","The positive difference of two numbers.",35,[[]]],[10,"signum","","Returns the sign of the number.",35,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",35,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",35,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","abstract_integers::traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",36,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",36,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",37,null],[13,"Invalid","","",37,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",38,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",3,[[]]],[10,"max_value","","returns the largest finite number this type can represent",3,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",9,[[]]],[10,"infinity","","Returns the infinite value.",9,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",9,[[]]],[10,"neg_zero","","Returns `-0.0`.",9,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",9,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",9,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",9,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",9,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",9,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",9,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",9,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",9,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",9,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",9,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",9,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",9,[[]]],[10,"trunc","","Return the integer part of a number.",9,[[]]],[10,"fract","","Returns the fractional part of a number.",9,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",9,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",9,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",9,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",9,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",9,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",9,[[]]],[10,"powi","","Raise a number to an integer power.",9,[[]]],[10,"powf","","Raise a number to a floating point power.",9,[[]]],[10,"sqrt","","Take the square root of a number.",9,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",9,[[]]],[10,"exp2","","Returns `2^(self)`.",9,[[]]],[10,"ln","","Returns the natural logarithm of the number.",9,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",9,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",9,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",9,[[]]],[11,"to_degrees","","Converts radians to degrees.",9,[[]]],[11,"to_radians","","Converts degrees to radians.",9,[[]]],[10,"max","","Returns the maximum of the two numbers.",9,[[]]],[10,"min","","Returns the minimum of the two numbers.",9,[[]]],[10,"abs_sub","","The positive difference of two numbers.",9,[[]]],[10,"cbrt","","Take the cubic root of a number.",9,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",9,[[]]],[10,"sin","","Computes the sine of a number (in radians).",9,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",9,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",9,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",9,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",9,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",9,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",9,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",9,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",9,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",9,[[]]],[10,"sinh","","Hyperbolic sine function.",9,[[]]],[10,"cosh","","Hyperbolic cosine function.",9,[[]]],[10,"tanh","","Hyperbolic tangent function.",9,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",9,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",9,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",9,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",9,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",10,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",10,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",10,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",10,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",10,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",10,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",10,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",10,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",10,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",10,[[]]],[10,"LN_10","","Return `ln(10.0)`.",10,[[]]],[10,"LN_2","","Return `ln(2.0)`.",10,[[]]],[10,"LOG10_E","","Return `log10(e)`.",10,[[]]],[10,"LOG2_E","","Return `log2(e)`.",10,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",10,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",10,[[]]],[11,"TAU","","Return the full circle constant `τ`.",10,[[]]],[11,"LOG10_2","","Return `log10(2.0)`.",10,[[]]],[11,"LOG2_10","","Return `log2(10.0)`.",10,[[]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",7,[[]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",5,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",5,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",5,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",5,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",5,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",5,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",5,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",5,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",5,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",5,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",5,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",5,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",5,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",5,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",6,[[],["option",4]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",4,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",4,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",4,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",4,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",4,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",4,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",4,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",4,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",4,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",4,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",4,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",4,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",4,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",4,[[],["option",4]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",11,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",11,[[]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",2,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,[[]]],[8,"PrimInt","","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",12,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",12,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",12,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",12,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",13,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",15,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",14,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",17,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",16,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",18,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",19,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",1,[[],["option",4]]],[8,"Inv","","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",20,null],[10,"inv","","Returns the multiplicative inverse of `self`.",20,[[]]],[8,"MulAdd","","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",21,null],[10,"mul_add","","Performs the fused multiply-add operation.",21,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",22,[[]]],[8,"Saturating","","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",23,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",23,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds…",null,null],[10,"saturating_add","","Saturating addition. Computes `self + other`, saturating…",24,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric…",null,null],[10,"saturating_mul","","Saturating multiplication. Computes `self * other`,…",26,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds…",null,null],[10,"saturating_sub","","Saturating subtraction. Computes `self - other`,…",25,[[]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",27,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",29,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",30,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",31,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",32,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",28,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",33,null],[10,"pow","","Returns `self` to the power `rhs`.",33,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",35,[[]]],[10,"abs_sub","","The positive difference of two numbers.",35,[[]]],[10,"signum","","Returns the sign of the number.",35,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",35,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",35,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Zero","abstract_integers","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",2,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",11,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",11,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[8,"Add","","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",39,null],[10,"add","","Performs the `+` operation.",39,[[]]],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",40,null],[10,"div","","Performs the `/` operation.",40,[[]]],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",41,null],[10,"mul","","Performs the `*` operation.",41,[[]]],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",42,null],[10,"neg","","Performs the unary `-` operation.",42,[[]]],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",43,null],[10,"rem","","Performs the `%` operation.",43,[[]]],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",44,null],[10,"sub","","Performs the `-` operation.",44,[[]]],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",45,[[]]],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",46,[[]]],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",47,[[]]],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",48,[[]]],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",49,[[]]],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",50,null],[10,"bitand","","Performs the `&` operation.",50,[[]]],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",51,null],[10,"bitor","","Performs the `|` operation.",51,[[]]],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",52,null],[10,"bitxor","","Performs the `^` operation.",52,[[]]],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",53,null],[10,"not","","Performs the unary `!` operation.",53,[[]]],[8,"Shl","","The left shift operator `<<`. Note that because this trait…",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",54,null],[10,"shl","","Performs the `<<` operation.",54,[[]]],[8,"Shr","","The right shift operator `>>`. Note that because this…",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",55,null],[10,"shr","","Performs the `>>` operation.",55,[[]]],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",56,[[]]],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",57,[[]]],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",58,[[]]],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",59,[[]]],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",60,[[]]],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",61,null],[10,"deref","","Dereferences the value.",61,[[]]],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v =…",null,null],[10,"deref_mut","","Mutably dereferences the value.",62,[[]]],[8,"Drop","","Custom code within the destructor.",null,null],[10,"drop","","Executes the destructor for this type.",63,[[]]],[8,"Fn","","The version of the call operator that takes an immutable…",null,null],[10,"call","","Performs the call operation.",64,[[]]],[8,"FnMut","","The version of the call operator that takes a mutable…",null,null],[10,"call_mut","","Performs the call operation.",65,[[]]],[8,"FnOnce","","The version of the call operator that takes a by-value…",null,null],[16,"Output","","The returned type after the call operator is used.",66,null],[10,"call_once","","Performs the call operation.",66,[[]]],[8,"Index","","Used for indexing operations (`container[index]`) in…",null,null],[16,"Output","","The returned type after indexing.",67,null],[10,"index","","Performs the indexing (`container[index]`) operation.",67,[[]]],[8,"IndexMut","","Used for indexing operations (`container[index]`) in…",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`)…",68,[[]]],[3,"Range","","A (half-open) range bounded inclusively below and…",null,null],[12,"start","","The lower bound of the range (inclusive).",69,null],[12,"end","","The upper bound of the range (exclusive).",69,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",70,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",71,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",72,null],[13,"Excluded","","An exclusive bound.",72,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",72,null],[8,"RangeBounds","","`RangeBounds` is implemented by Rust\'s built-in range…",null,null],[10,"start_bound","","Start index bound.",73,[[],["bound",4]]],[10,"end_bound","","End index bound.",73,[[],["bound",4]]],[11,"contains","","Returns `true` if `item` is contained in the range.",73,[[]]],[3,"RangeInclusive","","A range bounded inclusively below and above (`start..=end`).",null,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",74,null],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",75,null],[16,"Error","","The type of this value when viewed as failed.",75,null],[10,"into_result","","Applies the \\\"?\\\" operator. A return of `Ok(t)` means that…",75,[[],["result",4]]],[10,"from_error","","Wrap an error value to construct the composite result. For…",75,[[]]],[10,"from_ok","","Wrap an OK value to construct the composite result. For…",75,[[]]],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",76,null],[16,"Return","","The type of value this generator returns.",76,null],[10,"resume","","Resumes the execution of this generator.",76,[[["pin",3]],["generatorstate",4]]],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",77,null],[13,"Complete","","The generator completed with a return value.",77,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper…",null,null],[8,"DispatchFromDyn","","This is used for object safety, to check that a method\'s…",null,null],[4,"ControlFlow","","Used to make try_fold closures more like normal loops",null,null],[13,"Continue","","Continue in the loop, using the given value for the next…",78,null],[13,"Break","","Exit the loop, yielding the given value",78,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two…",null,null],[13,"Less","","An ordering where a compared value is less than another.",79,null],[13,"Equal","","An ordering where a compared value is equal to another.",79,null],[13,"Greater","","An ordering where a compared value is greater than another.",79,null],[0,"abstract_int","","",null,null],[0,"nat_mod","","",null,null],[14,"abstract_int","","",null,null],[14,"abstract_public","","",null,null],[14,"abstract_unsigned","","",null,null],[14,"abstract_signed","","",null,null],[14,"abstract_unsigned_public_integer","","",null,null],[14,"abstract_signed_public_integer","","",null,null],[14,"abstract_secret","","",null,null],[14,"abstract_unsigned_secret_integer","","",null,null],[14,"abstract_signed_secret_integer","","",null,null],[14,"define_abstract_integer_checked","","Defines a bounded natural integer with regular arithmetic…",null,null],[14,"modular_integer","","",null,null],[14,"abstract_secret_modular_integer","","",null,null],[14,"abstract_public_modular_integer","","",null,null],[14,"abstract_nat_mod","","",null,null],[14,"abstract_public_nat_mod","","",null,null],[14,"define_refined_modular_integer","","Defines a bounded natural integer with modular arithmetic…",null,null],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"to_string","","",80,[[],["string",3]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",80,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",80,[[]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"to_string","","",81,[[],["string",3]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",81,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",81,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","abstract_integers::traits","",37,[[]]],[11,"into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_string","","",38,[[],["string",3]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","abstract_integers","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"to_string","","",82,[[],["string",3]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"into_iter","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"into_iter","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"into_iter","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"description","","",82,[[]]],[11,"cmp","","",77,[[["generatorstate",4]],["ordering",4]]],[11,"cmp","","",79,[[["ordering",4]],["ordering",4]]],[11,"get","","",83,[[],["option",4]]],[11,"get_mut","","",83,[[],["option",4]]],[11,"get_unchecked","","",83,[[]]],[11,"get_unchecked_mut","","",83,[[]]],[11,"index","","",83,[[]]],[11,"index_mut","","",83,[[]]],[11,"get","","",74,[[],["option",4]]],[11,"get_mut","","",74,[[],["option",4]]],[11,"get_unchecked","","",74,[[]]],[11,"get_unchecked_mut","","",74,[[]]],[11,"index","","",74,[[]]],[11,"index_mut","","",74,[[]]],[11,"get","","",74,[[],["option",4]]],[11,"get_mut","","",74,[[],["option",4]]],[11,"get_unchecked","","",74,[[]]],[11,"get_unchecked_mut","","",74,[[]]],[11,"index","","",74,[[]]],[11,"index_mut","","",74,[[]]],[11,"get","","",69,[[],["option",4]]],[11,"get_mut","","",69,[[],["option",4]]],[11,"get_unchecked","","",69,[[]]],[11,"get_unchecked_mut","","",69,[[]]],[11,"index","","",69,[[]]],[11,"index_mut","","",69,[[]]],[11,"get","","",84,[[],["option",4]]],[11,"get_mut","","",84,[[],["option",4]]],[11,"get_unchecked","","",84,[[]]],[11,"get_unchecked_mut","","",84,[[]]],[11,"index","","",84,[[]]],[11,"index_mut","","",84,[[]]],[11,"get","","",71,[[],["option",4]]],[11,"get_mut","","",71,[[],["option",4]]],[11,"get_unchecked","","",71,[[]]],[11,"get_unchecked_mut","","",71,[[]]],[11,"index","","",71,[[]]],[11,"index_mut","","",71,[[]]],[11,"get","","",69,[[],["option",4]]],[11,"get_mut","","",69,[[],["option",4]]],[11,"get_unchecked","","",69,[[]]],[11,"get_unchecked_mut","","",69,[[]]],[11,"index","","",69,[[]]],[11,"index_mut","","",69,[[]]],[11,"get","","",71,[[],["option",4]]],[11,"get_mut","","",71,[[],["option",4]]],[11,"get_unchecked","","",71,[[]]],[11,"get_unchecked_mut","","",71,[[]]],[11,"index","","",71,[[]]],[11,"index_mut","","",71,[[]]],[11,"get","","",70,[[],["option",4]]],[11,"get_mut","","",70,[[],["option",4]]],[11,"get_unchecked","","",70,[[]]],[11,"get_unchecked_mut","","",70,[[]]],[11,"index","","",70,[[]]],[11,"index_mut","","",70,[[]]],[11,"get","","",84,[[],["option",4]]],[11,"get_mut","","",84,[[],["option",4]]],[11,"get_unchecked","","",84,[[]]],[11,"get_unchecked_mut","","",84,[[]]],[11,"index","","",84,[[]]],[11,"index_mut","","",84,[[]]],[11,"get","","",83,[[],["option",4]]],[11,"get_mut","","",83,[[],["option",4]]],[11,"get_unchecked","","",83,[[]]],[11,"get_unchecked_mut","","",83,[[]]],[11,"index","","",83,[[]]],[11,"index_mut","","",83,[[]]],[11,"get","","",70,[[],["option",4]]],[11,"get_mut","","",70,[[],["option",4]]],[11,"get_unchecked","","",70,[[]]],[11,"get_unchecked_mut","","",70,[[]]],[11,"index","","",70,[[]]],[11,"index_mut","","",70,[[]]],[11,"next_back","","",69,[[],["option",4]]],[11,"nth_back","","",69,[[],["option",4]]],[11,"next_back","","",84,[[],["option",4]]],[11,"nth_back","","",84,[[],["option",4]]],[11,"try_rfold","","",84,[[]]],[11,"rfold","","",84,[[]]],[11,"fmt","","",82,[[["formatter",3]],[["error",3],["result",4]]]],[11,"default","","",83,[[],["rangefull",3]]],[11,"default","","",69,[[],["range",3]]],[11,"partial_cmp","","",77,[[["generatorstate",4]],[["option",4],["ordering",4]]]],[11,"lt","","",77,[[["generatorstate",4]]]],[11,"le","","",77,[[["generatorstate",4]]]],[11,"gt","","",77,[[["generatorstate",4]]]],[11,"ge","","",77,[[["generatorstate",4]]]],[11,"partial_cmp","","",79,[[["ordering",4]],[["option",4],["ordering",4]]]],[11,"fmt","","",69,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",78,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",77,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",79,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",83,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",84,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",82,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",71,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",70,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",74,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",72,[[["formatter",3]],[["error",3],["result",4]]]],[11,"next","","",84,[[],["option",4]]],[11,"size_hint","","",84,[[]]],[11,"nth","","",84,[[],["option",4]]],[11,"try_fold","","",84,[[]]],[11,"fold","","",84,[[]]],[11,"last","","",84,[[],["option",4]]],[11,"min","","",84,[[],["option",4]]],[11,"max","","",84,[[],["option",4]]],[11,"next","","",69,[[],["option",4]]],[11,"size_hint","","",69,[[]]],[11,"nth","","",69,[[],["option",4]]],[11,"last","","",69,[[],["option",4]]],[11,"min","","",69,[[],["option",4]]],[11,"max","","",69,[[],["option",4]]],[11,"next","","",70,[[],["option",4]]],[11,"size_hint","","",70,[[]]],[11,"nth","","",70,[[],["option",4]]],[11,"clone","","",74,[[],["rangetoinclusive",3]]],[11,"clone","","",72,[[],["bound",4]]],[11,"clone","","",82,[[],["parseinterror",3]]],[11,"clone","","",71,[[],["rangeto",3]]],[11,"clone","","",78,[[],["controlflow",4]]],[11,"clone","","",79,[[],["ordering",4]]],[11,"clone","","",69,[[],["range",3]]],[11,"clone","","",83,[[],["rangefull",3]]],[11,"clone","","",77,[[],["generatorstate",4]]],[11,"clone","","",84,[[],["rangeinclusive",3]]],[11,"clone","","",70,[[],["rangefrom",3]]],[11,"start_bound","","",69,[[],["bound",4]]],[11,"end_bound","","",69,[[],["bound",4]]],[11,"start_bound","","",70,[[],["bound",4]]],[11,"end_bound","","",70,[[],["bound",4]]],[11,"start_bound","","",74,[[],["bound",4]]],[11,"end_bound","","",74,[[],["bound",4]]],[11,"start_bound","","",70,[[],["bound",4]]],[11,"end_bound","","",70,[[],["bound",4]]],[11,"start_bound","","",84,[[],["bound",4]]],[11,"end_bound","","",84,[[],["bound",4]]],[11,"start_bound","","",71,[[],["bound",4]]],[11,"end_bound","","",71,[[],["bound",4]]],[11,"start_bound","","",84,[[],["bound",4]]],[11,"end_bound","","",84,[[],["bound",4]]],[11,"start_bound","","",74,[[],["bound",4]]],[11,"end_bound","","",74,[[],["bound",4]]],[11,"start_bound","","",71,[[],["bound",4]]],[11,"end_bound","","",71,[[],["bound",4]]],[11,"start_bound","","",83,[[],["bound",4]]],[11,"end_bound","","",83,[[],["bound",4]]],[11,"start_bound","","",69,[[],["bound",4]]],[11,"end_bound","","",69,[[],["bound",4]]],[11,"hash","","",79,[[]]],[11,"hash","","",72,[[]]],[11,"hash","","",83,[[]]],[11,"hash","","",71,[[]]],[11,"hash","","",69,[[]]],[11,"hash","","",84,[[]]],[11,"hash","","",70,[[]]],[11,"hash","","",74,[[]]],[11,"hash","","",77,[[]]],[11,"eq","","",77,[[["generatorstate",4]]]],[11,"ne","","",77,[[["generatorstate",4]]]],[11,"eq","","",79,[[["ordering",4]]]],[11,"eq","","",83,[[["rangefull",3]]]],[11,"eq","","",74,[[["rangetoinclusive",3]]]],[11,"ne","","",74,[[["rangetoinclusive",3]]]],[11,"eq","","",72,[[["bound",4]]]],[11,"ne","","",72,[[["bound",4]]]],[11,"eq","","",71,[[["rangeto",3]]]],[11,"ne","","",71,[[["rangeto",3]]]],[11,"eq","","",82,[[["parseinterror",3]]]],[11,"ne","","",82,[[["parseinterror",3]]]],[11,"eq","","",84,[[["rangeinclusive",3]]]],[11,"ne","","",84,[[["rangeinclusive",3]]]],[11,"eq","","",78,[[["controlflow",4]]]],[11,"ne","","",78,[[["controlflow",4]]]],[11,"eq","","",69,[[["range",3]]]],[11,"ne","","",69,[[["range",3]]]],[11,"eq","","",70,[[["rangefrom",3]]]],[11,"ne","","",70,[[["rangefrom",3]]]],[11,"fmt","","",81,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",80,[[["formatter",3]],[["error",3],["result",4]]]],[11,"bitor_assign","","",80,[[["biguint",3]]]],[11,"bitor_assign","","",81,[[["bigint",3]]]],[11,"bitor_assign","","",81,[[["bigint",3]]]],[11,"bitor_assign","","",80,[[["biguint",3]]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",81,[[["bigint",3]]]],[11,"sub_assign","","",80,[[]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",80,[[["biguint",3]]]],[11,"sub_assign","","",81,[[["bigint",3]]]],[11,"sub_assign","","",80,[[["biguint",3]]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",80,[[]]],[11,"sub_assign","","",80,[[]]],[11,"sub_assign","","",80,[[]]],[11,"sub_assign","","",80,[[]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",81,[[]]],[11,"sub_assign","","",80,[[]]],[11,"bitor","","",80,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",80,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",81,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",81,[[["bigint",3]],["bigint",3]]],[11,"from_str","","",81,[[],[["result",4],["bigint",3],["parsebiginterror",3]]]],[11,"from_str","","",80,[[],[["parsebiginterror",3],["result",4],["biguint",3]]]],[11,"checked_sub","","",81,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",80,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",81,[[["bigint",3]],["bigint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",80,[[["biguint",3]],["biguint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",80,[[["biguint",3]],["biguint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[["bigint",3]],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",80,[[],["biguint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"sub","","",81,[[],["bigint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from","","",80,[[],["biguint",3]]],[11,"from","","",80,[[],["biguint",3]]],[11,"from","","",81,[[["biguint",3]],["bigint",3]]],[11,"from","","",80,[[],["biguint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from","","",80,[[],["biguint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from","","",80,[[],["biguint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from","","",80,[[],["biguint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from","","",81,[[],["bigint",3]]],[11,"from_str_radix","","Creates and initializes a BigInt.",81,[[],[["result",4],["bigint",3],["parsebiginterror",3]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",80,[[],[["parsebiginterror",3],["result",4],["biguint",3]]]],[11,"fmt","","",81,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",80,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",80,[[]]],[11,"hash","","",81,[[]]],[11,"hash","","",0,[[]]],[11,"checked_add","","",81,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_add","","",80,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"shl_assign","","",80,[[]]],[11,"shl_assign","","",81,[[]]],[11,"nth_root","","",81,[[],["bigint",3]]],[11,"sqrt","","",81,[[],["bigint",3]]],[11,"cbrt","","",81,[[],["bigint",3]]],[11,"nth_root","","",80,[[],["biguint",3]]],[11,"sqrt","","",80,[[],["biguint",3]]],[11,"cbrt","","",80,[[],["biguint",3]]],[11,"fmt","","",81,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",80,[[["formatter",3]],[["error",3],["result",4]]]],[11,"to_bigint","","",80,[[],[["option",4],["bigint",3]]]],[11,"to_bigint","","",81,[[],[["option",4],["bigint",3]]]],[11,"div_assign","","",80,[[]]],[11,"div_assign","","",81,[[]]],[11,"div_assign","","",80,[[]]],[11,"div_assign","","",81,[[]]],[11,"div_assign","","",80,[[]]],[11,"div_assign","","",80,[[]]],[11,"div_assign","","",80,[[["biguint",3]]]],[11,"div_assign","","",80,[[["biguint",3]]]],[11,"div_assign","","",81,[[]]],[11,"div_assign","","",81,[[]]],[11,"div_assign","","",81,[[]]],[11,"div_assign","","",80,[[]]],[11,"div_assign","","",81,[[]]],[11,"div_assign","","",81,[[["bigint",3]]]],[11,"div_assign","","",81,[[]]],[11,"div_assign","","",80,[[]]],[11,"div_assign","","",81,[[]]],[11,"div_assign","","",81,[[["bigint",3]]]],[11,"div_assign","","",81,[[]]],[11,"div_assign","","",81,[[]]],[11,"div_assign","","",81,[[]]],[11,"div_assign","","",81,[[]]],[11,"from_i64","","",81,[[],[["option",4],["bigint",3]]]],[11,"from_i128","","",81,[[],[["option",4],["bigint",3]]]],[11,"from_u64","","",81,[[],[["option",4],["bigint",3]]]],[11,"from_u128","","",81,[[],[["option",4],["bigint",3]]]],[11,"from_f64","","",81,[[],[["option",4],["bigint",3]]]],[11,"from_i64","","",80,[[],[["biguint",3],["option",4]]]],[11,"from_i128","","",80,[[],[["biguint",3],["option",4]]]],[11,"from_u64","","",80,[[],[["biguint",3],["option",4]]]],[11,"from_u128","","",80,[[],[["biguint",3],["option",4]]]],[11,"from_f64","","",80,[[],[["biguint",3],["option",4]]]],[11,"mul_assign","","",81,[[]]],[11,"mul_assign","","",81,[[]]],[11,"mul_assign","","",81,[[]]],[11,"mul_assign","","",81,[[]]],[11,"mul_assign","","",81,[[]]],[11,"mul_assign","","",80,[[]]],[11,"mul_assign","","",80,[[["biguint",3]]]],[11,"mul_assign","","",81,[[]]],[11,"mul_assign","","",81,[[]]],[11,"mul_assign","","",81,[[]]],[11,"mul_assign","","",81,[[["bigint",3]]]],[11,"mul_assign","","",80,[[]]],[11,"mul_assign","","",80,[[]]],[11,"mul_assign","","",81,[[]]],[11,"mul_assign","","",80,[[]]],[11,"mul_assign","","",80,[[["biguint",3]]]],[11,"mul_assign","","",81,[[]]],[11,"mul_assign","","",80,[[]]],[11,"mul_assign","","",81,[[["bigint",3]]]],[11,"mul_assign","","",81,[[]]],[11,"mul_assign","","",80,[[]]],[11,"mul_assign","","",81,[[]]],[11,"default","","",80,[[],["biguint",3]]],[11,"default","","",81,[[],["bigint",3]]],[11,"partial_cmp","","",0,[[["sign",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",80,[[["biguint",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",81,[[["bigint",3]],[["option",4],["ordering",4]]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[["bigint",3]],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",80,[[["biguint",3]],["biguint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[["bigint",3]],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",80,[[["biguint",3]],["biguint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",80,[[],["biguint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"div","","",81,[[],["bigint",3]]],[11,"checked_mul","","",81,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",80,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"div_rem","","",80,[[["biguint",3]]]],[11,"div_floor","","",80,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",80,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",80,[[["biguint",3]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",80,[[["biguint",3]],["biguint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",80,[[["biguint",3]],["biguint",3]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",80,[[["biguint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",80,[[["biguint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",80,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",80,[[]]],[11,"div_rem","","",81,[[["bigint",3]]]],[11,"div_floor","","",81,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",81,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",81,[[["bigint",3]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",81,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",81,[[["bigint",3]],["bigint",3]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",81,[[["bigint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",81,[[["bigint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",81,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",81,[[]]],[11,"product","","",80,[[],["biguint",3]]],[11,"product","","",81,[[],["bigint",3]]],[11,"neg","","Negate Sign value.",0,[[],["sign",4]]],[11,"neg","","",80,[[],["biguint",3]]],[11,"neg","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",80,[[["biguint",3]],["biguint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",81,[[["bigint",3]],["bigint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",81,[[["bigint",3]],["bigint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",80,[[["biguint",3]],["biguint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"rem","","",80,[[],["biguint",3]]],[11,"rem","","",81,[[],["bigint",3]]],[11,"sum","","",81,[[],["bigint",3]]],[11,"sum","","",80,[[],["biguint",3]]],[11,"bitxor","","",80,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",81,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",81,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",80,[[["biguint",3]],["biguint",3]]],[11,"not","","",81,[[],["bigint",3]]],[11,"to_i64","","",80,[[],["option",4]]],[11,"to_i128","","",80,[[],["option",4]]],[11,"to_u64","","",80,[[],["option",4]]],[11,"to_u128","","",80,[[],["option",4]]],[11,"to_f32","","",80,[[],["option",4]]],[11,"to_f64","","",80,[[],["option",4]]],[11,"to_i64","","",81,[[],["option",4]]],[11,"to_i128","","",81,[[],["option",4]]],[11,"to_u64","","",81,[[],["option",4]]],[11,"to_u128","","",81,[[],["option",4]]],[11,"to_f32","","",81,[[],["option",4]]],[11,"to_f64","","",81,[[],["option",4]]],[11,"one","","",80,[[],["biguint",3]]],[11,"set_one","","",80,[[]]],[11,"is_one","","",80,[[]]],[11,"one","","",81,[[],["bigint",3]]],[11,"set_one","","",81,[[]]],[11,"is_one","","",81,[[]]],[11,"mul","","",80,[[["biguint",3]],["biguint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",80,[[["biguint",3]],["biguint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",81,[[["bigint",3]],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",0,[[["sign",4]],["sign",4]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",81,[[["bigint",3]],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",80,[[],["biguint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"mul","","",81,[[],["bigint",3]]],[11,"cmp","","",80,[[["biguint",3]],["ordering",4]]],[11,"cmp","","",0,[[["sign",4]],["ordering",4]]],[11,"cmp","","",81,[[["bigint",3]],["ordering",4]]],[11,"shl","","",80,[[],["biguint",3]]],[11,"shl","","",81,[[],["bigint",3]]],[11,"fmt","","",80,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",81,[[["formatter",3]],[["error",3],["result",4]]]],[11,"to_biguint","","",81,[[],[["biguint",3],["option",4]]]],[11,"to_biguint","","",80,[[],[["biguint",3],["option",4]]]],[11,"eq","","",0,[[["sign",4]]]],[11,"eq","","",81,[[["bigint",3]]]],[11,"eq","","",80,[[["biguint",3]]]],[11,"bitand_assign","","",81,[[["bigint",3]]]],[11,"bitand_assign","","",80,[[["biguint",3]]]],[11,"bitand_assign","","",81,[[["bigint",3]]]],[11,"bitand_assign","","",80,[[["biguint",3]]]],[11,"rem_assign","","",80,[[]]],[11,"rem_assign","","",81,[[]]],[11,"rem_assign","","",81,[[]]],[11,"rem_assign","","",81,[[]]],[11,"rem_assign","","",81,[[]]],[11,"rem_assign","","",81,[[]]],[11,"rem_assign","","",80,[[]]],[11,"rem_assign","","",80,[[]]],[11,"rem_assign","","",81,[[]]],[11,"rem_assign","","",80,[[]]],[11,"rem_assign","","",81,[[["bigint",3]]]],[11,"rem_assign","","",81,[[["bigint",3]]]],[11,"rem_assign","","",81,[[]]],[11,"rem_assign","","",80,[[["biguint",3]]]],[11,"rem_assign","","",80,[[]]],[11,"rem_assign","","",81,[[]]],[11,"rem_assign","","",81,[[]]],[11,"rem_assign","","",80,[[]]],[11,"rem_assign","","",81,[[]]],[11,"rem_assign","","",80,[[["biguint",3]]]],[11,"rem_assign","","",81,[[]]],[11,"rem_assign","","",81,[[]]],[11,"shr_assign","","",81,[[]]],[11,"shr_assign","","",80,[[]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",80,[[["biguint",3]],["biguint",3]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[["bigint",3]],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",80,[[["biguint",3]],["biguint",3]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",80,[[],["biguint",3]]],[11,"add","","",81,[[["bigint",3]],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"add","","",81,[[],["bigint",3]]],[11,"fmt","","",80,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",81,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",80,[[],["biguint",3]]],[11,"clone","","",81,[[],["bigint",3]]],[11,"clone","","",0,[[],["sign",4]]],[11,"checked_div","","",80,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"checked_div","","",81,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"add_assign","","",81,[[]]],[11,"add_assign","","",80,[[]]],[11,"add_assign","","",81,[[]]],[11,"add_assign","","",80,[[["biguint",3]]]],[11,"add_assign","","",80,[[]]],[11,"add_assign","","",80,[[]]],[11,"add_assign","","",81,[[]]],[11,"add_assign","","",81,[[]]],[11,"add_assign","","",81,[[]]],[11,"add_assign","","",81,[[]]],[11,"add_assign","","",81,[[["bigint",3]]]],[11,"add_assign","","",81,[[]]],[11,"add_assign","","",80,[[["biguint",3]]]],[11,"add_assign","","",81,[[]]],[11,"add_assign","","",81,[[]]],[11,"add_assign","","",80,[[]]],[11,"add_assign","","",81,[[]]],[11,"add_assign","","",80,[[]]],[11,"add_assign","","",81,[[["bigint",3]]]],[11,"add_assign","","",81,[[]]],[11,"add_assign","","",80,[[]]],[11,"add_assign","","",81,[[]]],[11,"bitand","","",80,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",81,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",81,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",80,[[["biguint",3]],["biguint",3]]],[11,"shr","","",81,[[],["bigint",3]]],[11,"shr","","",80,[[],["biguint",3]]],[11,"abs","","",81,[[],["bigint",3]]],[11,"abs_sub","","",81,[[["bigint",3]],["bigint",3]]],[11,"signum","","",81,[[],["bigint",3]]],[11,"is_positive","","",81,[[]]],[11,"is_negative","","",81,[[]]],[11,"zero","","",80,[[],["biguint",3]]],[11,"set_zero","","",80,[[]]],[11,"is_zero","","",80,[[]]],[11,"zero","","",81,[[],["bigint",3]]],[11,"set_zero","","",81,[[]]],[11,"is_zero","","",81,[[]]],[11,"bitxor_assign","","",81,[[["bigint",3]]]],[11,"bitxor_assign","","",81,[[["bigint",3]]]],[11,"bitxor_assign","","",80,[[["biguint",3]]]],[11,"bitxor_assign","","",80,[[["biguint",3]]]],[11,"fmt","","",80,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",81,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","abstract_integers::traits","",38,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",37,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",38,[[["formatter",3]],[["error",3],["result",4]]]],[11,"new","abstract_integers","Creates and initializes a `BigUint`.",80,[[["vec",3]],["biguint",3]]],[11,"from_slice","","Creates and initializes a `BigUint`.",80,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a `BigUint`.",80,[[]]],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",80,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",80,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must…",80,[[],[["biguint",3],["option",4]]]],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input…",80,[[],[["biguint",3],["option",4]]]],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input…",80,[[],[["biguint",3],["option",4]]]],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in…",80,[[],["vec",3]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in…",80,[[],["vec",3]]],[11,"to_u32_digits","","Returns the `u32` digits representation of the `BigUint`…",80,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",80,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",80,[[],["vec",3]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",80,[[],["vec",3]]],[11,"bits","","Determines the fewest bits necessary to express the…",80,[[]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",80,[[["biguint",3]],["biguint",3]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",80,[[],["biguint",3]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",80,[[],["biguint",3]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",80,[[],["biguint",3]]],[11,"new","","Creates and initializes a BigInt.",81,[[["vec",3],["sign",4]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",81,[[["sign",4],["biguint",3]],["bigint",3]]],[11,"from_slice","","Creates and initializes a `BigInt`.",81,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a `BigInt`.",81,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",81,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",81,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes…",81,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes…",81,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a `BigInt`.",81,[[],[["option",4],["bigint",3]]]],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input…",81,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input…",81,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the…",81,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the…",81,[[]]],[11,"to_u32_digits","","Returns the sign and the `u32` digits representation of…",81,[[]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the…",81,[[],["vec",3]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the…",81,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",81,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",81,[[]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",81,[[]]],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",81,[[],["sign",4]]],[11,"bits","","Determines the fewest bits necessary to express the…",81,[[]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it\'s not…",81,[[],[["biguint",3],["option",4]]]],[11,"checked_add","","",81,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",81,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",81,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",81,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",81,[[["bigint",3]],["bigint",3]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",81,[[],["bigint",3]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",81,[[],["bigint",3]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",81,[[],["bigint",3]]],[11,"kind","","Outputs the detailed cause of parsing an integer failing.",82,[[],["interrorkind",4]]],[11,"contains","","Returns `true` if `item` is contained in the range.",69,[[]]],[11,"is_empty","","Returns `true` if the range contains no items.",69,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",70,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",71,[[]]],[11,"cloned","","Map a `Bound<&T>` to a `Bound<T>` by cloning the contents…",72,[[],["bound",4]]],[11,"new","","Creates a new inclusive range. Equivalent to writing…",84,[[],["rangeinclusive",3]]],[11,"start","","Returns the lower bound of the range (inclusive).",84,[[]]],[11,"end","","Returns the upper bound of the range (inclusive).",84,[[]]],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper…",84,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",84,[[]]],[11,"is_empty","","Returns `true` if the range contains no items.",84,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",74,[[]]],[11,"break_value","","Converts the `ControlFlow` into an `Option` which is…",78,[[],["option",4]]],[11,"from_try","","Create a `ControlFlow` from any type implementing `Try`.",78,[[],["controlflow",4]]],[11,"into_try","","Convert a `ControlFlow` into any type implementing `Try`;",78,[[]]],[18,"CONTINUE","","It\'s frequently the case that there\'s no value needed with…",78,null],[18,"BREAK","","APIs like `try_for_each` don\'t need values with `Break`,…",78,null],[11,"reverse","","Reverses the `Ordering`.",79,[[],["ordering",4]]],[11,"then","","Chains two orderings.",79,[[["ordering",4]],["ordering",4]]],[11,"then_with","","Chains the ordering with the given function.",79,[[],["ordering",4]]]],"p":[[4,"Sign"],[8,"CheckedSub"],[8,"Zero"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Add"],[8,"Div"],[8,"Mul"],[8,"Neg"],[8,"Rem"],[8,"Sub"],[8,"AddAssign"],[8,"DivAssign"],[8,"MulAssign"],[8,"RemAssign"],[8,"SubAssign"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Not"],[8,"Shl"],[8,"Shr"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Deref"],[8,"DerefMut"],[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Index"],[8,"IndexMut"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Bound"],[8,"RangeBounds"],[3,"RangeToInclusive"],[8,"Try"],[8,"Generator"],[4,"GeneratorState"],[4,"ControlFlow"],[4,"Ordering"],[3,"BigUint"],[3,"BigInt"],[3,"ParseIntError"],[3,"RangeFull"],[3,"RangeInclusive"]],"a":{"%":[551,563],"%=":[563],"&":[567],"&*":[595],"&=":[585],"*":[545,561,595,598],"*=":[561],"+":[539,557],"+=":[557],"-":[548,554,565],"-=":[565],"..":[614,617,619,620],"..=":[630,631],"/":[542,559],"/=":[559],"<<":[579],"<<=":[591],">>":[582],">>=":[593],"?":[633],"[":[609,612],"[]":[609,612],"]":[609,612],"^":[573],"^=":[589],"|":[570],"|=":[587]}},\
"chacha20":{"doc":"ChaCha20 is specified in RFC 8439.","i":[[3,"State","chacha20","Fixed length byte array.",null,null],[12,"0","","",0,null],[3,"StateBytes","","Fixed length byte array.",null,null],[12,"0","","",1,null],[3,"IV","","Fixed length byte array.",null,null],[12,"0","","",2,null],[3,"Key","","Fixed length byte array.",null,null],[12,"0","","",3,null],[5,"state_to_bytes","","",null,[[["state",3]],["statebytes",3]]],[5,"quarter_round","","",null,[[["state",3]],["state",3]]],[5,"block_init","","",null,[[["key",3],["u32",3],["iv",3]],["state",3]]],[5,"block_inner","","",null,[[["key",3],["u32",3],["iv",3]],["state",3]]],[5,"block","","",null,[[["key",3],["u32",3],["iv",3]],["statebytes",3]]],[5,"chacha","","",null,[[["key",3],["byteseq",6],["iv",3]],["byteseq",6]]],[11,"new","","",0,[[]]],[11,"length","","",0,[[]]],[11,"from_array","","",0,[[]]],[11,"from_native_slice","","",0,[[]]],[11,"capacity","","",0,[[]]],[11,"from_slice","","",0,[[]]],[11,"from_slice_range","","",0,[[["range",3]]]],[11,"slice","","",0,[[],[["u32",3],["seq",3]]]],[11,"slice_range","","",0,[[["range",3]],[["u32",3],["seq",3]]]],[11,"num_chunks","","",0,[[]]],[11,"get_chunk_len","","",0,[[]]],[11,"get_chunk","","",0,[[]]],[11,"set_chunk","","",0,[[]]],[11,"from_vec","","",0,[[["u32",3],["vec",3]],["state",3]]],[11,"from_seq","","",0,[[],["state",3]]],[11,"from_hex","","Read hex string to Bytes.",0,[[],["state",3]]],[11,"declassify_eq","","",0,[[]]],[11,"to_be_bytes","","",0,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",0,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",0,[[],["state",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",0,[[],["state",3]]],[11,"new","","",1,[[]]],[11,"length","","",1,[[]]],[11,"from_array","","",1,[[]]],[11,"from_native_slice","","",1,[[]]],[11,"capacity","","",1,[[]]],[11,"from_slice","","",1,[[]]],[11,"from_slice_range","","",1,[[["range",3]]]],[11,"slice","","",1,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",1,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",1,[[]]],[11,"get_chunk_len","","",1,[[]]],[11,"get_chunk","","",1,[[]]],[11,"set_chunk","","",1,[[]]],[11,"from_vec","","",1,[[["vec",3],["u8",3]],["statebytes",3]]],[11,"from_seq","","",1,[[],["statebytes",3]]],[11,"from_hex","","Read hex string to Bytes.",1,[[],["statebytes",3]]],[11,"declassify_eq","","",1,[[]]],[11,"to_be_bytes","","",1,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",1,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",1,[[],["statebytes",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",1,[[],["statebytes",3]]],[11,"to_be_U32s","","",1,[[],[["u32",3],["seq",3]]]],[11,"to_le_U32s","","",1,[[],[["u32",3],["seq",3]]]],[11,"to_be_U64s","","",1,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",1,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",1,[[],[["u128",3],["seq",3]]]],[11,"to_U128s_le","","",1,[[],[["u128",3],["seq",3]]]],[11,"to_hex","","",1,[[],["string",3]]],[11,"new","","",2,[[]]],[11,"length","","",2,[[]]],[11,"from_array","","",2,[[]]],[11,"from_native_slice","","",2,[[]]],[11,"capacity","","",2,[[]]],[11,"from_slice","","",2,[[]]],[11,"from_slice_range","","",2,[[["range",3]]]],[11,"slice","","",2,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",2,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",2,[[]]],[11,"get_chunk_len","","",2,[[]]],[11,"get_chunk","","",2,[[]]],[11,"set_chunk","","",2,[[]]],[11,"from_vec","","",2,[[["vec",3],["u8",3]],["iv",3]]],[11,"from_seq","","",2,[[],["iv",3]]],[11,"from_hex","","Read hex string to Bytes.",2,[[],["iv",3]]],[11,"declassify_eq","","",2,[[]]],[11,"to_be_bytes","","",2,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",2,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",2,[[],["iv",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",2,[[],["iv",3]]],[11,"to_be_U32s","","",2,[[],[["u32",3],["seq",3]]]],[11,"to_le_U32s","","",2,[[],[["u32",3],["seq",3]]]],[11,"to_be_U64s","","",2,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",2,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",2,[[],[["u128",3],["seq",3]]]],[11,"to_U128s_le","","",2,[[],[["u128",3],["seq",3]]]],[11,"to_hex","","",2,[[],["string",3]]],[11,"new","","",3,[[]]],[11,"length","","",3,[[]]],[11,"from_array","","",3,[[]]],[11,"from_native_slice","","",3,[[]]],[11,"capacity","","",3,[[]]],[11,"from_slice","","",3,[[]]],[11,"from_slice_range","","",3,[[["range",3]]]],[11,"slice","","",3,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",3,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",3,[[]]],[11,"get_chunk_len","","",3,[[]]],[11,"get_chunk","","",3,[[]]],[11,"set_chunk","","",3,[[]]],[11,"from_vec","","",3,[[["vec",3],["u8",3]],["key",3]]],[11,"from_seq","","",3,[[],["key",3]]],[11,"from_hex","","Read hex string to Bytes.",3,[[],["key",3]]],[11,"declassify_eq","","",3,[[]]],[11,"to_be_bytes","","",3,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",3,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",3,[[],["key",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",3,[[],["key",3]]],[11,"to_be_U32s","","",3,[[],[["u32",3],["seq",3]]]],[11,"to_le_U32s","","",3,[[],[["u32",3],["seq",3]]]],[11,"to_be_U64s","","",3,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",3,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",3,[[],[["u128",3],["seq",3]]]],[11,"to_U128s_le","","",3,[[],[["u128",3],["seq",3]]]],[11,"to_hex","","",3,[[],["string",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"clone","","",0,[[],["state",3]]],[11,"clone","","",1,[[],["statebytes",3]]],[11,"clone","","",2,[[],["iv",3]]],[11,"clone","","",3,[[],["key",3]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[]]],[11,"default","","",3,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"rem","","",0,[[["state",3]],["state",3]]],[11,"rem","","",1,[[["statebytes",3]],["statebytes",3]]],[11,"rem","","",2,[[["iv",3]],["iv",3]]],[11,"rem","","",3,[[["key",3]],["key",3]]],[11,"sub","","",0,[[["state",3]],["state",3]]],[11,"sub","","",1,[[["statebytes",3]],["statebytes",3]]],[11,"sub","","",2,[[["iv",3]],["iv",3]]],[11,"sub","","",3,[[["key",3]],["key",3]]],[11,"add","","",0,[[["state",3]],["state",3]]],[11,"add","","",1,[[["statebytes",3]],["statebytes",3]]],[11,"add","","",2,[[["iv",3]],["iv",3]]],[11,"add","","",3,[[["key",3]],["key",3]]],[11,"mul","","",0,[[["state",3]],["state",3]]],[11,"mul","","",1,[[["statebytes",3]],["statebytes",3]]],[11,"mul","","",2,[[["iv",3]],["iv",3]]],[11,"mul","","",3,[[["key",3]],["key",3]]],[11,"not","","",0,[[]]],[11,"not","","",1,[[]]],[11,"not","","",2,[[]]],[11,"not","","",3,[[]]],[11,"bitand","","",0,[[]]],[11,"bitand","","",1,[[]]],[11,"bitand","","",2,[[]]],[11,"bitand","","",3,[[]]],[11,"bitor","","",0,[[]]],[11,"bitor","","",1,[[]]],[11,"bitor","","",2,[[]]],[11,"bitor","","",3,[[]]],[11,"bitxor","","",0,[[]]],[11,"bitxor","","",1,[[]]],[11,"bitxor","","",2,[[]]],[11,"bitxor","","",3,[[]]],[11,"shl","","",0,[[]]],[11,"shl","","",1,[[]]],[11,"shl","","",2,[[]]],[11,"shl","","",3,[[]]],[11,"shr","","",0,[[]]],[11,"shr","","",1,[[]]],[11,"shr","","",2,[[]]],[11,"shr","","",3,[[]]],[11,"index","","",0,[[],["u32",3]]],[11,"index","","",0,[[],["u32",3]]],[11,"index","","",0,[[],["u32",3]]],[11,"index","","",0,[[],["u32",3]]],[11,"index","","",0,[[["rangefull",3]]]],[11,"index","","",1,[[],["u8",3]]],[11,"index","","",1,[[],["u8",3]]],[11,"index","","",1,[[],["u8",3]]],[11,"index","","",1,[[],["u8",3]]],[11,"index","","",1,[[["rangefull",3]]]],[11,"index","","",2,[[],["u8",3]]],[11,"index","","",2,[[],["u8",3]]],[11,"index","","",2,[[],["u8",3]]],[11,"index","","",2,[[],["u8",3]]],[11,"index","","",2,[[["rangefull",3]]]],[11,"index","","",3,[[],["u8",3]]],[11,"index","","",3,[[],["u8",3]]],[11,"index","","",3,[[],["u8",3]]],[11,"index","","",3,[[],["u8",3]]],[11,"index","","",3,[[["rangefull",3]]]],[11,"index_mut","","",0,[[],["u32",3]]],[11,"index_mut","","",0,[[],["u32",3]]],[11,"index_mut","","",0,[[],["u32",3]]],[11,"index_mut","","",0,[[],["u32",3]]],[11,"index_mut","","",1,[[],["u8",3]]],[11,"index_mut","","",1,[[],["u8",3]]],[11,"index_mut","","",1,[[],["u8",3]]],[11,"index_mut","","",1,[[],["u8",3]]],[11,"index_mut","","",2,[[],["u8",3]]],[11,"index_mut","","",2,[[],["u8",3]]],[11,"index_mut","","",2,[[],["u8",3]]],[11,"index_mut","","",2,[[],["u8",3]]],[11,"index_mut","","",3,[[],["u8",3]]],[11,"index_mut","","",3,[[],["u8",3]]],[11,"index_mut","","",3,[[],["u8",3]]],[11,"index_mut","","",3,[[],["u8",3]]],[11,"create","","",0,[[]]],[11,"len","","",0,[[]]],[11,"iter","","",0,[[],[["iter",3],["u32",3]]]],[11,"update_slice","","",0,[[]]],[11,"update","","",0,[[]]],[11,"update_start","","",0,[[]]],[11,"create","","",1,[[]]],[11,"len","","",1,[[]]],[11,"iter","","",1,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",1,[[]]],[11,"update","","",1,[[]]],[11,"update_start","","",1,[[]]],[11,"create","","",2,[[]]],[11,"len","","",2,[[]]],[11,"iter","","",2,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",2,[[]]],[11,"update","","",2,[[]]],[11,"update_start","","",2,[[]]],[11,"create","","",3,[[]]],[11,"len","","",3,[[]]],[11,"iter","","",3,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",3,[[]]],[11,"update","","",3,[[]]],[11,"update_start","","",3,[[]]],[11,"sub_mod","","(self - rhs) % n.",0,[[]]],[11,"add_mod","","`(self + rhs) % n`",0,[[]]],[11,"mul_mod","","`(self * rhs) % n`",0,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",0,[[]]],[11,"modulo","","`self % n`",0,[[]]],[11,"signed_modulo","","",0,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",0,[[]]],[11,"sub_mod","","(self - rhs) % n.",1,[[]]],[11,"add_mod","","`(self + rhs) % n`",1,[[]]],[11,"mul_mod","","`(self * rhs) % n`",1,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",1,[[]]],[11,"modulo","","`self % n`",1,[[]]],[11,"signed_modulo","","",1,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",1,[[]]],[11,"sub_mod","","(self - rhs) % n.",2,[[]]],[11,"add_mod","","`(self + rhs) % n`",2,[[]]],[11,"mul_mod","","`(self * rhs) % n`",2,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",2,[[]]],[11,"modulo","","`self % n`",2,[[]]],[11,"signed_modulo","","",2,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",2,[[]]],[11,"sub_mod","","(self - rhs) % n.",3,[[]]],[11,"add_mod","","`(self + rhs) % n`",3,[[]]],[11,"mul_mod","","`(self * rhs) % n`",3,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",3,[[]]],[11,"modulo","","`self % n`",3,[[]]],[11,"signed_modulo","","",3,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",3,[[]]],[11,"max_val","","Return largest value that can be represented.",0,[[]]],[11,"wrap_add","","",0,[[]]],[11,"wrap_sub","","",0,[[]]],[11,"wrap_mul","","",0,[[]]],[11,"wrap_div","","",0,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",0,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",0,[[]]],[11,"divide","","Division.",0,[[]]],[11,"inv","","Invert self modulo n.",0,[[]]],[11,"equal","","",0,[[]]],[11,"greater_than","","",0,[[]]],[11,"greater_than_or_qual","","",0,[[]]],[11,"less_than","","",0,[[]]],[11,"less_than_or_equal","","",0,[[]]],[11,"not_equal_bm","","",0,[[]]],[11,"equal_bm","","",0,[[]]],[11,"greater_than_bm","","",0,[[]]],[11,"greater_than_or_equal_bm","","",0,[[]]],[11,"less_than_bm","","",0,[[]]],[11,"less_than_or_equal_bm","","",0,[[]]],[11,"max_val","","Return largest value that can be represented.",1,[[]]],[11,"wrap_add","","",1,[[]]],[11,"wrap_sub","","",1,[[]]],[11,"wrap_mul","","",1,[[]]],[11,"wrap_div","","",1,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",1,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",1,[[]]],[11,"divide","","Division.",1,[[]]],[11,"inv","","Invert self modulo n.",1,[[]]],[11,"equal","","",1,[[]]],[11,"greater_than","","",1,[[]]],[11,"greater_than_or_qual","","",1,[[]]],[11,"less_than","","",1,[[]]],[11,"less_than_or_equal","","",1,[[]]],[11,"not_equal_bm","","",1,[[]]],[11,"equal_bm","","",1,[[]]],[11,"greater_than_bm","","",1,[[]]],[11,"greater_than_or_equal_bm","","",1,[[]]],[11,"less_than_bm","","",1,[[]]],[11,"less_than_or_equal_bm","","",1,[[]]],[11,"max_val","","Return largest value that can be represented.",2,[[]]],[11,"wrap_add","","",2,[[]]],[11,"wrap_sub","","",2,[[]]],[11,"wrap_mul","","",2,[[]]],[11,"wrap_div","","",2,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",2,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",2,[[]]],[11,"divide","","Division.",2,[[]]],[11,"inv","","Invert self modulo n.",2,[[]]],[11,"equal","","",2,[[]]],[11,"greater_than","","",2,[[]]],[11,"greater_than_or_qual","","",2,[[]]],[11,"less_than","","",2,[[]]],[11,"less_than_or_equal","","",2,[[]]],[11,"not_equal_bm","","",2,[[]]],[11,"equal_bm","","",2,[[]]],[11,"greater_than_bm","","",2,[[]]],[11,"greater_than_or_equal_bm","","",2,[[]]],[11,"less_than_bm","","",2,[[]]],[11,"less_than_or_equal_bm","","",2,[[]]],[11,"max_val","","Return largest value that can be represented.",3,[[]]],[11,"wrap_add","","",3,[[]]],[11,"wrap_sub","","",3,[[]]],[11,"wrap_mul","","",3,[[]]],[11,"wrap_div","","",3,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",3,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",3,[[]]],[11,"divide","","Division.",3,[[]]],[11,"inv","","Invert self modulo n.",3,[[]]],[11,"equal","","",3,[[]]],[11,"greater_than","","",3,[[]]],[11,"greater_than_or_qual","","",3,[[]]],[11,"less_than","","",3,[[]]],[11,"less_than_or_equal","","",3,[[]]],[11,"not_equal_bm","","",3,[[]]],[11,"equal_bm","","",3,[[]]],[11,"greater_than_bm","","",3,[[]]],[11,"greater_than_or_equal_bm","","",3,[[]]],[11,"less_than_bm","","",3,[[]]],[11,"less_than_or_equal_bm","","",3,[[]]]],"p":[[3,"State"],[3,"StateBytes"],[3,"IV"],[3,"Key"]]},\
"chacha20_rfc7539":{"doc":"ChaCha20 is specified in RFC 7539.","i":[[3,"State","chacha20_rfc7539","Fixed length byte array.",null,null],[12,"0","","",0,null],[3,"StateBytes","","Fixed length byte array.",null,null],[12,"0","","",1,null],[3,"IV","","Fixed length byte array.",null,null],[12,"0","","",2,null],[3,"Key","","Fixed length byte array.",null,null],[12,"0","","",3,null],[5,"state_to_bytes","","",null,[[["state",3]],["statebytes",3]]],[5,"quarter_round","","",null,[[["state",3]],["state",3]]],[5,"block_init","","",null,[[["key",3],["u32",3],["iv",3]],["state",3]]],[5,"block_inner","","",null,[[["key",3],["u32",3],["iv",3]],["state",3]]],[5,"block","","",null,[[["key",3],["u32",3],["iv",3]],["statebytes",3]]],[5,"chacha","","",null,[[["key",3],["byteseq",6],["iv",3]],["byteseq",6]]],[11,"new","","",0,[[]]],[11,"length","","",0,[[]]],[11,"from_array","","",0,[[]]],[11,"from_native_slice","","",0,[[]]],[11,"capacity","","",0,[[]]],[11,"from_slice","","",0,[[]]],[11,"from_slice_range","","",0,[[["range",3]]]],[11,"slice","","",0,[[],[["u32",3],["seq",3]]]],[11,"slice_range","","",0,[[["range",3]],[["u32",3],["seq",3]]]],[11,"num_chunks","","",0,[[]]],[11,"get_chunk_len","","",0,[[]]],[11,"get_chunk","","",0,[[]]],[11,"set_chunk","","",0,[[]]],[11,"from_vec","","",0,[[["u32",3],["vec",3]],["state",3]]],[11,"from_seq","","",0,[[],["state",3]]],[11,"from_hex","","Read hex string to Bytes.",0,[[],["state",3]]],[11,"declassify_eq","","",0,[[]]],[11,"to_be_bytes","","",0,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",0,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",0,[[],["state",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",0,[[],["state",3]]],[11,"new","","",1,[[]]],[11,"length","","",1,[[]]],[11,"from_array","","",1,[[]]],[11,"from_native_slice","","",1,[[]]],[11,"capacity","","",1,[[]]],[11,"from_slice","","",1,[[]]],[11,"from_slice_range","","",1,[[["range",3]]]],[11,"slice","","",1,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",1,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",1,[[]]],[11,"get_chunk_len","","",1,[[]]],[11,"get_chunk","","",1,[[]]],[11,"set_chunk","","",1,[[]]],[11,"from_vec","","",1,[[["vec",3],["u8",3]],["statebytes",3]]],[11,"from_seq","","",1,[[],["statebytes",3]]],[11,"from_hex","","Read hex string to Bytes.",1,[[],["statebytes",3]]],[11,"declassify_eq","","",1,[[]]],[11,"to_be_bytes","","",1,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",1,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",1,[[],["statebytes",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",1,[[],["statebytes",3]]],[11,"to_be_U32s","","",1,[[],[["u32",3],["seq",3]]]],[11,"to_le_U32s","","",1,[[],[["u32",3],["seq",3]]]],[11,"to_be_U64s","","",1,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",1,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",1,[[],[["u128",3],["seq",3]]]],[11,"to_U128s_le","","",1,[[],[["u128",3],["seq",3]]]],[11,"to_hex","","",1,[[],["string",3]]],[11,"new","","",2,[[]]],[11,"length","","",2,[[]]],[11,"from_array","","",2,[[]]],[11,"from_native_slice","","",2,[[]]],[11,"capacity","","",2,[[]]],[11,"from_slice","","",2,[[]]],[11,"from_slice_range","","",2,[[["range",3]]]],[11,"slice","","",2,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",2,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",2,[[]]],[11,"get_chunk_len","","",2,[[]]],[11,"get_chunk","","",2,[[]]],[11,"set_chunk","","",2,[[]]],[11,"from_vec","","",2,[[["vec",3],["u8",3]],["iv",3]]],[11,"from_seq","","",2,[[],["iv",3]]],[11,"from_hex","","Read hex string to Bytes.",2,[[],["iv",3]]],[11,"declassify_eq","","",2,[[]]],[11,"to_be_bytes","","",2,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",2,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",2,[[],["iv",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",2,[[],["iv",3]]],[11,"to_be_U32s","","",2,[[],[["u32",3],["seq",3]]]],[11,"to_le_U32s","","",2,[[],[["u32",3],["seq",3]]]],[11,"to_be_U64s","","",2,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",2,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",2,[[],[["u128",3],["seq",3]]]],[11,"to_U128s_le","","",2,[[],[["u128",3],["seq",3]]]],[11,"to_hex","","",2,[[],["string",3]]],[11,"new","","",3,[[]]],[11,"length","","",3,[[]]],[11,"from_array","","",3,[[]]],[11,"from_native_slice","","",3,[[]]],[11,"capacity","","",3,[[]]],[11,"from_slice","","",3,[[]]],[11,"from_slice_range","","",3,[[["range",3]]]],[11,"slice","","",3,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",3,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",3,[[]]],[11,"get_chunk_len","","",3,[[]]],[11,"get_chunk","","",3,[[]]],[11,"set_chunk","","",3,[[]]],[11,"from_vec","","",3,[[["vec",3],["u8",3]],["key",3]]],[11,"from_seq","","",3,[[],["key",3]]],[11,"from_hex","","Read hex string to Bytes.",3,[[],["key",3]]],[11,"declassify_eq","","",3,[[]]],[11,"to_be_bytes","","",3,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",3,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",3,[[],["key",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",3,[[],["key",3]]],[11,"to_be_U32s","","",3,[[],[["u32",3],["seq",3]]]],[11,"to_le_U32s","","",3,[[],[["u32",3],["seq",3]]]],[11,"to_be_U64s","","",3,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",3,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",3,[[],[["u128",3],["seq",3]]]],[11,"to_U128s_le","","",3,[[],[["u128",3],["seq",3]]]],[11,"to_hex","","",3,[[],["string",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"clone","","",0,[[],["state",3]]],[11,"clone","","",1,[[],["statebytes",3]]],[11,"clone","","",2,[[],["iv",3]]],[11,"clone","","",3,[[],["key",3]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[]]],[11,"default","","",3,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"rem","","",0,[[["state",3]],["state",3]]],[11,"rem","","",1,[[["statebytes",3]],["statebytes",3]]],[11,"rem","","",2,[[["iv",3]],["iv",3]]],[11,"rem","","",3,[[["key",3]],["key",3]]],[11,"sub","","",0,[[["state",3]],["state",3]]],[11,"sub","","",1,[[["statebytes",3]],["statebytes",3]]],[11,"sub","","",2,[[["iv",3]],["iv",3]]],[11,"sub","","",3,[[["key",3]],["key",3]]],[11,"add","","",0,[[["state",3]],["state",3]]],[11,"add","","",1,[[["statebytes",3]],["statebytes",3]]],[11,"add","","",2,[[["iv",3]],["iv",3]]],[11,"add","","",3,[[["key",3]],["key",3]]],[11,"mul","","",0,[[["state",3]],["state",3]]],[11,"mul","","",1,[[["statebytes",3]],["statebytes",3]]],[11,"mul","","",2,[[["iv",3]],["iv",3]]],[11,"mul","","",3,[[["key",3]],["key",3]]],[11,"not","","",0,[[]]],[11,"not","","",1,[[]]],[11,"not","","",2,[[]]],[11,"not","","",3,[[]]],[11,"bitand","","",0,[[]]],[11,"bitand","","",1,[[]]],[11,"bitand","","",2,[[]]],[11,"bitand","","",3,[[]]],[11,"bitor","","",0,[[]]],[11,"bitor","","",1,[[]]],[11,"bitor","","",2,[[]]],[11,"bitor","","",3,[[]]],[11,"bitxor","","",0,[[]]],[11,"bitxor","","",1,[[]]],[11,"bitxor","","",2,[[]]],[11,"bitxor","","",3,[[]]],[11,"shl","","",0,[[]]],[11,"shl","","",1,[[]]],[11,"shl","","",2,[[]]],[11,"shl","","",3,[[]]],[11,"shr","","",0,[[]]],[11,"shr","","",1,[[]]],[11,"shr","","",2,[[]]],[11,"shr","","",3,[[]]],[11,"index","","",0,[[],["u32",3]]],[11,"index","","",0,[[],["u32",3]]],[11,"index","","",0,[[],["u32",3]]],[11,"index","","",0,[[],["u32",3]]],[11,"index","","",0,[[["rangefull",3]]]],[11,"index","","",1,[[],["u8",3]]],[11,"index","","",1,[[],["u8",3]]],[11,"index","","",1,[[],["u8",3]]],[11,"index","","",1,[[],["u8",3]]],[11,"index","","",1,[[["rangefull",3]]]],[11,"index","","",2,[[],["u8",3]]],[11,"index","","",2,[[],["u8",3]]],[11,"index","","",2,[[],["u8",3]]],[11,"index","","",2,[[],["u8",3]]],[11,"index","","",2,[[["rangefull",3]]]],[11,"index","","",3,[[],["u8",3]]],[11,"index","","",3,[[],["u8",3]]],[11,"index","","",3,[[],["u8",3]]],[11,"index","","",3,[[],["u8",3]]],[11,"index","","",3,[[["rangefull",3]]]],[11,"index_mut","","",0,[[],["u32",3]]],[11,"index_mut","","",0,[[],["u32",3]]],[11,"index_mut","","",0,[[],["u32",3]]],[11,"index_mut","","",0,[[],["u32",3]]],[11,"index_mut","","",1,[[],["u8",3]]],[11,"index_mut","","",1,[[],["u8",3]]],[11,"index_mut","","",1,[[],["u8",3]]],[11,"index_mut","","",1,[[],["u8",3]]],[11,"index_mut","","",2,[[],["u8",3]]],[11,"index_mut","","",2,[[],["u8",3]]],[11,"index_mut","","",2,[[],["u8",3]]],[11,"index_mut","","",2,[[],["u8",3]]],[11,"index_mut","","",3,[[],["u8",3]]],[11,"index_mut","","",3,[[],["u8",3]]],[11,"index_mut","","",3,[[],["u8",3]]],[11,"index_mut","","",3,[[],["u8",3]]],[11,"create","","",0,[[]]],[11,"len","","",0,[[]]],[11,"iter","","",0,[[],[["iter",3],["u32",3]]]],[11,"update_slice","","",0,[[]]],[11,"update","","",0,[[]]],[11,"update_start","","",0,[[]]],[11,"create","","",1,[[]]],[11,"len","","",1,[[]]],[11,"iter","","",1,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",1,[[]]],[11,"update","","",1,[[]]],[11,"update_start","","",1,[[]]],[11,"create","","",2,[[]]],[11,"len","","",2,[[]]],[11,"iter","","",2,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",2,[[]]],[11,"update","","",2,[[]]],[11,"update_start","","",2,[[]]],[11,"create","","",3,[[]]],[11,"len","","",3,[[]]],[11,"iter","","",3,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",3,[[]]],[11,"update","","",3,[[]]],[11,"update_start","","",3,[[]]],[11,"sub_mod","","(self - rhs) % n.",0,[[]]],[11,"add_mod","","`(self + rhs) % n`",0,[[]]],[11,"mul_mod","","`(self * rhs) % n`",0,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",0,[[]]],[11,"modulo","","`self % n`",0,[[]]],[11,"signed_modulo","","",0,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",0,[[]]],[11,"sub_mod","","(self - rhs) % n.",1,[[]]],[11,"add_mod","","`(self + rhs) % n`",1,[[]]],[11,"mul_mod","","`(self * rhs) % n`",1,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",1,[[]]],[11,"modulo","","`self % n`",1,[[]]],[11,"signed_modulo","","",1,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",1,[[]]],[11,"sub_mod","","(self - rhs) % n.",2,[[]]],[11,"add_mod","","`(self + rhs) % n`",2,[[]]],[11,"mul_mod","","`(self * rhs) % n`",2,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",2,[[]]],[11,"modulo","","`self % n`",2,[[]]],[11,"signed_modulo","","",2,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",2,[[]]],[11,"sub_mod","","(self - rhs) % n.",3,[[]]],[11,"add_mod","","`(self + rhs) % n`",3,[[]]],[11,"mul_mod","","`(self * rhs) % n`",3,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",3,[[]]],[11,"modulo","","`self % n`",3,[[]]],[11,"signed_modulo","","",3,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",3,[[]]],[11,"max_val","","Return largest value that can be represented.",0,[[]]],[11,"wrap_add","","",0,[[]]],[11,"wrap_sub","","",0,[[]]],[11,"wrap_mul","","",0,[[]]],[11,"wrap_div","","",0,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",0,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",0,[[]]],[11,"divide","","Division.",0,[[]]],[11,"inv","","Invert self modulo n.",0,[[]]],[11,"equal","","",0,[[]]],[11,"greater_than","","",0,[[]]],[11,"greater_than_or_qual","","",0,[[]]],[11,"less_than","","",0,[[]]],[11,"less_than_or_equal","","",0,[[]]],[11,"not_equal_bm","","",0,[[]]],[11,"equal_bm","","",0,[[]]],[11,"greater_than_bm","","",0,[[]]],[11,"greater_than_or_equal_bm","","",0,[[]]],[11,"less_than_bm","","",0,[[]]],[11,"less_than_or_equal_bm","","",0,[[]]],[11,"max_val","","Return largest value that can be represented.",1,[[]]],[11,"wrap_add","","",1,[[]]],[11,"wrap_sub","","",1,[[]]],[11,"wrap_mul","","",1,[[]]],[11,"wrap_div","","",1,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",1,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",1,[[]]],[11,"divide","","Division.",1,[[]]],[11,"inv","","Invert self modulo n.",1,[[]]],[11,"equal","","",1,[[]]],[11,"greater_than","","",1,[[]]],[11,"greater_than_or_qual","","",1,[[]]],[11,"less_than","","",1,[[]]],[11,"less_than_or_equal","","",1,[[]]],[11,"not_equal_bm","","",1,[[]]],[11,"equal_bm","","",1,[[]]],[11,"greater_than_bm","","",1,[[]]],[11,"greater_than_or_equal_bm","","",1,[[]]],[11,"less_than_bm","","",1,[[]]],[11,"less_than_or_equal_bm","","",1,[[]]],[11,"max_val","","Return largest value that can be represented.",2,[[]]],[11,"wrap_add","","",2,[[]]],[11,"wrap_sub","","",2,[[]]],[11,"wrap_mul","","",2,[[]]],[11,"wrap_div","","",2,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",2,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",2,[[]]],[11,"divide","","Division.",2,[[]]],[11,"inv","","Invert self modulo n.",2,[[]]],[11,"equal","","",2,[[]]],[11,"greater_than","","",2,[[]]],[11,"greater_than_or_qual","","",2,[[]]],[11,"less_than","","",2,[[]]],[11,"less_than_or_equal","","",2,[[]]],[11,"not_equal_bm","","",2,[[]]],[11,"equal_bm","","",2,[[]]],[11,"greater_than_bm","","",2,[[]]],[11,"greater_than_or_equal_bm","","",2,[[]]],[11,"less_than_bm","","",2,[[]]],[11,"less_than_or_equal_bm","","",2,[[]]],[11,"max_val","","Return largest value that can be represented.",3,[[]]],[11,"wrap_add","","",3,[[]]],[11,"wrap_sub","","",3,[[]]],[11,"wrap_mul","","",3,[[]]],[11,"wrap_div","","",3,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",3,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",3,[[]]],[11,"divide","","Division.",3,[[]]],[11,"inv","","Invert self modulo n.",3,[[]]],[11,"equal","","",3,[[]]],[11,"greater_than","","",3,[[]]],[11,"greater_than_or_qual","","",3,[[]]],[11,"less_than","","",3,[[]]],[11,"less_than_or_equal","","",3,[[]]],[11,"not_equal_bm","","",3,[[]]],[11,"equal_bm","","",3,[[]]],[11,"greater_than_bm","","",3,[[]]],[11,"greater_than_or_equal_bm","","",3,[[]]],[11,"less_than_bm","","",3,[[]]],[11,"less_than_or_equal_bm","","",3,[[]]]],"p":[[3,"State"],[3,"StateBytes"],[3,"IV"],[3,"Key"]]},\
"hacspec_lib":{"doc":"hacspec consists of three parts:","i":[[3,"DocSecretBytes","hacspec_lib","Fixed length byte array.",null,null],[12,"0","","",0,null],[3,"DocPublicBytes","","Fixed length byte array.",null,null],[12,"0","","",1,null],[3,"DocSecretArray","","Fixed length byte array.",null,null],[12,"0","","",2,null],[3,"DocPublicArray","","Fixed length byte array.",null,null],[12,"0","","",3,null],[3,"DocParametricArray","","Fixed length byte array.",null,null],[12,"0","","",4,null],[0,"prelude","","This module conveniently exports common subroutines…",null,null],[0,"abstract_int","hacspec_lib::prelude","",null,null],[0,"nat_mod","","",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`\'s composing element.",null,null],[13,"Minus","","",5,null],[13,"NoSign","","",5,null],[13,"Plus","","",5,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",6,[[],["option",4]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",7,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",7,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",7,[[]]],[0,"traits","","",null,null],[0,"bounds","hacspec_lib::prelude::traits","",null,null],[8,"Bounded","hacspec_lib::prelude::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,[[]]],[10,"max_value","","returns the largest finite number this type can represent",8,[[]]],[0,"cast","hacspec_lib::prelude::traits","",null,null],[8,"ToPrimitive","hacspec_lib::prelude::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",9,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",9,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",9,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",9,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",9,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",9,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",9,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",9,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",9,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",9,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",9,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",9,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",9,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",9,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",10,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",10,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",10,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",10,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",10,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",10,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",10,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",10,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",10,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",10,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",10,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",10,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",10,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",10,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",11,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",12,[[]]],[0,"float","hacspec_lib::prelude::traits","",null,null],[8,"FloatCore","hacspec_lib::prelude::traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",13,[[]]],[10,"neg_infinity","","Returns negative infinity.",13,[[]]],[10,"nan","","Returns NaN.",13,[[]]],[10,"neg_zero","","Returns `-0.0`.",13,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",13,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",13,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",13,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",13,[[]]],[11,"is_nan","","Returns `true` if the number is NaN.",13,[[]]],[11,"is_infinite","","Returns `true` if the number is infinite.",13,[[]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",13,[[]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",13,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",13,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a number.",13,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",13,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",13,[[]]],[11,"trunc","","Return the integer part of a number.",13,[[]]],[11,"fract","","Returns the fractional part of a number.",13,[[]]],[11,"abs","","Computes the absolute value of `self`. Returns…",13,[[]]],[11,"signum","","Returns a number that represents the sign of `self`.",13,[[]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",13,[[]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",13,[[]]],[11,"min","","Returns the minimum of the two numbers.",13,[[]]],[11,"max","","Returns the maximum of the two numbers.",13,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",13,[[]]],[11,"powi","","Raise a number to an integer power.",13,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",13,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",13,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",13,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",14,[[]]],[10,"infinity","","Returns the infinite value.",14,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",14,[[]]],[10,"neg_zero","","Returns `-0.0`.",14,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",14,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",14,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",14,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",14,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",14,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",14,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",14,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",14,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",14,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",14,[[]]],[10,"trunc","","Return the integer part of a number.",14,[[]]],[10,"fract","","Returns the fractional part of a number.",14,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",14,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",14,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",14,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",14,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",14,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,[[]]],[10,"powi","","Raise a number to an integer power.",14,[[]]],[10,"powf","","Raise a number to a floating point power.",14,[[]]],[10,"sqrt","","Take the square root of a number.",14,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,[[]]],[10,"exp2","","Returns `2^(self)`.",14,[[]]],[10,"ln","","Returns the natural logarithm of the number.",14,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",14,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",14,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",14,[[]]],[11,"to_degrees","","Converts radians to degrees.",14,[[]]],[11,"to_radians","","Converts degrees to radians.",14,[[]]],[10,"max","","Returns the maximum of the two numbers.",14,[[]]],[10,"min","","Returns the minimum of the two numbers.",14,[[]]],[10,"abs_sub","","The positive difference of two numbers.",14,[[]]],[10,"cbrt","","Take the cubic root of a number.",14,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",14,[[]]],[10,"sin","","Computes the sine of a number (in radians).",14,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",14,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",14,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",14,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",14,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",14,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",14,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",14,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",14,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",14,[[]]],[10,"sinh","","Hyperbolic sine function.",14,[[]]],[10,"cosh","","Hyperbolic cosine function.",14,[[]]],[10,"tanh","","Hyperbolic tangent function.",14,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",14,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",14,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",14,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",14,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,[[]]],[10,"LN_10","","Return `ln(10.0)`.",15,[[]]],[10,"LN_2","","Return `ln(2.0)`.",15,[[]]],[10,"LOG10_E","","Return `log10(e)`.",15,[[]]],[10,"LOG2_E","","Return `log2(e)`.",15,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",15,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,[[]]],[11,"TAU","","Return the full circle constant `τ`.",15,[[]]],[11,"LOG10_2","","Return `log10(2.0)`.",15,[[]]],[11,"LOG2_10","","Return `log2(10.0)`.",15,[[]]],[0,"identities","hacspec_lib::prelude::traits","",null,null],[8,"Zero","hacspec_lib::prelude::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",7,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",7,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",7,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",16,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",16,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",16,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[0,"int","hacspec_lib::prelude::traits","",null,null],[8,"PrimInt","hacspec_lib::prelude::traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",17,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",17,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",17,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",17,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",17,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",17,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",17,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",17,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",17,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",17,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",17,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",17,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",17,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",17,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",17,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",17,[[]]],[0,"ops","hacspec_lib::prelude::traits","",null,null],[0,"checked","hacspec_lib::prelude::traits::ops","",null,null],[8,"CheckedAdd","hacspec_lib::prelude::traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",18,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",6,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",19,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",20,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",21,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",22,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",23,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",24,[[],["option",4]]],[0,"inv","hacspec_lib::prelude::traits::ops","",null,null],[8,"Inv","hacspec_lib::prelude::traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",25,null],[10,"inv","","Returns the multiplicative inverse of `self`.",25,[[]]],[0,"mul_add","hacspec_lib::prelude::traits::ops","",null,null],[8,"MulAdd","hacspec_lib::prelude::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",26,null],[10,"mul_add","","Performs the fused multiply-add operation.",26,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",27,[[]]],[0,"saturating","hacspec_lib::prelude::traits::ops","",null,null],[8,"Saturating","hacspec_lib::prelude::traits::ops::saturating","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",28,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",28,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds…",null,null],[10,"saturating_add","","Saturating addition. Computes `self + other`, saturating…",29,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds…",null,null],[10,"saturating_sub","","Saturating subtraction. Computes `self - other`,…",30,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric…",null,null],[10,"saturating_mul","","Saturating multiplication. Computes `self * other`,…",31,[[]]],[0,"wrapping","hacspec_lib::prelude::traits::ops","",null,null],[8,"WrappingAdd","hacspec_lib::prelude::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",32,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",33,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",34,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",35,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",36,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",37,[[]]],[0,"pow","hacspec_lib::prelude::traits","",null,null],[8,"Pow","hacspec_lib::prelude::traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",38,null],[10,"pow","","Returns `self` to the power `rhs`.",38,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[0,"real","hacspec_lib::prelude::traits","",null,null],[8,"Real","hacspec_lib::prelude::traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can…",39,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",39,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",39,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",39,[[]]],[10,"floor","","Returns the largest integer less than or equal to a number.",39,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",39,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",39,[[]]],[10,"trunc","","Return the integer part of a number.",39,[[]]],[10,"fract","","Returns the fractional part of a number.",39,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",39,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",39,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",39,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",39,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",39,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",39,[[]]],[10,"powi","","Raise a number to an integer power.",39,[[]]],[10,"powf","","Raise a number to a real number power.",39,[[]]],[10,"sqrt","","Take the square root of a number.",39,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",39,[[]]],[10,"exp2","","Returns `2^(self)`.",39,[[]]],[10,"ln","","Returns the natural logarithm of the number.",39,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",39,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",39,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",39,[[]]],[10,"to_degrees","","Converts radians to degrees.",39,[[]]],[10,"to_radians","","Converts degrees to radians.",39,[[]]],[10,"max","","Returns the maximum of the two numbers.",39,[[]]],[10,"min","","Returns the minimum of the two numbers.",39,[[]]],[10,"abs_sub","","The positive difference of two numbers.",39,[[]]],[10,"cbrt","","Take the cubic root of a number.",39,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",39,[[]]],[10,"sin","","Computes the sine of a number (in radians).",39,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",39,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",39,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",39,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",39,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",39,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",39,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",39,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",39,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",39,[[]]],[10,"sinh","","Hyperbolic sine function.",39,[[]]],[10,"cosh","","Hyperbolic cosine function.",39,[[]]],[10,"tanh","","Hyperbolic tangent function.",39,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",39,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",39,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",39,[[]]],[0,"sign","hacspec_lib::prelude::traits","",null,null],[8,"Signed","hacspec_lib::prelude::traits::sign","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",40,[[]]],[10,"abs_sub","","The positive difference of two numbers.",40,[[]]],[10,"signum","","Returns the sign of the number.",40,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",40,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",40,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","hacspec_lib::prelude::traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",41,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",41,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",42,null],[13,"Invalid","","",42,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",43,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,[[]]],[10,"max_value","","returns the largest finite number this type can represent",8,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",14,[[]]],[10,"infinity","","Returns the infinite value.",14,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",14,[[]]],[10,"neg_zero","","Returns `-0.0`.",14,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",14,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",14,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",14,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",14,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",14,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",14,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",14,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",14,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",14,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",14,[[]]],[10,"trunc","","Return the integer part of a number.",14,[[]]],[10,"fract","","Returns the fractional part of a number.",14,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",14,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",14,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",14,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",14,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",14,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,[[]]],[10,"powi","","Raise a number to an integer power.",14,[[]]],[10,"powf","","Raise a number to a floating point power.",14,[[]]],[10,"sqrt","","Take the square root of a number.",14,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,[[]]],[10,"exp2","","Returns `2^(self)`.",14,[[]]],[10,"ln","","Returns the natural logarithm of the number.",14,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",14,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",14,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",14,[[]]],[11,"to_degrees","","Converts radians to degrees.",14,[[]]],[11,"to_radians","","Converts degrees to radians.",14,[[]]],[10,"max","","Returns the maximum of the two numbers.",14,[[]]],[10,"min","","Returns the minimum of the two numbers.",14,[[]]],[10,"abs_sub","","The positive difference of two numbers.",14,[[]]],[10,"cbrt","","Take the cubic root of a number.",14,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",14,[[]]],[10,"sin","","Computes the sine of a number (in radians).",14,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",14,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",14,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",14,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",14,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",14,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",14,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",14,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",14,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",14,[[]]],[10,"sinh","","Hyperbolic sine function.",14,[[]]],[10,"cosh","","Hyperbolic cosine function.",14,[[]]],[10,"tanh","","Hyperbolic tangent function.",14,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",14,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",14,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",14,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",14,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,[[]]],[10,"LN_10","","Return `ln(10.0)`.",15,[[]]],[10,"LN_2","","Return `ln(2.0)`.",15,[[]]],[10,"LOG10_E","","Return `log10(e)`.",15,[[]]],[10,"LOG2_E","","Return `log2(e)`.",15,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",15,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,[[]]],[11,"TAU","","Return the full circle constant `τ`.",15,[[]]],[11,"LOG10_2","","Return `log10(2.0)`.",15,[[]]],[11,"LOG2_10","","Return `log2(10.0)`.",15,[[]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",12,[[]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",10,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",10,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",10,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",10,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",10,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",10,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",10,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",10,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",10,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",10,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",10,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",10,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",10,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",10,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",11,[[],["option",4]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",9,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",9,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",9,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",9,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",9,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",9,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",9,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",9,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",9,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",9,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",9,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",9,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",9,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",9,[[],["option",4]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",16,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",16,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",16,[[]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",7,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",7,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",7,[[]]],[8,"PrimInt","","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",17,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",17,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",17,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",17,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",17,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",17,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",17,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",17,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",17,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",17,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",17,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",17,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",17,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",17,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",17,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",17,[[]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",18,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",20,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",19,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",22,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",21,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",23,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",24,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",6,[[],["option",4]]],[8,"Inv","","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",25,null],[10,"inv","","Returns the multiplicative inverse of `self`.",25,[[]]],[8,"MulAdd","","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",26,null],[10,"mul_add","","Performs the fused multiply-add operation.",26,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",27,[[]]],[8,"Saturating","","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",28,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",28,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds…",null,null],[10,"saturating_add","","Saturating addition. Computes `self + other`, saturating…",29,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric…",null,null],[10,"saturating_mul","","Saturating multiplication. Computes `self * other`,…",31,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds…",null,null],[10,"saturating_sub","","Saturating subtraction. Computes `self - other`,…",30,[[]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",32,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",34,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",35,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",36,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",37,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",33,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",38,null],[10,"pow","","Returns `self` to the power `rhs`.",38,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",40,[[]]],[10,"abs_sub","","The positive difference of two numbers.",40,[[]]],[10,"signum","","Returns the sign of the number.",40,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",40,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",40,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[3,"ParseIntError","hacspec_lib::prelude","An error which can be returned when parsing an integer.",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two…",null,null],[13,"Less","","An ordering where a compared value is less than another.",44,null],[13,"Equal","","An ordering where a compared value is equal to another.",44,null],[13,"Greater","","An ordering where a compared value is greater than another.",44,null],[14,"abstract_int","","",null,null],[14,"abstract_public","","",null,null],[14,"abstract_unsigned","","",null,null],[14,"abstract_signed","","",null,null],[14,"abstract_unsigned_public_integer","","",null,null],[14,"abstract_signed_public_integer","","",null,null],[14,"abstract_secret","","",null,null],[14,"abstract_unsigned_secret_integer","","",null,null],[14,"abstract_signed_secret_integer","","",null,null],[14,"define_abstract_integer_checked","","Defines a bounded natural integer with regular arithmetic…",null,null],[14,"modular_integer","","",null,null],[14,"abstract_secret_modular_integer","","",null,null],[14,"abstract_public_modular_integer","","",null,null],[14,"abstract_nat_mod","","",null,null],[14,"abstract_public_nat_mod","","",null,null],[14,"define_refined_modular_integer","","Defines a bounded natural integer with modular arithmetic…",null,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",16,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",16,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",16,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[8,"Add","","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",45,null],[10,"add","","Performs the `+` operation.",45,[[]]],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",46,null],[10,"div","","Performs the `/` operation.",46,[[]]],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",47,null],[10,"mul","","Performs the `*` operation.",47,[[]]],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",48,null],[10,"neg","","Performs the unary `-` operation.",48,[[]]],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",49,null],[10,"rem","","Performs the `%` operation.",49,[[]]],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",50,null],[10,"sub","","Performs the `-` operation.",50,[[]]],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",51,[[]]],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",52,[[]]],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",53,[[]]],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",54,[[]]],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",55,[[]]],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",56,null],[10,"bitand","","Performs the `&` operation.",56,[[]]],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",57,null],[10,"bitor","","Performs the `|` operation.",57,[[]]],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",58,null],[10,"bitxor","","Performs the `^` operation.",58,[[]]],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",59,null],[10,"not","","Performs the unary `!` operation.",59,[[]]],[8,"Shl","","The left shift operator `<<`. Note that because this trait…",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",60,null],[10,"shl","","Performs the `<<` operation.",60,[[]]],[8,"Shr","","The right shift operator `>>`. Note that because this…",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",61,null],[10,"shr","","Performs the `>>` operation.",61,[[]]],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",62,[[]]],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",63,[[]]],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",64,[[]]],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",65,[[]]],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",66,[[]]],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",67,null],[10,"deref","","Dereferences the value.",67,[[]]],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v =…",null,null],[10,"deref_mut","","Mutably dereferences the value.",68,[[]]],[8,"Drop","","Custom code within the destructor.",null,null],[10,"drop","","Executes the destructor for this type.",69,[[]]],[8,"Fn","","The version of the call operator that takes an immutable…",null,null],[10,"call","","Performs the call operation.",70,[[]]],[8,"FnMut","","The version of the call operator that takes a mutable…",null,null],[10,"call_mut","","Performs the call operation.",71,[[]]],[8,"FnOnce","","The version of the call operator that takes a by-value…",null,null],[16,"Output","","The returned type after the call operator is used.",72,null],[10,"call_once","","Performs the call operation.",72,[[]]],[8,"Index","","Used for indexing operations (`container[index]`) in…",null,null],[16,"Output","","The returned type after indexing.",73,null],[10,"index","","Performs the indexing (`container[index]`) operation.",73,[[]]],[8,"IndexMut","","Used for indexing operations (`container[index]`) in…",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`)…",74,[[]]],[3,"Range","","A (half-open) range bounded inclusively below and…",null,null],[12,"start","","The lower bound of the range (inclusive).",75,null],[12,"end","","The upper bound of the range (exclusive).",75,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",76,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",77,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",78,null],[13,"Excluded","","An exclusive bound.",78,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",78,null],[8,"RangeBounds","","`RangeBounds` is implemented by Rust\'s built-in range…",null,null],[10,"start_bound","","Start index bound.",79,[[],["bound",4]]],[10,"end_bound","","End index bound.",79,[[],["bound",4]]],[11,"contains","","Returns `true` if `item` is contained in the range.",79,[[]]],[3,"RangeInclusive","","A range bounded inclusively below and above (`start..=end`).",null,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",80,null],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",81,null],[16,"Error","","The type of this value when viewed as failed.",81,null],[10,"into_result","","Applies the \\\"?\\\" operator. A return of `Ok(t)` means that…",81,[[],["result",4]]],[10,"from_error","","Wrap an error value to construct the composite result. For…",81,[[]]],[10,"from_ok","","Wrap an OK value to construct the composite result. For…",81,[[]]],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",82,null],[16,"Return","","The type of value this generator returns.",82,null],[10,"resume","","Resumes the execution of this generator.",82,[[["pin",3]],["generatorstate",4]]],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",83,null],[13,"Complete","","The generator completed with a return value.",83,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper…",null,null],[8,"DispatchFromDyn","","This is used for object safety, to check that a method\'s…",null,null],[4,"ControlFlow","","Used to make try_fold closures more like normal loops",null,null],[13,"Continue","","Continue in the loop, using the given value for the next…",84,null],[13,"Break","","Exit the loop, yielding the given value",84,null],[3,"U8","","",null,null],[12,"0","","",85,null],[3,"U16","","",null,null],[12,"0","","",86,null],[3,"U32","","",null,null],[12,"0","","",87,null],[3,"U64","","",null,null],[12,"0","","",88,null],[3,"U128","","",null,null],[12,"0","","",89,null],[3,"I8","","",null,null],[12,"0","","",90,null],[3,"I16","","",null,null],[12,"0","","",91,null],[3,"I32","","",null,null],[12,"0","","",92,null],[3,"I64","","",null,null],[12,"0","","",93,null],[3,"I128","","",null,null],[12,"0","","",94,null],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",40,[[]]],[10,"abs_sub","","The positive difference of two numbers.",40,[[]]],[10,"signum","","Returns the sign of the number.",40,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",40,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",40,[[]]],[3,"BigUint","","A big unsigned integer type.",null,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",6,[[],["option",4]]],[8,"Num","","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",41,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",41,[[],["result",4]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",7,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",7,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",7,[[]]],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[8,"Add","","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",45,null],[10,"add","","Performs the `+` operation.",45,[[]]],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",46,null],[10,"div","","Performs the `/` operation.",46,[[]]],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",47,null],[10,"mul","","Performs the `*` operation.",47,[[]]],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",48,null],[10,"neg","","Performs the unary `-` operation.",48,[[]]],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",49,null],[10,"rem","","Performs the `%` operation.",49,[[]]],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",50,null],[10,"sub","","Performs the `-` operation.",50,[[]]],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",51,[[]]],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",52,[[]]],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",53,[[]]],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",54,[[]]],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",55,[[]]],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",56,null],[10,"bitand","","Performs the `&` operation.",56,[[]]],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",57,null],[10,"bitor","","Performs the `|` operation.",57,[[]]],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",58,null],[10,"bitxor","","Performs the `^` operation.",58,[[]]],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",59,null],[10,"not","","Performs the unary `!` operation.",59,[[]]],[8,"Shl","","The left shift operator `<<`. Note that because this trait…",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",60,null],[10,"shl","","Performs the `<<` operation.",60,[[]]],[8,"Shr","","The right shift operator `>>`. Note that because this…",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",61,null],[10,"shr","","Performs the `>>` operation.",61,[[]]],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",62,[[]]],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",63,[[]]],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",64,[[]]],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",65,[[]]],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",66,[[]]],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",67,null],[10,"deref","","Dereferences the value.",67,[[]]],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v =…",null,null],[10,"deref_mut","","Mutably dereferences the value.",68,[[]]],[8,"Drop","","Custom code within the destructor.",null,null],[10,"drop","","Executes the destructor for this type.",69,[[]]],[8,"Fn","","The version of the call operator that takes an immutable…",null,null],[10,"call","","Performs the call operation.",70,[[]]],[8,"FnMut","","The version of the call operator that takes a mutable…",null,null],[10,"call_mut","","Performs the call operation.",71,[[]]],[8,"FnOnce","","The version of the call operator that takes a by-value…",null,null],[16,"Output","","The returned type after the call operator is used.",72,null],[10,"call_once","","Performs the call operation.",72,[[]]],[8,"Index","","Used for indexing operations (`container[index]`) in…",null,null],[16,"Output","","The returned type after indexing.",73,null],[10,"index","","Performs the indexing (`container[index]`) operation.",73,[[]]],[8,"IndexMut","","Used for indexing operations (`container[index]`) in…",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`)…",74,[[]]],[3,"Range","","A (half-open) range bounded inclusively below and…",null,null],[12,"start","","The lower bound of the range (inclusive).",75,null],[12,"end","","The upper bound of the range (exclusive).",75,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",76,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",77,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",78,null],[13,"Excluded","","An exclusive bound.",78,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",78,null],[8,"RangeBounds","","`RangeBounds` is implemented by Rust\'s built-in range…",null,null],[10,"start_bound","","Start index bound.",79,[[],["bound",4]]],[10,"end_bound","","End index bound.",79,[[],["bound",4]]],[11,"contains","","Returns `true` if `item` is contained in the range.",79,[[]]],[3,"RangeInclusive","","A range bounded inclusively below and above (`start..=end`).",null,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",80,null],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",81,null],[16,"Error","","The type of this value when viewed as failed.",81,null],[10,"into_result","","Applies the \\\"?\\\" operator. A return of `Ok(t)` means that…",81,[[],["result",4]]],[10,"from_error","","Wrap an error value to construct the composite result. For…",81,[[]]],[10,"from_ok","","Wrap an OK value to construct the composite result. For…",81,[[]]],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",82,null],[16,"Return","","The type of value this generator returns.",82,null],[10,"resume","","Resumes the execution of this generator.",82,[[["pin",3]],["generatorstate",4]]],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",83,null],[13,"Complete","","The generator completed with a return value.",83,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper…",null,null],[8,"DispatchFromDyn","","This is used for object safety, to check that a method\'s…",null,null],[4,"ControlFlow","","Used to make try_fold closures more like normal loops",null,null],[13,"Continue","","Continue in the loop, using the given value for the next…",84,null],[13,"Break","","Exit the loop, yielding the given value",84,null],[8,"FromStr","","Parse a value from a string",null,null],[16,"Err","","The associated error which can be returned from parsing.",95,null],[10,"from_str","","Parses a string `s` to return a value of this type.",95,[[],["result",4]]],[5,"min","","Compares and returns the minimum of two values.",null,[[]]],[8,"PartialEq","","Trait for equality comparisons which are partial…",null,null],[10,"eq","","This method tests for `self` and `other` values to be…",96,[[]]],[11,"ne","","This method tests for `!=`.",96,[[]]],[14,"PartialEq","","Derive macro generating an impl of the trait `PartialEq`.",null,null],[0,"fmt","","Utilities for formatting and printing `String`s.",null,null],[5,"format","hacspec_lib::prelude::fmt","The `format` function takes an [`Arguments`] struct and…",null,[[["arguments",3]],["string",3]]],[4,"Alignment","","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",97,null],[13,"Right","","Indication that contents should be right-aligned.",97,null],[13,"Center","","Indication that contents should be center-aligned.",97,null],[3,"Error","","The error type which is returned from formatting a message…",null,null],[5,"write","","The `write` function takes an output stream, and an…",null,[[["arguments",3],["write",8]],[["error",3],["result",4]]]],[3,"Arguments","","This structure represents a safely precompiled version of…",null,null],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",98,[[["formatter",3]],[["error",3],["result",4]]]],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",99,[[["formatter",3]],[["error",3],["result",4]]]],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",100,[[["formatter",3]],[["error",3],["result",4]]]],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",101,[[["formatter",3]],[["error",3],["result",4]]]],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Formatter","","Configuration for formatting.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a…",null,null],[10,"write_str","","Writes a string slice into this writer, returning whether…",102,[[],[["error",3],["result",4]]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the…",102,[[],[["error",3],["result",4]]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors…",102,[[["arguments",3]],[["error",3],["result",4]]]],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",103,[[["formatter",3]],[["error",3],["result",4]]]],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",104,[[["formatter",3]],[["error",3],["result",4]]]],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",105,[[["formatter",3]],[["error",3],["result",4]]]],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",106,[[["formatter",3]],[["error",3],["result",4]]]],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",107,[[["formatter",3]],[["error",3],["result",4]]]],[8,"Debug","hacspec_lib::prelude","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",100,[[["formatter",3]],[["error",3],["result",4]]]],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[3,"SecretSeq","","Variable length byte arrays.",null,null],[3,"PublicSeq","","Variable length byte arrays.",null,null],[3,"Seq","","Variable length byte arrays.",null,null],[3,"U16Word","","Fixed length byte array.",null,null],[12,"0","","",108,null],[3,"U32Word","","Fixed length byte array.",null,null],[12,"0","","",109,null],[3,"U64Word","","Fixed length byte array.",null,null],[12,"0","","",110,null],[3,"U128Word","","Fixed length byte array.",null,null],[12,"0","","",111,null],[3,"u16Word","","Fixed length byte array.",null,null],[12,"0","","",112,null],[3,"u32Word","","Fixed length byte array.",null,null],[12,"0","","",113,null],[3,"u64Word","","Fixed length byte array.",null,null],[12,"0","","",114,null],[3,"u128Word","","Fixed length byte array.",null,null],[12,"0","","",115,null],[5,"cswap_bit","","Conditional, constant-time swapping. Returns `(x, y)` if…",null,[[["copy",8],["integer",8]]]],[5,"cswap","","Conditional, constant-time swapping. Returns `(x, y)` if…",null,[[["copy",8],["integer",8]]]],[5,"cset_bit","","Set bit at position `i` in `x` to `b` if `c` is all 1 and…",null,[[["copy",8],["integer",8]],[["copy",8],["integer",8]]]],[5,"cadd","","Add two numerics if condition `c` is set (all bits 1).…",null,[[["copy",8],["integer",8]],[["copy",8],["integer",8]]]],[5,"csub","","Subtract two numerics if condition `c` is set (all bits…",null,[[["copy",8],["integer",8]],[["copy",8],["integer",8]]]],[5,"cmul","","Multiply two numerics if condition `c` is set (all bits…",null,[[["copy",8],["integer",8]],[["copy",8],["integer",8]]]],[5,"ct_div","","Constant time division for Numerics. Note that this…",null,[[["copy",8],["integer",8]]]],[5,"sub_poly","","polynomial subtraction, calculates a - b mod modulo",null,[[["numeric",8],["copy",8],["seq",3]],[["numeric",8],["copy",8],["seq",3]]]],[5,"add_poly","","Polynomial Addition, calculates a + b mod modulo",null,[[["numeric",8],["copy",8],["seq",3]],[["numeric",8],["copy",8],["seq",3]]]],[5,"mul_poly","","Simple polynomial multiplication for two fixed size…",null,[[["numeric",8],["copy",8],["seq",3]],[["numeric",8],["copy",8],["seq",3]]]],[5,"div_poly","","Euclidean polynomial division, calculates `a/b` in `R_n`.…",null,[[["copy",8],["integer",8],["seq",3]],["result",4]]],[5,"div_scalar","","Scalar division in `R_p`. Returns `a / scalar mod p`.",null,[[["copy",8],["seq",3],["integer",8]],[["copy",8],["integer",8],["seq",3]]]],[5,"degree_poly","","Returns degree of polynomial, e.g. for  3x² + 2x + 1 -> 2",null,[[["seq",3]]]],[5,"extended_euclid","","Euclidean algorithm to compute the inverse of x in yℤ[x]",null,[[["copy",8],["integer",8],["seq",3]],[["result",4],["seq",3]]]],[5,"weight","","Returns number of coefficient != 0, e.g. for -3x⁵ + 3x² +…",null,[[["seq",3]]]],[5,"make_positive","","makes coefficients positiv, e.g. -3 mod 4 = 1",null,[[["numeric",8],["copy",8],["seq",3]],[["numeric",8],["copy",8],["seq",3]]]],[5,"poly_to_ring","","Makes poly to an element of R_modulo \\\\ irr",null,[[["copy",8],["integer",8],["seq",3]],[["result",4],["seq",3]]]],[5,"mul_poly_irr","","Polynomial multiplication of two size fixed polynomials in…",null,[[["copy",8],["integer",8],["seq",3]],[["result",4],["seq",3]]]],[5,"U16_to_le_bytes","","",null,[[["u16",3]],["u16word",3]]],[5,"U16_to_be_bytes","","",null,[[["u16",3]],["u16word",3]]],[5,"U16_from_be_bytes","","",null,[[["u16word",3]],["u16",3]]],[5,"U16_from_le_bytes","","",null,[[["u16word",3]],["u16",3]]],[5,"U32_to_le_bytes","","",null,[[["u32",3]],["u32word",3]]],[5,"U32_to_be_bytes","","",null,[[["u32",3]],["u32word",3]]],[5,"U32_from_be_bytes","","",null,[[["u32word",3]],["u32",3]]],[5,"U32_from_le_bytes","","",null,[[["u32word",3]],["u32",3]]],[5,"U64_to_le_bytes","","",null,[[["u64",3]],["u64word",3]]],[5,"U64_to_be_bytes","","",null,[[["u64",3]],["u64word",3]]],[5,"U64_from_be_bytes","","",null,[[["u64word",3]],["u64",3]]],[5,"U64_from_le_bytes","","",null,[[["u64word",3]],["u64",3]]],[5,"U128_to_le_bytes","","",null,[[["u128",3]],["u128word",3]]],[5,"U128_to_be_bytes","","",null,[[["u128",3]],["u128word",3]]],[5,"U128_from_be_bytes","","",null,[[["u128word",3]],["u128",3]]],[5,"U128_from_le_bytes","","",null,[[["u128word",3]],["u128",3]]],[5,"u16_to_le_bytes","","",null,[[],["u16word",3]]],[5,"u16_to_be_bytes","","",null,[[],["u16word",3]]],[5,"u16_from_be_bytes","","",null,[[["u16word",3]]]],[5,"u16_from_le_bytes","","",null,[[["u16word",3]]]],[5,"u32_to_le_bytes","","",null,[[],["u32word",3]]],[5,"u32_to_be_bytes","","",null,[[],["u32word",3]]],[5,"u32_from_be_bytes","","",null,[[["u32word",3]]]],[5,"u32_from_le_bytes","","",null,[[["u32word",3]]]],[5,"u64_to_le_bytes","","",null,[[],["u64word",3]]],[5,"u64_to_be_bytes","","",null,[[],["u64word",3]]],[5,"u64_from_be_bytes","","",null,[[["u64word",3]]]],[5,"u64_from_le_bytes","","",null,[[["u64word",3]]]],[5,"u128_to_le_bytes","","",null,[[],["u128word",3]]],[5,"u128_to_be_bytes","","",null,[[],["u128word",3]]],[5,"u128_from_be_bytes","","",null,[[["u128word",3]]]],[5,"u128_from_le_bytes","","",null,[[["u128word",3]]]],[5,"hex_string_to_bytes","","",null,[[],["vec",3]]],[5,"to_array","","",null,[[]]],[5,"vec_poly_mul","","",null,[[["copy",8],["numeric",8],["seqtrait",8]],[["copy",8],["seqtrait",8],["numeric",8]]]],[5,"vec_poly_add","","",null,[[["copy",8],["numeric",8],["seqtrait",8]],[["copy",8],["seqtrait",8],["numeric",8]]]],[5,"vec_poly_sub","","",null,[[["copy",8],["numeric",8],["seqtrait",8]],[["copy",8],["seqtrait",8],["numeric",8]]]],[0,"ct_util","","",null,null],[5,"cswap_bit","hacspec_lib::prelude::ct_util","Conditional, constant-time swapping. Returns `(x, y)` if…",null,[[["copy",8],["integer",8]]]],[5,"cswap","","Conditional, constant-time swapping. Returns `(x, y)` if…",null,[[["copy",8],["integer",8]]]],[5,"cset_bit","","Set bit at position `i` in `x` to `b` if `c` is all 1 and…",null,[[["copy",8],["integer",8]],[["copy",8],["integer",8]]]],[5,"cadd","","Add two numerics if condition `c` is set (all bits 1).…",null,[[["copy",8],["integer",8]],[["copy",8],["integer",8]]]],[5,"csub","","Subtract two numerics if condition `c` is set (all bits…",null,[[["copy",8],["integer",8]],[["copy",8],["integer",8]]]],[5,"cmul","","Multiply two numerics if condition `c` is set (all bits…",null,[[["copy",8],["integer",8]],[["copy",8],["integer",8]]]],[5,"ct_div","","Constant time division for Numerics. Note that this…",null,[[["copy",8],["integer",8]]]],[0,"poly","hacspec_lib::prelude","",null,null],[6,"ByteSeq","","",null,null],[6,"PublicByteSeq","","",null,null],[8,"SeqTrait","","Common trait for all byte arrays and sequences.",null,null],[10,"len","","",116,[[]]],[10,"iter","","",116,[[],["iter",3]]],[10,"create","","",116,[[]]],[10,"update_slice","","Update this sequence with `l` elements of `v`, starting at…",116,[[]]],[11,"update","","Update this sequence with `v` starting at `start`.",116,[[]]],[11,"update_start","","",116,[[]]],[8,"Integer","","This trait extends the `Numeric` trait and is implemented…",null,null],[18,"NUM_BITS","","",117,null],[10,"ZERO","","",117,[[]]],[10,"ONE","","",117,[[]]],[10,"TWO","","",117,[[]]],[10,"from_literal","","Get an integer with value `val`.",117,[[]]],[10,"from_hex_string","","Read a hex string (starting with 0x) into an `Integer`.",117,[[["string",3]]]],[10,"get_bit","","",117,[[]]],[10,"set_bit","","",117,[[]]],[10,"set","","",117,[[]]],[10,"rotate_left","","",117,[[]]],[10,"rotate_right","","",117,[[]]],[8,"SecretInteger","","",null,null],[16,"PublicVersion","","",118,null],[10,"classify","","",118,[[]]],[8,"SecretIntegerCopy","","",null,null],[16,"PublicVersionCopy","","",119,null],[10,"classify","","",119,[[]]],[8,"PublicInteger","","",null,null],[16,"SecretVersion","","",120,null],[8,"PublicIntegerCopy","","",null,null],[16,"SecretVersionCopy","","",121,null],[8,"UnsignedInteger","","",null,null],[8,"UnsignedIntegerCopy","","",null,null],[8,"SignedInteger","","",null,null],[8,"SignedIntegerCopy","","",null,null],[8,"UnsignedSecretInteger","","",null,null],[10,"to_le_bytes","","",122,[[],[["u8",3],["seq",3]]]],[10,"to_be_bytes","","",122,[[],[["u8",3],["seq",3]]]],[10,"from_le_bytes","","",122,[[["seq",3]]]],[10,"from_be_bytes","","",122,[[["seq",3]]]],[11,"get_byte","","Get byte `i` of this integer.",122,[[]]],[8,"UnsignedSecretIntegerCopy","","",null,null],[8,"UnsignedPublicInteger","","",null,null],[10,"to_le_bytes","","",123,[[],["seq",3]]],[10,"to_be_bytes","","",123,[[],["seq",3]]],[10,"from_le_bytes","","",123,[[["seq",3]]]],[10,"from_be_bytes","","",123,[[["seq",3]]]],[8,"UnsignedPublicIntegerCopy","","",null,null],[8,"ModNumeric","","",null,null],[10,"sub_mod","","(self - rhs) % n.",124,[[]]],[10,"add_mod","","`(self + rhs) % n`",124,[[]]],[10,"mul_mod","","`(self * rhs) % n`",124,[[]]],[10,"pow_mod","","`(self ^ exp) % n`",124,[[]]],[10,"modulo","","`self % n`",124,[[]]],[10,"signed_modulo","","`self % n` that always returns a positive integer",124,[[]]],[10,"absolute","","`|self|`",124,[[]]],[8,"NumericCopy","","",null,null],[8,"Numeric","","The `Numeric` trait has to be implemented by all numeric…",null,null],[10,"max_val","","Return largest value that can be represented.",125,[[]]],[10,"wrap_add","","",125,[[]]],[10,"wrap_sub","","",125,[[]]],[10,"wrap_mul","","",125,[[]]],[10,"wrap_div","","",125,[[]]],[10,"exp","","`self ^ exp` where `exp` is a `u32`.",125,[[]]],[10,"pow_self","","`self ^ exp` where `exp` is a `Self`.",125,[[]]],[10,"divide","","Division.",125,[[]]],[10,"inv","","Invert self modulo n.",125,[[]]],[10,"equal","","",125,[[]]],[10,"greater_than","","",125,[[]]],[10,"greater_than_or_qual","","",125,[[]]],[10,"less_than","","",125,[[]]],[10,"less_than_or_equal","","",125,[[]]],[10,"not_equal_bm","","",125,[[]]],[10,"equal_bm","","",125,[[]]],[10,"greater_than_bm","","",125,[[]]],[10,"greater_than_or_equal_bm","","",125,[[]]],[10,"less_than_bm","","",125,[[]]],[10,"less_than_or_equal_bm","","",125,[[]]],[11,"new","","",108,[[]]],[11,"length","","",108,[[]]],[11,"from_array","","",108,[[]]],[11,"from_native_slice","","",108,[[]]],[11,"capacity","","",108,[[]]],[11,"from_slice","","",108,[[]]],[11,"from_slice_range","","",108,[[["range",3]]]],[11,"slice","","",108,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",108,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",108,[[]]],[11,"get_chunk_len","","",108,[[]]],[11,"get_chunk","","",108,[[]]],[11,"set_chunk","","",108,[[]]],[11,"from_vec","","",108,[[["vec",3],["u8",3]],["u16word",3]]],[11,"from_seq","","",108,[[],["u16word",3]]],[11,"from_hex","","Read hex string to Bytes.",108,[[],["u16word",3]]],[11,"declassify_eq","","",108,[[]]],[11,"to_be_bytes","","",108,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",108,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",108,[[],["u16word",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",108,[[],["u16word",3]]],[11,"to_be_U32s","","",108,[[],[["seq",3],["u32",3]]]],[11,"to_le_U32s","","",108,[[],[["seq",3],["u32",3]]]],[11,"to_be_U64s","","",108,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",108,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",108,[[],[["seq",3],["u128",3]]]],[11,"to_U128s_le","","",108,[[],[["seq",3],["u128",3]]]],[11,"to_hex","","",108,[[],["string",3]]],[11,"new","","",109,[[]]],[11,"length","","",109,[[]]],[11,"from_array","","",109,[[]]],[11,"from_native_slice","","",109,[[]]],[11,"capacity","","",109,[[]]],[11,"from_slice","","",109,[[]]],[11,"from_slice_range","","",109,[[["range",3]]]],[11,"slice","","",109,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",109,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",109,[[]]],[11,"get_chunk_len","","",109,[[]]],[11,"get_chunk","","",109,[[]]],[11,"set_chunk","","",109,[[]]],[11,"from_vec","","",109,[[["vec",3],["u8",3]],["u32word",3]]],[11,"from_seq","","",109,[[],["u32word",3]]],[11,"from_hex","","Read hex string to Bytes.",109,[[],["u32word",3]]],[11,"declassify_eq","","",109,[[]]],[11,"to_be_bytes","","",109,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",109,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",109,[[],["u32word",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",109,[[],["u32word",3]]],[11,"to_be_U32s","","",109,[[],[["seq",3],["u32",3]]]],[11,"to_le_U32s","","",109,[[],[["seq",3],["u32",3]]]],[11,"to_be_U64s","","",109,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",109,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",109,[[],[["seq",3],["u128",3]]]],[11,"to_U128s_le","","",109,[[],[["seq",3],["u128",3]]]],[11,"to_hex","","",109,[[],["string",3]]],[11,"new","","",110,[[]]],[11,"length","","",110,[[]]],[11,"from_array","","",110,[[]]],[11,"from_native_slice","","",110,[[]]],[11,"capacity","","",110,[[]]],[11,"from_slice","","",110,[[]]],[11,"from_slice_range","","",110,[[["range",3]]]],[11,"slice","","",110,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",110,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",110,[[]]],[11,"get_chunk_len","","",110,[[]]],[11,"get_chunk","","",110,[[]]],[11,"set_chunk","","",110,[[]]],[11,"from_vec","","",110,[[["vec",3],["u8",3]],["u64word",3]]],[11,"from_seq","","",110,[[],["u64word",3]]],[11,"from_hex","","Read hex string to Bytes.",110,[[],["u64word",3]]],[11,"declassify_eq","","",110,[[]]],[11,"to_be_bytes","","",110,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",110,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",110,[[],["u64word",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",110,[[],["u64word",3]]],[11,"to_be_U32s","","",110,[[],[["seq",3],["u32",3]]]],[11,"to_le_U32s","","",110,[[],[["seq",3],["u32",3]]]],[11,"to_be_U64s","","",110,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",110,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",110,[[],[["seq",3],["u128",3]]]],[11,"to_U128s_le","","",110,[[],[["seq",3],["u128",3]]]],[11,"to_hex","","",110,[[],["string",3]]],[11,"new","","",111,[[]]],[11,"length","","",111,[[]]],[11,"from_array","","",111,[[]]],[11,"from_native_slice","","",111,[[]]],[11,"capacity","","",111,[[]]],[11,"from_slice","","",111,[[]]],[11,"from_slice_range","","",111,[[["range",3]]]],[11,"slice","","",111,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",111,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",111,[[]]],[11,"get_chunk_len","","",111,[[]]],[11,"get_chunk","","",111,[[]]],[11,"set_chunk","","",111,[[]]],[11,"from_vec","","",111,[[["vec",3],["u8",3]],["u128word",3]]],[11,"from_seq","","",111,[[],["u128word",3]]],[11,"from_hex","","Read hex string to Bytes.",111,[[],["u128word",3]]],[11,"declassify_eq","","",111,[[]]],[11,"to_be_bytes","","",111,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",111,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",111,[[],["u128word",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",111,[[],["u128word",3]]],[11,"to_be_U32s","","",111,[[],[["seq",3],["u32",3]]]],[11,"to_le_U32s","","",111,[[],[["seq",3],["u32",3]]]],[11,"to_be_U64s","","",111,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",111,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",111,[[],[["seq",3],["u128",3]]]],[11,"to_U128s_le","","",111,[[],[["seq",3],["u128",3]]]],[11,"to_hex","","",111,[[],["string",3]]],[11,"new","","",112,[[]]],[11,"length","","",112,[[]]],[11,"from_array","","",112,[[]]],[11,"from_native_slice","","",112,[[]]],[11,"capacity","","",112,[[]]],[11,"from_slice","","",112,[[]]],[11,"from_slice_range","","",112,[[["range",3]]]],[11,"slice","","",112,[[],["seq",3]]],[11,"slice_range","","",112,[[["range",3]],["seq",3]]],[11,"num_chunks","","",112,[[]]],[11,"get_chunk_len","","",112,[[]]],[11,"get_chunk","","",112,[[]]],[11,"set_chunk","","",112,[[]]],[11,"from_vec","","",112,[[["vec",3]],["u16word",3]]],[11,"from_seq","","",112,[[],["u16word",3]]],[11,"from_hex","","Read hex string to Bytes.",112,[[],["u16word",3]]],[11,"to_be_u32s","","",112,[[],["seq",3]]],[11,"to_le_u32s","","",112,[[],["seq",3]]],[11,"to_be_u64s","","",112,[[],["seq",3]]],[11,"to_le_u64s","","",112,[[],["seq",3]]],[11,"to_u128s_be","","",112,[[],["seq",3]]],[11,"to_u128s_le","","",112,[[],["seq",3]]],[11,"to_hex","","",112,[[],["string",3]]],[11,"new","","",113,[[]]],[11,"length","","",113,[[]]],[11,"from_array","","",113,[[]]],[11,"from_native_slice","","",113,[[]]],[11,"capacity","","",113,[[]]],[11,"from_slice","","",113,[[]]],[11,"from_slice_range","","",113,[[["range",3]]]],[11,"slice","","",113,[[],["seq",3]]],[11,"slice_range","","",113,[[["range",3]],["seq",3]]],[11,"num_chunks","","",113,[[]]],[11,"get_chunk_len","","",113,[[]]],[11,"get_chunk","","",113,[[]]],[11,"set_chunk","","",113,[[]]],[11,"from_vec","","",113,[[["vec",3]],["u32word",3]]],[11,"from_seq","","",113,[[],["u32word",3]]],[11,"from_hex","","Read hex string to Bytes.",113,[[],["u32word",3]]],[11,"to_be_u32s","","",113,[[],["seq",3]]],[11,"to_le_u32s","","",113,[[],["seq",3]]],[11,"to_be_u64s","","",113,[[],["seq",3]]],[11,"to_le_u64s","","",113,[[],["seq",3]]],[11,"to_u128s_be","","",113,[[],["seq",3]]],[11,"to_u128s_le","","",113,[[],["seq",3]]],[11,"to_hex","","",113,[[],["string",3]]],[11,"new","","",114,[[]]],[11,"length","","",114,[[]]],[11,"from_array","","",114,[[]]],[11,"from_native_slice","","",114,[[]]],[11,"capacity","","",114,[[]]],[11,"from_slice","","",114,[[]]],[11,"from_slice_range","","",114,[[["range",3]]]],[11,"slice","","",114,[[],["seq",3]]],[11,"slice_range","","",114,[[["range",3]],["seq",3]]],[11,"num_chunks","","",114,[[]]],[11,"get_chunk_len","","",114,[[]]],[11,"get_chunk","","",114,[[]]],[11,"set_chunk","","",114,[[]]],[11,"from_vec","","",114,[[["vec",3]],["u64word",3]]],[11,"from_seq","","",114,[[],["u64word",3]]],[11,"from_hex","","Read hex string to Bytes.",114,[[],["u64word",3]]],[11,"to_be_u32s","","",114,[[],["seq",3]]],[11,"to_le_u32s","","",114,[[],["seq",3]]],[11,"to_be_u64s","","",114,[[],["seq",3]]],[11,"to_le_u64s","","",114,[[],["seq",3]]],[11,"to_u128s_be","","",114,[[],["seq",3]]],[11,"to_u128s_le","","",114,[[],["seq",3]]],[11,"to_hex","","",114,[[],["string",3]]],[11,"new","","",115,[[]]],[11,"length","","",115,[[]]],[11,"from_array","","",115,[[]]],[11,"from_native_slice","","",115,[[]]],[11,"capacity","","",115,[[]]],[11,"from_slice","","",115,[[]]],[11,"from_slice_range","","",115,[[["range",3]]]],[11,"slice","","",115,[[],["seq",3]]],[11,"slice_range","","",115,[[["range",3]],["seq",3]]],[11,"num_chunks","","",115,[[]]],[11,"get_chunk_len","","",115,[[]]],[11,"get_chunk","","",115,[[]]],[11,"set_chunk","","",115,[[]]],[11,"from_vec","","",115,[[["vec",3]],["u128word",3]]],[11,"from_seq","","",115,[[],["u128word",3]]],[11,"from_hex","","Read hex string to Bytes.",115,[[],["u128word",3]]],[11,"to_be_u32s","","",115,[[],["seq",3]]],[11,"to_le_u32s","","",115,[[],["seq",3]]],[11,"to_be_u64s","","",115,[[],["seq",3]]],[11,"to_le_u64s","","",115,[[],["seq",3]]],[11,"to_u128s_be","","",115,[[],["seq",3]]],[11,"to_u128s_le","","",115,[[],["seq",3]]],[11,"to_hex","","",115,[[],["string",3]]],[11,"new","","",126,[[]]],[11,"len","","Get the size of this sequence.",126,[[]]],[11,"slice","","",126,[[]]],[11,"slice_range","","",126,[[["range",3]]]],[11,"from_slice","","",126,[[]]],[11,"from_slice_range","","",126,[[["range",3]]]],[11,"num_chunks","","",126,[[]]],[11,"get_chunk","","",126,[[]]],[11,"set_chunk","","",126,[[]]],[11,"from_vec","","",126,[[["vec",3]],["secretseq",3]]],[11,"from_native_slice","","",126,[[],["secretseq",3]]],[11,"from_seq","","",126,[[],["secretseq",3]]],[11,"new","","",127,[[]]],[11,"len","","Get the size of this sequence.",127,[[]]],[11,"slice","","",127,[[]]],[11,"slice_range","","",127,[[["range",3]]]],[11,"from_slice","","",127,[[]]],[11,"from_slice_range","","",127,[[["range",3]]]],[11,"num_chunks","","",127,[[]]],[11,"get_chunk","","",127,[[]]],[11,"set_chunk","","",127,[[]]],[11,"from_vec","","",127,[[["vec",3]],["publicseq",3]]],[11,"from_native_slice","","",127,[[],["publicseq",3]]],[11,"from_seq","","",127,[[],["publicseq",3]]],[11,"new","","",128,[[]]],[11,"len","","Get the size of this sequence.",128,[[]]],[11,"slice","","",128,[[]]],[11,"slice_range","","",128,[[["range",3]]]],[11,"from_slice","","",128,[[]]],[11,"from_slice_range","","",128,[[["range",3]]]],[11,"num_chunks","","",128,[[]]],[11,"get_chunk","","",128,[[]]],[11,"set_chunk","","",128,[[]]],[11,"from_vec","","",128,[[["vec",3]],["seq",3]]],[11,"from_native_slice","","",128,[[],["seq",3]]],[11,"from_seq","","",128,[[],["seq",3]]],[11,"from_hex","","",128,[[],[["u8",3],["seq",3]]]],[11,"from_string","","",128,[[["string",3]],[["u8",3],["seq",3]]]],[11,"from_hex","","",127,[[],["publicseq",3]]],[11,"from_string","","",127,[[["string",3]],["publicseq",3]]],[11,"to_hex","","",128,[[],["string",3]]],[11,"from_public_slice","","",128,[[],[["u8",3],["seq",3]]]],[11,"to_hex","","",127,[[],["string",3]]],[11,"update","","Update this sequence with `v` starting at `start`.",116,[[]]],[11,"update_start","","",116,[[]]],[18,"NUM_BITS","","",117,null],[11,"get_byte","","Get byte `i` of this integer.",122,[[]]],[11,"new","hacspec_lib","",0,[[]]],[11,"length","","",0,[[]]],[11,"from_array","","",0,[[]]],[11,"from_native_slice","","",0,[[]]],[11,"capacity","","",0,[[]]],[11,"from_slice","","",0,[[]]],[11,"from_slice_range","","",0,[[["range",3]]]],[11,"slice","","",0,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",0,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",0,[[]]],[11,"get_chunk_len","","",0,[[]]],[11,"get_chunk","","",0,[[]]],[11,"set_chunk","","",0,[[]]],[11,"from_vec","","",0,[[["vec",3],["u8",3]],["docsecretbytes",3]]],[11,"from_seq","","",0,[[],["docsecretbytes",3]]],[11,"from_hex","","Read hex string to Bytes.",0,[[],["docsecretbytes",3]]],[11,"declassify_eq","","",0,[[]]],[11,"to_be_bytes","","",0,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",0,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",0,[[],["docsecretbytes",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",0,[[],["docsecretbytes",3]]],[11,"to_be_U32s","","",0,[[],[["seq",3],["u32",3]]]],[11,"to_le_U32s","","",0,[[],[["seq",3],["u32",3]]]],[11,"to_be_U64s","","",0,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",0,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",0,[[],[["seq",3],["u128",3]]]],[11,"to_U128s_le","","",0,[[],[["seq",3],["u128",3]]]],[11,"to_hex","","",0,[[],["string",3]]],[11,"new","","",1,[[]]],[11,"length","","",1,[[]]],[11,"from_array","","",1,[[]]],[11,"from_native_slice","","",1,[[]]],[11,"capacity","","",1,[[]]],[11,"from_slice","","",1,[[]]],[11,"from_slice_range","","",1,[[["range",3]]]],[11,"slice","","",1,[[],["seq",3]]],[11,"slice_range","","",1,[[["range",3]],["seq",3]]],[11,"num_chunks","","",1,[[]]],[11,"get_chunk_len","","",1,[[]]],[11,"get_chunk","","",1,[[]]],[11,"set_chunk","","",1,[[]]],[11,"from_vec","","",1,[[["vec",3]],["docpublicbytes",3]]],[11,"from_seq","","",1,[[],["docpublicbytes",3]]],[11,"from_hex","","Read hex string to Bytes.",1,[[],["docpublicbytes",3]]],[11,"to_be_u32s","","",1,[[],["seq",3]]],[11,"to_le_u32s","","",1,[[],["seq",3]]],[11,"to_be_u64s","","",1,[[],["seq",3]]],[11,"to_le_u64s","","",1,[[],["seq",3]]],[11,"to_u128s_be","","",1,[[],["seq",3]]],[11,"to_u128s_le","","",1,[[],["seq",3]]],[11,"to_hex","","",1,[[],["string",3]]],[11,"new","","",2,[[]]],[11,"length","","",2,[[]]],[11,"from_array","","",2,[[]]],[11,"from_native_slice","","",2,[[]]],[11,"capacity","","",2,[[]]],[11,"from_slice","","",2,[[]]],[11,"from_slice_range","","",2,[[["range",3]]]],[11,"slice","","",2,[[],[["seq",3],["u32",3]]]],[11,"slice_range","","",2,[[["range",3]],[["seq",3],["u32",3]]]],[11,"num_chunks","","",2,[[]]],[11,"get_chunk_len","","",2,[[]]],[11,"get_chunk","","",2,[[]]],[11,"set_chunk","","",2,[[]]],[11,"from_vec","","",2,[[["u32",3],["vec",3]],["docsecretarray",3]]],[11,"from_seq","","",2,[[],["docsecretarray",3]]],[11,"from_hex","","Read hex string to Bytes.",2,[[],["docsecretarray",3]]],[11,"declassify_eq","","",2,[[]]],[11,"to_be_bytes","","",2,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",2,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",2,[[],["docsecretarray",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",2,[[],["docsecretarray",3]]],[11,"new","","",3,[[]]],[11,"length","","",3,[[]]],[11,"from_array","","",3,[[]]],[11,"from_native_slice","","",3,[[]]],[11,"capacity","","",3,[[]]],[11,"from_slice","","",3,[[]]],[11,"from_slice_range","","",3,[[["range",3]]]],[11,"slice","","",3,[[],["seq",3]]],[11,"slice_range","","",3,[[["range",3]],["seq",3]]],[11,"num_chunks","","",3,[[]]],[11,"get_chunk_len","","",3,[[]]],[11,"get_chunk","","",3,[[]]],[11,"set_chunk","","",3,[[]]],[11,"from_vec","","",3,[[["vec",3]],["docpublicarray",3]]],[11,"from_seq","","",3,[[],["docpublicarray",3]]],[11,"from_hex","","Read hex string to Bytes.",3,[[],["docpublicarray",3]]],[11,"new","","",4,[[]]],[11,"length","","",4,[[]]],[11,"from_array","","",4,[[]]],[11,"from_native_slice","","",4,[[]]],[11,"capacity","","",4,[[]]],[11,"from_slice","","",4,[[]]],[11,"from_slice_range","","",4,[[["range",3]]]],[11,"slice","","",4,[[],["seq",3]]],[11,"slice_range","","",4,[[["range",3]],["seq",3]]],[11,"num_chunks","","",4,[[]]],[11,"get_chunk_len","","",4,[[]]],[11,"get_chunk","","",4,[[]]],[11,"set_chunk","","",4,[[]]],[11,"from_vec","","",4,[[["vec",3]],["docparametricarray",3]]],[11,"from_seq","","",4,[[],["docparametricarray",3]]],[14,"_array_base","","",null,null],[14,"generic_array","","",null,null],[14,"_secret_array","","This creates arrays for secret integers, i.e. `$t` is the…",null,null],[14,"_public_array","","",null,null],[14,"array","","Create a new array with the given name, length, and type.",null,null],[14,"bytes","","Convenience function to create a new byte array (of type…",null,null],[14,"public_bytes","","Convenience function to create a new public byte array (of…",null,null],[14,"secret_array","","",null,null],[14,"secret_bytes","","",null,null],[14,"assert_secret_array_eq","","",null,null],[14,"assert_bytes_eq","","",null,null],[14,"both_arrays","","",null,null],[14,"both_bytes","","",null,null],[14,"unsigned_public_integer","","",null,null],[14,"signed_public_integer","","",null,null],[14,"unsigned_integer","","",null,null],[14,"signed_integer","","",null,null],[14,"nat_mod","","",null,null],[14,"public_nat_mod","","",null,null],[14,"_implement_numeric_unsigned_public","","",null,null],[14,"_implement_numeric_signed_public","","",null,null],[14,"_implement_numeric_unsigned_secret","","",null,null],[14,"_implement_numeric_signed_secret","","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","hacspec_lib::prelude","",129,[[]]],[11,"into","","",129,[[]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"to_string","","",129,[[],["string",3]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",129,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",129,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"to_string","","",130,[[],["string",3]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",130,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",130,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","hacspec_lib::prelude::traits","",42,[[]]],[11,"into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_string","","",43,[[],["string",3]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","hacspec_lib::prelude","",131,[[]]],[11,"into","","",131,[[]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"to_string","","",131,[[],["string",3]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"into_iter","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"into_iter","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"into_iter","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"to_string","","",85,[[],["string",3]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"to_string","","",86,[[],["string",3]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"to_string","","",87,[[],["string",3]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"to_string","","",88,[[],["string",3]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"to_string","","",89,[[],["string",3]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"to_string","","",90,[[],["string",3]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"to_string","","",91,[[],["string",3]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"to_string","","",92,[[],["string",3]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"to_string","","",93,[[],["string",3]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"to_string","","",94,[[],["string",3]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","hacspec_lib::prelude::fmt","",97,[[]]],[11,"into","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"to_string","","",134,[[],["string",3]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"to_string","","",135,[[],["string",3]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"from","hacspec_lib::prelude","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"description","hacspec_lib::prelude::fmt","",134,[[]]],[11,"description","hacspec_lib::prelude","",131,[[]]],[11,"write_str","hacspec_lib::prelude::fmt","",141,[[],[["error",3],["result",4]]]],[11,"write_char","","",141,[[],[["error",3],["result",4]]]],[11,"write_fmt","","",141,[[["arguments",3]],[["error",3],["result",4]]]],[11,"cmp","hacspec_lib::prelude","",83,[[["generatorstate",4]],["ordering",4]]],[11,"cmp","","",44,[[["ordering",4]],["ordering",4]]],[11,"cmp","hacspec_lib::prelude::fmt","",134,[[["error",3]],["ordering",4]]],[11,"get","hacspec_lib::prelude","",132,[[],["option",4]]],[11,"get_mut","","",132,[[],["option",4]]],[11,"get_unchecked","","",132,[[]]],[11,"get_unchecked_mut","","",132,[[]]],[11,"index","","",132,[[]]],[11,"index_mut","","",132,[[]]],[11,"get","","",80,[[],["option",4]]],[11,"get_mut","","",80,[[],["option",4]]],[11,"get_unchecked","","",80,[[]]],[11,"get_unchecked_mut","","",80,[[]]],[11,"index","","",80,[[]]],[11,"index_mut","","",80,[[]]],[11,"get","","",80,[[],["option",4]]],[11,"get_mut","","",80,[[],["option",4]]],[11,"get_unchecked","","",80,[[]]],[11,"get_unchecked_mut","","",80,[[]]],[11,"index","","",80,[[]]],[11,"index_mut","","",80,[[]]],[11,"get","","",75,[[],["option",4]]],[11,"get_mut","","",75,[[],["option",4]]],[11,"get_unchecked","","",75,[[]]],[11,"get_unchecked_mut","","",75,[[]]],[11,"index","","",75,[[]]],[11,"index_mut","","",75,[[]]],[11,"get","","",133,[[],["option",4]]],[11,"get_mut","","",133,[[],["option",4]]],[11,"get_unchecked","","",133,[[]]],[11,"get_unchecked_mut","","",133,[[]]],[11,"index","","",133,[[]]],[11,"index_mut","","",133,[[]]],[11,"get","","",77,[[],["option",4]]],[11,"get_mut","","",77,[[],["option",4]]],[11,"get_unchecked","","",77,[[]]],[11,"get_unchecked_mut","","",77,[[]]],[11,"index","","",77,[[]]],[11,"index_mut","","",77,[[]]],[11,"get","","",75,[[],["option",4]]],[11,"get_mut","","",75,[[],["option",4]]],[11,"get_unchecked","","",75,[[]]],[11,"get_unchecked_mut","","",75,[[]]],[11,"index","","",75,[[]]],[11,"index_mut","","",75,[[]]],[11,"get","","",77,[[],["option",4]]],[11,"get_mut","","",77,[[],["option",4]]],[11,"get_unchecked","","",77,[[]]],[11,"get_unchecked_mut","","",77,[[]]],[11,"index","","",77,[[]]],[11,"index_mut","","",77,[[]]],[11,"get","","",76,[[],["option",4]]],[11,"get_mut","","",76,[[],["option",4]]],[11,"get_unchecked","","",76,[[]]],[11,"get_unchecked_mut","","",76,[[]]],[11,"index","","",76,[[]]],[11,"index_mut","","",76,[[]]],[11,"get","","",133,[[],["option",4]]],[11,"get_mut","","",133,[[],["option",4]]],[11,"get_unchecked","","",133,[[]]],[11,"get_unchecked_mut","","",133,[[]]],[11,"index","","",133,[[]]],[11,"index_mut","","",133,[[]]],[11,"get","","",132,[[],["option",4]]],[11,"get_mut","","",132,[[],["option",4]]],[11,"get_unchecked","","",132,[[]]],[11,"get_unchecked_mut","","",132,[[]]],[11,"index","","",132,[[]]],[11,"index_mut","","",132,[[]]],[11,"get","","",76,[[],["option",4]]],[11,"get_mut","","",76,[[],["option",4]]],[11,"get_unchecked","","",76,[[]]],[11,"get_unchecked_mut","","",76,[[]]],[11,"index","","",76,[[]]],[11,"index_mut","","",76,[[]]],[11,"next_back","","",75,[[],["option",4]]],[11,"nth_back","","",75,[[],["option",4]]],[11,"next_back","","",133,[[],["option",4]]],[11,"nth_back","","",133,[[],["option",4]]],[11,"try_rfold","","",133,[[]]],[11,"rfold","","",133,[[]]],[11,"fmt","","",131,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","hacspec_lib::prelude::fmt","",135,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",134,[[["formatter",3]],[["error",3],["result",4]]]],[11,"default","hacspec_lib::prelude","",132,[[],["rangefull",3]]],[11,"default","hacspec_lib::prelude::fmt","",134,[[],["error",3]]],[11,"default","hacspec_lib::prelude","",75,[[],["range",3]]],[11,"partial_cmp","","",83,[[["generatorstate",4]],[["option",4],["ordering",4]]]],[11,"lt","","",83,[[["generatorstate",4]]]],[11,"le","","",83,[[["generatorstate",4]]]],[11,"gt","","",83,[[["generatorstate",4]]]],[11,"ge","","",83,[[["generatorstate",4]]]],[11,"partial_cmp","","",44,[[["ordering",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","hacspec_lib::prelude::fmt","",134,[[["error",3]],[["option",4],["ordering",4]]]],[11,"fmt","hacspec_lib::prelude","",75,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","hacspec_lib::prelude::fmt","",135,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","hacspec_lib::prelude","",84,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",83,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",44,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","hacspec_lib::prelude::fmt","",97,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","hacspec_lib::prelude","",132,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",133,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",131,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",77,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","hacspec_lib::prelude::fmt","",134,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","hacspec_lib::prelude","",76,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",80,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",78,[[["formatter",3]],[["error",3],["result",4]]]],[11,"next","","",133,[[],["option",4]]],[11,"size_hint","","",133,[[]]],[11,"nth","","",133,[[],["option",4]]],[11,"try_fold","","",133,[[]]],[11,"fold","","",133,[[]]],[11,"last","","",133,[[],["option",4]]],[11,"min","","",133,[[],["option",4]]],[11,"max","","",133,[[],["option",4]]],[11,"next","","",75,[[],["option",4]]],[11,"size_hint","","",75,[[]]],[11,"nth","","",75,[[],["option",4]]],[11,"last","","",75,[[],["option",4]]],[11,"min","","",75,[[],["option",4]]],[11,"max","","",75,[[],["option",4]]],[11,"next","","",76,[[],["option",4]]],[11,"size_hint","","",76,[[]]],[11,"nth","","",76,[[],["option",4]]],[11,"clone","","",80,[[],["rangetoinclusive",3]]],[11,"clone","","",78,[[],["bound",4]]],[11,"clone","","",131,[[],["parseinterror",3]]],[11,"clone","","",77,[[],["rangeto",3]]],[11,"clone","hacspec_lib::prelude::fmt","",135,[[],["arguments",3]]],[11,"clone","hacspec_lib::prelude","",84,[[],["controlflow",4]]],[11,"clone","hacspec_lib::prelude::fmt","",134,[[],["error",3]]],[11,"clone","hacspec_lib::prelude","",44,[[],["ordering",4]]],[11,"clone","","",75,[[],["range",3]]],[11,"clone","","",132,[[],["rangefull",3]]],[11,"clone","","",83,[[],["generatorstate",4]]],[11,"clone","","",133,[[],["rangeinclusive",3]]],[11,"clone","","",76,[[],["rangefrom",3]]],[11,"start_bound","","",75,[[],["bound",4]]],[11,"end_bound","","",75,[[],["bound",4]]],[11,"start_bound","","",76,[[],["bound",4]]],[11,"end_bound","","",76,[[],["bound",4]]],[11,"start_bound","","",80,[[],["bound",4]]],[11,"end_bound","","",80,[[],["bound",4]]],[11,"start_bound","","",76,[[],["bound",4]]],[11,"end_bound","","",76,[[],["bound",4]]],[11,"start_bound","","",133,[[],["bound",4]]],[11,"end_bound","","",133,[[],["bound",4]]],[11,"start_bound","","",77,[[],["bound",4]]],[11,"end_bound","","",77,[[],["bound",4]]],[11,"start_bound","","",133,[[],["bound",4]]],[11,"end_bound","","",133,[[],["bound",4]]],[11,"start_bound","","",80,[[],["bound",4]]],[11,"end_bound","","",80,[[],["bound",4]]],[11,"start_bound","","",77,[[],["bound",4]]],[11,"end_bound","","",77,[[],["bound",4]]],[11,"start_bound","","",132,[[],["bound",4]]],[11,"end_bound","","",132,[[],["bound",4]]],[11,"start_bound","","",75,[[],["bound",4]]],[11,"end_bound","","",75,[[],["bound",4]]],[11,"hash","","",44,[[]]],[11,"hash","","",78,[[]]],[11,"hash","","",132,[[]]],[11,"hash","","",77,[[]]],[11,"hash","","",75,[[]]],[11,"hash","","",133,[[]]],[11,"hash","hacspec_lib::prelude::fmt","",134,[[]]],[11,"hash","hacspec_lib::prelude","",76,[[]]],[11,"hash","","",80,[[]]],[11,"hash","","",83,[[]]],[11,"eq","","",83,[[["generatorstate",4]]]],[11,"ne","","",83,[[["generatorstate",4]]]],[11,"eq","","",44,[[["ordering",4]]]],[11,"eq","","",132,[[["rangefull",3]]]],[11,"eq","hacspec_lib::prelude::fmt","",134,[[["error",3]]]],[11,"eq","hacspec_lib::prelude","",80,[[["rangetoinclusive",3]]]],[11,"ne","","",80,[[["rangetoinclusive",3]]]],[11,"eq","","",78,[[["bound",4]]]],[11,"ne","","",78,[[["bound",4]]]],[11,"eq","","",77,[[["rangeto",3]]]],[11,"ne","","",77,[[["rangeto",3]]]],[11,"eq","","",131,[[["parseinterror",3]]]],[11,"ne","","",131,[[["parseinterror",3]]]],[11,"eq","","",133,[[["rangeinclusive",3]]]],[11,"ne","","",133,[[["rangeinclusive",3]]]],[11,"eq","","",84,[[["controlflow",4]]]],[11,"ne","","",84,[[["controlflow",4]]]],[11,"eq","","",75,[[["range",3]]]],[11,"ne","","",75,[[["range",3]]]],[11,"eq","","",76,[[["rangefrom",3]]]],[11,"ne","","",76,[[["rangefrom",3]]]],[11,"fmt","","",130,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",129,[[["formatter",3]],[["error",3],["result",4]]]],[11,"bitor_assign","","",129,[[["biguint",3]]]],[11,"bitor_assign","","",130,[[["bigint",3]]]],[11,"bitor_assign","","",130,[[["bigint",3]]]],[11,"bitor_assign","","",129,[[["biguint",3]]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",130,[[["bigint",3]]]],[11,"sub_assign","","",129,[[]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",129,[[["biguint",3]]]],[11,"sub_assign","","",130,[[["bigint",3]]]],[11,"sub_assign","","",129,[[["biguint",3]]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",129,[[]]],[11,"sub_assign","","",129,[[]]],[11,"sub_assign","","",129,[[]]],[11,"sub_assign","","",129,[[]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",130,[[]]],[11,"sub_assign","","",129,[[]]],[11,"bitor","","",129,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",129,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",130,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",130,[[["bigint",3]],["bigint",3]]],[11,"from_str","","",130,[[],[["parsebiginterror",3],["result",4],["bigint",3]]]],[11,"from_str","","",129,[[],[["biguint",3],["result",4],["parsebiginterror",3]]]],[11,"checked_sub","","",130,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",129,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",130,[[["bigint",3]],["bigint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",129,[[["biguint",3]],["biguint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",129,[[["biguint",3]],["biguint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[["bigint",3]],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",129,[[],["biguint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"sub","","",130,[[],["bigint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from","","",129,[[],["biguint",3]]],[11,"from","","",129,[[],["biguint",3]]],[11,"from","","",130,[[["biguint",3]],["bigint",3]]],[11,"from","","",129,[[],["biguint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from","","",129,[[],["biguint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from","","",129,[[],["biguint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from","","",129,[[],["biguint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from","","",130,[[],["bigint",3]]],[11,"from_str_radix","","Creates and initializes a BigInt.",130,[[],[["parsebiginterror",3],["result",4],["bigint",3]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",129,[[],[["biguint",3],["result",4],["parsebiginterror",3]]]],[11,"fmt","","",130,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",129,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",129,[[]]],[11,"hash","","",130,[[]]],[11,"hash","","",5,[[]]],[11,"checked_add","","",130,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_add","","",129,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"shl_assign","","",129,[[]]],[11,"shl_assign","","",130,[[]]],[11,"nth_root","","",130,[[],["bigint",3]]],[11,"sqrt","","",130,[[],["bigint",3]]],[11,"cbrt","","",130,[[],["bigint",3]]],[11,"nth_root","","",129,[[],["biguint",3]]],[11,"sqrt","","",129,[[],["biguint",3]]],[11,"cbrt","","",129,[[],["biguint",3]]],[11,"fmt","","",130,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",129,[[["formatter",3]],[["error",3],["result",4]]]],[11,"to_bigint","","",129,[[],[["option",4],["bigint",3]]]],[11,"to_bigint","","",130,[[],[["option",4],["bigint",3]]]],[11,"div_assign","","",129,[[]]],[11,"div_assign","","",130,[[]]],[11,"div_assign","","",129,[[]]],[11,"div_assign","","",130,[[]]],[11,"div_assign","","",129,[[]]],[11,"div_assign","","",129,[[]]],[11,"div_assign","","",129,[[["biguint",3]]]],[11,"div_assign","","",129,[[["biguint",3]]]],[11,"div_assign","","",130,[[]]],[11,"div_assign","","",130,[[]]],[11,"div_assign","","",130,[[]]],[11,"div_assign","","",129,[[]]],[11,"div_assign","","",130,[[]]],[11,"div_assign","","",130,[[["bigint",3]]]],[11,"div_assign","","",130,[[]]],[11,"div_assign","","",129,[[]]],[11,"div_assign","","",130,[[]]],[11,"div_assign","","",130,[[["bigint",3]]]],[11,"div_assign","","",130,[[]]],[11,"div_assign","","",130,[[]]],[11,"div_assign","","",130,[[]]],[11,"div_assign","","",130,[[]]],[11,"from_i64","","",130,[[],[["option",4],["bigint",3]]]],[11,"from_i128","","",130,[[],[["option",4],["bigint",3]]]],[11,"from_u64","","",130,[[],[["option",4],["bigint",3]]]],[11,"from_u128","","",130,[[],[["option",4],["bigint",3]]]],[11,"from_f64","","",130,[[],[["option",4],["bigint",3]]]],[11,"from_i64","","",129,[[],[["biguint",3],["option",4]]]],[11,"from_i128","","",129,[[],[["biguint",3],["option",4]]]],[11,"from_u64","","",129,[[],[["biguint",3],["option",4]]]],[11,"from_u128","","",129,[[],[["biguint",3],["option",4]]]],[11,"from_f64","","",129,[[],[["biguint",3],["option",4]]]],[11,"mul_assign","","",130,[[]]],[11,"mul_assign","","",130,[[]]],[11,"mul_assign","","",130,[[]]],[11,"mul_assign","","",130,[[]]],[11,"mul_assign","","",130,[[]]],[11,"mul_assign","","",129,[[]]],[11,"mul_assign","","",129,[[["biguint",3]]]],[11,"mul_assign","","",130,[[]]],[11,"mul_assign","","",130,[[]]],[11,"mul_assign","","",130,[[]]],[11,"mul_assign","","",130,[[["bigint",3]]]],[11,"mul_assign","","",129,[[]]],[11,"mul_assign","","",129,[[]]],[11,"mul_assign","","",130,[[]]],[11,"mul_assign","","",129,[[]]],[11,"mul_assign","","",129,[[["biguint",3]]]],[11,"mul_assign","","",130,[[]]],[11,"mul_assign","","",129,[[]]],[11,"mul_assign","","",130,[[["bigint",3]]]],[11,"mul_assign","","",130,[[]]],[11,"mul_assign","","",129,[[]]],[11,"mul_assign","","",130,[[]]],[11,"default","","",129,[[],["biguint",3]]],[11,"default","","",130,[[],["bigint",3]]],[11,"partial_cmp","","",5,[[["sign",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",129,[[["biguint",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",130,[[["bigint",3]],[["option",4],["ordering",4]]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[["bigint",3]],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",129,[[["biguint",3]],["biguint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[["bigint",3]],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",129,[[["biguint",3]],["biguint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",129,[[],["biguint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"div","","",130,[[],["bigint",3]]],[11,"checked_mul","","",130,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",129,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"div_rem","","",129,[[["biguint",3]]]],[11,"div_floor","","",129,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",129,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",129,[[["biguint",3]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",129,[[["biguint",3]],["biguint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",129,[[["biguint",3]],["biguint",3]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",129,[[["biguint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",129,[[["biguint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",129,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",129,[[]]],[11,"div_rem","","",130,[[["bigint",3]]]],[11,"div_floor","","",130,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",130,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",130,[[["bigint",3]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",130,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",130,[[["bigint",3]],["bigint",3]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",130,[[["bigint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",130,[[["bigint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",130,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",130,[[]]],[11,"product","","",129,[[],["biguint",3]]],[11,"product","","",130,[[],["bigint",3]]],[11,"neg","","Negate Sign value.",5,[[],["sign",4]]],[11,"neg","","",129,[[],["biguint",3]]],[11,"neg","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",129,[[["biguint",3]],["biguint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",130,[[["bigint",3]],["bigint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",130,[[["bigint",3]],["bigint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",129,[[["biguint",3]],["biguint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"rem","","",129,[[],["biguint",3]]],[11,"rem","","",130,[[],["bigint",3]]],[11,"sum","","",130,[[],["bigint",3]]],[11,"sum","","",129,[[],["biguint",3]]],[11,"bitxor","","",129,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",130,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",130,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",129,[[["biguint",3]],["biguint",3]]],[11,"not","","",130,[[],["bigint",3]]],[11,"to_i64","","",129,[[],["option",4]]],[11,"to_i128","","",129,[[],["option",4]]],[11,"to_u64","","",129,[[],["option",4]]],[11,"to_u128","","",129,[[],["option",4]]],[11,"to_f32","","",129,[[],["option",4]]],[11,"to_f64","","",129,[[],["option",4]]],[11,"to_i64","","",130,[[],["option",4]]],[11,"to_i128","","",130,[[],["option",4]]],[11,"to_u64","","",130,[[],["option",4]]],[11,"to_u128","","",130,[[],["option",4]]],[11,"to_f32","","",130,[[],["option",4]]],[11,"to_f64","","",130,[[],["option",4]]],[11,"one","","",129,[[],["biguint",3]]],[11,"set_one","","",129,[[]]],[11,"is_one","","",129,[[]]],[11,"one","","",130,[[],["bigint",3]]],[11,"set_one","","",130,[[]]],[11,"is_one","","",130,[[]]],[11,"mul","","",129,[[["biguint",3]],["biguint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",129,[[["biguint",3]],["biguint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",130,[[["bigint",3]],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",5,[[["sign",4]],["sign",4]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",130,[[["bigint",3]],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",129,[[],["biguint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"mul","","",130,[[],["bigint",3]]],[11,"cmp","","",129,[[["biguint",3]],["ordering",4]]],[11,"cmp","","",5,[[["sign",4]],["ordering",4]]],[11,"cmp","","",130,[[["bigint",3]],["ordering",4]]],[11,"shl","","",129,[[],["biguint",3]]],[11,"shl","","",130,[[],["bigint",3]]],[11,"fmt","","",129,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",130,[[["formatter",3]],[["error",3],["result",4]]]],[11,"to_biguint","","",130,[[],[["biguint",3],["option",4]]]],[11,"to_biguint","","",129,[[],[["biguint",3],["option",4]]]],[11,"eq","","",5,[[["sign",4]]]],[11,"eq","","",130,[[["bigint",3]]]],[11,"eq","","",129,[[["biguint",3]]]],[11,"bitand_assign","","",130,[[["bigint",3]]]],[11,"bitand_assign","","",129,[[["biguint",3]]]],[11,"bitand_assign","","",130,[[["bigint",3]]]],[11,"bitand_assign","","",129,[[["biguint",3]]]],[11,"rem_assign","","",129,[[]]],[11,"rem_assign","","",130,[[]]],[11,"rem_assign","","",130,[[]]],[11,"rem_assign","","",130,[[]]],[11,"rem_assign","","",130,[[]]],[11,"rem_assign","","",130,[[]]],[11,"rem_assign","","",129,[[]]],[11,"rem_assign","","",129,[[]]],[11,"rem_assign","","",130,[[]]],[11,"rem_assign","","",129,[[]]],[11,"rem_assign","","",130,[[["bigint",3]]]],[11,"rem_assign","","",130,[[["bigint",3]]]],[11,"rem_assign","","",130,[[]]],[11,"rem_assign","","",129,[[["biguint",3]]]],[11,"rem_assign","","",129,[[]]],[11,"rem_assign","","",130,[[]]],[11,"rem_assign","","",130,[[]]],[11,"rem_assign","","",129,[[]]],[11,"rem_assign","","",130,[[]]],[11,"rem_assign","","",129,[[["biguint",3]]]],[11,"rem_assign","","",130,[[]]],[11,"rem_assign","","",130,[[]]],[11,"shr_assign","","",130,[[]]],[11,"shr_assign","","",129,[[]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",129,[[["biguint",3]],["biguint",3]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[["bigint",3]],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",129,[[["biguint",3]],["biguint",3]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",129,[[],["biguint",3]]],[11,"add","","",130,[[["bigint",3]],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"add","","",130,[[],["bigint",3]]],[11,"fmt","","",129,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",5,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",130,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",129,[[],["biguint",3]]],[11,"clone","","",130,[[],["bigint",3]]],[11,"clone","","",5,[[],["sign",4]]],[11,"checked_div","","",129,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"checked_div","","",130,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"add_assign","","",130,[[]]],[11,"add_assign","","",129,[[]]],[11,"add_assign","","",130,[[]]],[11,"add_assign","","",129,[[["biguint",3]]]],[11,"add_assign","","",129,[[]]],[11,"add_assign","","",129,[[]]],[11,"add_assign","","",130,[[]]],[11,"add_assign","","",130,[[]]],[11,"add_assign","","",130,[[]]],[11,"add_assign","","",130,[[]]],[11,"add_assign","","",130,[[["bigint",3]]]],[11,"add_assign","","",130,[[]]],[11,"add_assign","","",129,[[["biguint",3]]]],[11,"add_assign","","",130,[[]]],[11,"add_assign","","",130,[[]]],[11,"add_assign","","",129,[[]]],[11,"add_assign","","",130,[[]]],[11,"add_assign","","",129,[[]]],[11,"add_assign","","",130,[[["bigint",3]]]],[11,"add_assign","","",130,[[]]],[11,"add_assign","","",129,[[]]],[11,"add_assign","","",130,[[]]],[11,"bitand","","",129,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",130,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",130,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",129,[[["biguint",3]],["biguint",3]]],[11,"shr","","",130,[[],["bigint",3]]],[11,"shr","","",129,[[],["biguint",3]]],[11,"abs","","",130,[[],["bigint",3]]],[11,"abs_sub","","",130,[[["bigint",3]],["bigint",3]]],[11,"signum","","",130,[[],["bigint",3]]],[11,"is_positive","","",130,[[]]],[11,"is_negative","","",130,[[]]],[11,"zero","","",129,[[],["biguint",3]]],[11,"set_zero","","",129,[[]]],[11,"is_zero","","",129,[[]]],[11,"zero","","",130,[[],["bigint",3]]],[11,"set_zero","","",130,[[]]],[11,"is_zero","","",130,[[]]],[11,"bitxor_assign","","",130,[[["bigint",3]]]],[11,"bitxor_assign","","",130,[[["bigint",3]]]],[11,"bitxor_assign","","",129,[[["biguint",3]]]],[11,"bitxor_assign","","",129,[[["biguint",3]]]],[11,"fmt","","",129,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",130,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","hacspec_lib::prelude::traits","",43,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",42,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",43,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","hacspec_lib::prelude","",89,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",92,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",94,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",87,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",85,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",90,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",88,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",86,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",91,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",93,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",89,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",90,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",85,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",93,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",87,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",88,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",94,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",91,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",92,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",86,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",85,[[],["u8",3]]],[11,"clone","","",88,[[],["u64",3]]],[11,"clone","","",91,[[],["i16",3]]],[11,"clone","","",87,[[],["u32",3]]],[11,"clone","","",92,[[],["i32",3]]],[11,"clone","","",93,[[],["i64",3]]],[11,"clone","","",86,[[],["u16",3]]],[11,"clone","","",89,[[],["u128",3]]],[11,"clone","","",90,[[],["i8",3]]],[11,"clone","","",94,[[],["i128",3]]],[11,"fmt","","",88,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",85,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",93,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",92,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",90,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",94,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",87,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",89,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",86,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",91,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sub_assign","","",86,[[["u16",3]]]],[11,"sub_assign","","",90,[[["i8",3]]]],[11,"sub_assign","","",88,[[["u64",3]]]],[11,"sub_assign","","",93,[[["i64",3]]]],[11,"sub_assign","","",87,[[["u32",3]]]],[11,"sub_assign","","",91,[[["i16",3]]]],[11,"sub_assign","","",89,[[["u128",3]]]],[11,"sub_assign","","",94,[[["i128",3]]]],[11,"sub_assign","","",92,[[["i32",3]]]],[11,"sub_assign","","",85,[[["u8",3]]]],[11,"bitor_assign","","",91,[[["i16",3]]]],[11,"bitor_assign","","",92,[[["i32",3]]]],[11,"bitor_assign","","",86,[[["u16",3]]]],[11,"bitor_assign","","",90,[[["i8",3]]]],[11,"bitor_assign","","",89,[[["u128",3]]]],[11,"bitor_assign","","",93,[[["i64",3]]]],[11,"bitor_assign","","",85,[[["u8",3]]]],[11,"bitor_assign","","",94,[[["i128",3]]]],[11,"bitor_assign","","",88,[[["u64",3]]]],[11,"bitor_assign","","",87,[[["u32",3]]]],[11,"bitor","","",87,[[["u32",3]],["u32",3]]],[11,"bitor","","",88,[[["u64",3]],["u64",3]]],[11,"bitor","","",89,[[["u128",3]],["u128",3]]],[11,"bitor","","",94,[[["i128",3]],["i128",3]]],[11,"bitor","","",93,[[["i64",3]],["i64",3]]],[11,"bitor","","",90,[[["i8",3]],["i8",3]]],[11,"bitor","","",85,[[["u8",3]],["u8",3]]],[11,"bitor","","",92,[[["i32",3]],["i32",3]]],[11,"bitor","","",86,[[["u16",3]],["u16",3]]],[11,"bitor","","",91,[[["i16",3]],["i16",3]]],[11,"bitxor","","",89,[[["u128",3]],["u128",3]]],[11,"bitxor","","",87,[[["u32",3]],["u32",3]]],[11,"bitxor","","",88,[[["u64",3]],["u64",3]]],[11,"bitxor","","",86,[[["u16",3]],["u16",3]]],[11,"bitxor","","",90,[[["i8",3]],["i8",3]]],[11,"bitxor","","",94,[[["i128",3]],["i128",3]]],[11,"bitxor","","",85,[[["u8",3]],["u8",3]]],[11,"bitxor","","",91,[[["i16",3]],["i16",3]]],[11,"bitxor","","",93,[[["i64",3]],["i64",3]]],[11,"bitxor","","",92,[[["i32",3]],["i32",3]]],[11,"shl_assign","","",89,[[]]],[11,"shl_assign","","",85,[[]]],[11,"shl_assign","","",86,[[]]],[11,"shl_assign","","",93,[[]]],[11,"shl_assign","","",91,[[]]],[11,"shl_assign","","",94,[[]]],[11,"shl_assign","","",87,[[]]],[11,"shl_assign","","",88,[[]]],[11,"shl_assign","","",92,[[]]],[11,"shl_assign","","",90,[[]]],[11,"add_assign","","",91,[[["i16",3]]]],[11,"add_assign","","",85,[[["u8",3]]]],[11,"add_assign","","",88,[[["u64",3]]]],[11,"add_assign","","",94,[[["i128",3]]]],[11,"add_assign","","",93,[[["i64",3]]]],[11,"add_assign","","",90,[[["i8",3]]]],[11,"add_assign","","",89,[[["u128",3]]]],[11,"add_assign","","",86,[[["u16",3]]]],[11,"add_assign","","",92,[[["i32",3]]]],[11,"add_assign","","",87,[[["u32",3]]]],[11,"not","","",86,[[],["u16",3]]],[11,"not","","",91,[[],["i16",3]]],[11,"not","","",89,[[],["u128",3]]],[11,"not","","",90,[[],["i8",3]]],[11,"not","","",94,[[],["i128",3]]],[11,"not","","",85,[[],["u8",3]]],[11,"not","","",88,[[],["u64",3]]],[11,"not","","",92,[[],["i32",3]]],[11,"not","","",93,[[],["i64",3]]],[11,"not","","",87,[[],["u32",3]]],[11,"sub","","",87,[[["u32",3]],["u32",3]]],[11,"sub","","",91,[[["i16",3]],["i16",3]]],[11,"sub","","",90,[[["i8",3]],["i8",3]]],[11,"sub","","",94,[[["i128",3]],["i128",3]]],[11,"sub","","",89,[[["u128",3]],["u128",3]]],[11,"sub","","",86,[[["u16",3]],["u16",3]]],[11,"sub","","",92,[[["i32",3]],["i32",3]]],[11,"sub","","",85,[[["u8",3]],["u8",3]]],[11,"sub","","",93,[[["i64",3]],["i64",3]]],[11,"sub","","",88,[[["u64",3]],["u64",3]]],[11,"mul","","",91,[[["i16",3]],["i16",3]]],[11,"mul","","",89,[[["u128",3]],["u128",3]]],[11,"mul","","",88,[[["u64",3]],["u64",3]]],[11,"mul","","",90,[[["i8",3]],["i8",3]]],[11,"mul","","",86,[[["u16",3]],["u16",3]]],[11,"mul","","",87,[[["u32",3]],["u32",3]]],[11,"mul","","",92,[[["i32",3]],["i32",3]]],[11,"mul","","",93,[[["i64",3]],["i64",3]]],[11,"mul","","",85,[[["u8",3]],["u8",3]]],[11,"mul","","",94,[[["i128",3]],["i128",3]]],[11,"mul_assign","","",93,[[["i64",3]]]],[11,"mul_assign","","",90,[[["i8",3]]]],[11,"mul_assign","","",92,[[["i32",3]]]],[11,"mul_assign","","",85,[[["u8",3]]]],[11,"mul_assign","","",87,[[["u32",3]]]],[11,"mul_assign","","",91,[[["i16",3]]]],[11,"mul_assign","","",86,[[["u16",3]]]],[11,"mul_assign","","",89,[[["u128",3]]]],[11,"mul_assign","","",94,[[["i128",3]]]],[11,"mul_assign","","",88,[[["u64",3]]]],[11,"shl","","",91,[[],["i16",3]]],[11,"shl","","",87,[[],["u32",3]]],[11,"shl","","",94,[[],["i128",3]]],[11,"shl","","",93,[[],["i64",3]]],[11,"shl","","",85,[[],["u8",3]]],[11,"shl","","",90,[[],["i8",3]]],[11,"shl","","",88,[[],["u64",3]]],[11,"shl","","",92,[[],["i32",3]]],[11,"shl","","",89,[[],["u128",3]]],[11,"shl","","",86,[[],["u16",3]]],[11,"default","","",85,[[],["u8",3]]],[11,"default","","",91,[[],["i16",3]]],[11,"default","","",90,[[],["i8",3]]],[11,"default","","",87,[[],["u32",3]]],[11,"default","","",89,[[],["u128",3]]],[11,"default","","",94,[[],["i128",3]]],[11,"default","","",86,[[],["u16",3]]],[11,"default","","",92,[[],["i32",3]]],[11,"default","","",88,[[],["u64",3]]],[11,"default","","",93,[[],["i64",3]]],[11,"bitand","","",94,[[["i128",3]],["i128",3]]],[11,"bitand","","",86,[[["u16",3]],["u16",3]]],[11,"bitand","","",93,[[["i64",3]],["i64",3]]],[11,"bitand","","",87,[[["u32",3]],["u32",3]]],[11,"bitand","","",90,[[["i8",3]],["i8",3]]],[11,"bitand","","",89,[[["u128",3]],["u128",3]]],[11,"bitand","","",91,[[["i16",3]],["i16",3]]],[11,"bitand","","",85,[[["u8",3]],["u8",3]]],[11,"bitand","","",88,[[["u64",3]],["u64",3]]],[11,"bitand","","",92,[[["i32",3]],["i32",3]]],[11,"from","","",91,[[["i8",3]],["i16",3]]],[11,"from","","",90,[[["i32",3]],["i8",3]]],[11,"from","","",89,[[],["u128",3]]],[11,"from","","",89,[[["u16",3]],["u128",3]]],[11,"from","","",88,[[],["u64",3]]],[11,"from","","",93,[[["i32",3]],["i64",3]]],[11,"from","","",91,[[["i32",3]],["i16",3]]],[11,"from","","",89,[[],["u128",3]]],[11,"from","","",87,[[["u16",3]],["u32",3]]],[11,"from","","",87,[[],["u32",3]]],[11,"from","","",90,[[],["i8",3]]],[11,"from","","",85,[[["u128",3]],["u8",3]]],[11,"from","","",90,[[["i16",3]],["i8",3]]],[11,"from","","",88,[[],["u64",3]]],[11,"from","","",92,[[["i8",3]],["i32",3]]],[11,"from","","",93,[[["i128",3]],["i64",3]]],[11,"from","","",91,[[["u16",3]],["i16",3]]],[11,"from","","",87,[[["u128",3]],["u32",3]]],[11,"from","","",89,[[["u8",3]],["u128",3]]],[11,"from","","",94,[[],["i128",3]]],[11,"from","","",89,[[],["u128",3]]],[11,"from","","",94,[[["i64",3]],["i128",3]]],[11,"from","","",91,[[],["i16",3]]],[11,"from","","",88,[[],["u64",3]]],[11,"from","","",90,[[["i128",3]],["i8",3]]],[11,"from","","",85,[[],["u8",3]]],[11,"from","","",86,[[],["u16",3]]],[11,"from","","",89,[[["i128",3]],["u128",3]]],[11,"from","","",86,[[["u32",3]],["u16",3]]],[11,"from","","",88,[[["i64",3]],["u64",3]]],[11,"from","","",89,[[["u32",3]],["u128",3]]],[11,"from","","",88,[[["u32",3]],["u64",3]]],[11,"from","","",89,[[["u64",3]],["u128",3]]],[11,"from","","",94,[[["i8",3]],["i128",3]]],[11,"from","","",90,[[["u8",3]],["i8",3]]],[11,"from","","",93,[[["u64",3]],["i64",3]]],[11,"from","","",88,[[["u16",3]],["u64",3]]],[11,"from","","",92,[[["u32",3]],["i32",3]]],[11,"from","","",85,[[],["u8",3]]],[11,"from","","",93,[[],["i64",3]]],[11,"from","","",94,[[["i16",3]],["i128",3]]],[11,"from","","",94,[[["u128",3]],["i128",3]]],[11,"from","","",85,[[["u32",3]],["u8",3]]],[11,"from","","",88,[[],["u64",3]]],[11,"from","","",86,[[],["u16",3]]],[11,"from","","",85,[[["u16",3]],["u8",3]]],[11,"from","","",92,[[["i16",3]],["i32",3]]],[11,"from","","",89,[[],["u128",3]]],[11,"from","","",87,[[["i32",3]],["u32",3]]],[11,"from","","",92,[[["i64",3]],["i32",3]]],[11,"from","","",93,[[["i8",3]],["i64",3]]],[11,"from","","",88,[[["u128",3]],["u64",3]]],[11,"from","","",85,[[["i8",3]],["u8",3]]],[11,"from","","",90,[[["i64",3]],["i8",3]]],[11,"from","","",94,[[["i32",3]],["i128",3]]],[11,"from","","",88,[[],["u64",3]]],[11,"from","","",88,[[["u8",3]],["u64",3]]],[11,"from","","",91,[[["i128",3]],["i16",3]]],[11,"from","","",87,[[["u8",3]],["u32",3]]],[11,"from","","",92,[[["i128",3]],["i32",3]]],[11,"from","","",89,[[],["u128",3]]],[11,"from","","",93,[[["i16",3]],["i64",3]]],[11,"from","","",91,[[["i64",3]],["i16",3]]],[11,"from","","",86,[[["i16",3]],["u16",3]]],[11,"from","","",85,[[["u64",3]],["u8",3]]],[11,"from","","",92,[[],["i32",3]]],[11,"from","","",87,[[],["u32",3]]],[11,"from","","",87,[[["u64",3]],["u32",3]]],[11,"from","","",86,[[["u128",3]],["u16",3]]],[11,"from","","",86,[[["u8",3]],["u16",3]]],[11,"from","","",86,[[["u64",3]],["u16",3]]],[11,"from","","",89,[[],["u128",3]]],[11,"from","","",87,[[],["u32",3]]],[11,"shr","","",86,[[],["u16",3]]],[11,"shr","","",91,[[],["i16",3]]],[11,"shr","","",87,[[],["u32",3]]],[11,"shr","","",88,[[],["u64",3]]],[11,"shr","","",93,[[],["i64",3]]],[11,"shr","","",94,[[],["i128",3]]],[11,"shr","","",90,[[],["i8",3]]],[11,"shr","","",92,[[],["i32",3]]],[11,"shr","","",85,[[],["u8",3]]],[11,"shr","","",89,[[],["u128",3]]],[11,"bitand_assign","","",90,[[["i8",3]]]],[11,"bitand_assign","","",87,[[["u32",3]]]],[11,"bitand_assign","","",88,[[["u64",3]]]],[11,"bitand_assign","","",92,[[["i32",3]]]],[11,"bitand_assign","","",93,[[["i64",3]]]],[11,"bitand_assign","","",94,[[["i128",3]]]],[11,"bitand_assign","","",89,[[["u128",3]]]],[11,"bitand_assign","","",86,[[["u16",3]]]],[11,"bitand_assign","","",85,[[["u8",3]]]],[11,"bitand_assign","","",91,[[["i16",3]]]],[11,"shr_assign","","",94,[[]]],[11,"shr_assign","","",89,[[]]],[11,"shr_assign","","",91,[[]]],[11,"shr_assign","","",90,[[]]],[11,"shr_assign","","",87,[[]]],[11,"shr_assign","","",93,[[]]],[11,"shr_assign","","",85,[[]]],[11,"shr_assign","","",88,[[]]],[11,"shr_assign","","",86,[[]]],[11,"shr_assign","","",92,[[]]],[11,"neg","","",93,[[],["i64",3]]],[11,"neg","","",91,[[],["i16",3]]],[11,"neg","","",94,[[],["i128",3]]],[11,"neg","","",90,[[],["i8",3]]],[11,"neg","","",88,[[],["u64",3]]],[11,"neg","","",86,[[],["u16",3]]],[11,"neg","","",92,[[],["i32",3]]],[11,"neg","","",85,[[],["u8",3]]],[11,"neg","","",89,[[],["u128",3]]],[11,"neg","","",87,[[],["u32",3]]],[11,"add","","",85,[[["u8",3]],["u8",3]]],[11,"add","","",86,[[["u16",3]],["u16",3]]],[11,"add","","",87,[[["u32",3]],["u32",3]]],[11,"add","","",91,[[["i16",3]],["i16",3]]],[11,"add","","",93,[[["i64",3]],["i64",3]]],[11,"add","","",94,[[["i128",3]],["i128",3]]],[11,"add","","",90,[[["i8",3]],["i8",3]]],[11,"add","","",88,[[["u64",3]],["u64",3]]],[11,"add","","",92,[[["i32",3]],["i32",3]]],[11,"add","","",89,[[["u128",3]],["u128",3]]],[11,"bitxor_assign","","",86,[[["u16",3]]]],[11,"bitxor_assign","","",90,[[["i8",3]]]],[11,"bitxor_assign","","",88,[[["u64",3]]]],[11,"bitxor_assign","","",87,[[["u32",3]]]],[11,"bitxor_assign","","",93,[[["i64",3]]]],[11,"bitxor_assign","","",89,[[["u128",3]]]],[11,"bitxor_assign","","",94,[[["i128",3]]]],[11,"bitxor_assign","","",85,[[["u8",3]]]],[11,"bitxor_assign","","",91,[[["i16",3]]]],[11,"bitxor_assign","","",92,[[["i32",3]]]],[11,"create","","",108,[[]]],[11,"len","","",108,[[]]],[11,"iter","","",108,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",108,[[]]],[11,"update","","",108,[[]]],[11,"update_start","","",108,[[]]],[11,"create","","",109,[[]]],[11,"len","","",109,[[]]],[11,"iter","","",109,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",109,[[]]],[11,"update","","",109,[[]]],[11,"update_start","","",109,[[]]],[11,"create","","",110,[[]]],[11,"len","","",110,[[]]],[11,"iter","","",110,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",110,[[]]],[11,"update","","",110,[[]]],[11,"update_start","","",110,[[]]],[11,"create","","",111,[[]]],[11,"len","","",111,[[]]],[11,"iter","","",111,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",111,[[]]],[11,"update","","",111,[[]]],[11,"update_start","","",111,[[]]],[11,"create","","",112,[[]]],[11,"len","","",112,[[]]],[11,"iter","","",112,[[],["iter",3]]],[11,"update_slice","","",112,[[]]],[11,"update","","",112,[[]]],[11,"update_start","","",112,[[]]],[11,"create","","",113,[[]]],[11,"len","","",113,[[]]],[11,"iter","","",113,[[],["iter",3]]],[11,"update_slice","","",113,[[]]],[11,"update","","",113,[[]]],[11,"update_start","","",113,[[]]],[11,"create","","",114,[[]]],[11,"len","","",114,[[]]],[11,"iter","","",114,[[],["iter",3]]],[11,"update_slice","","",114,[[]]],[11,"update","","",114,[[]]],[11,"update_start","","",114,[[]]],[11,"create","","",115,[[]]],[11,"len","","",115,[[]]],[11,"iter","","",115,[[],["iter",3]]],[11,"update_slice","","",115,[[]]],[11,"update","","",115,[[]]],[11,"update_start","","",115,[[]]],[11,"create","","Get a new sequence of capacity `l`.",126,[[]]],[11,"len","","",126,[[]]],[11,"iter","","",126,[[],["iter",3]]],[11,"update_slice","","",126,[[]]],[11,"update","","",126,[[]]],[11,"update_start","","",126,[[]]],[11,"create","","Get a new sequence of capacity `l`.",127,[[]]],[11,"len","","",127,[[]]],[11,"iter","","",127,[[],["iter",3]]],[11,"update_slice","","",127,[[]]],[11,"update","","",127,[[]]],[11,"update_start","","",127,[[]]],[11,"create","","Get a new sequence of capacity `l`.",128,[[]]],[11,"len","","",128,[[]]],[11,"iter","","",128,[[],["iter",3]]],[11,"update_slice","","",128,[[]]],[11,"update","","",128,[[]]],[11,"update_start","","",128,[[]]],[11,"create","hacspec_lib","",0,[[]]],[11,"len","","",0,[[]]],[11,"iter","","",0,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",0,[[]]],[11,"update","","",0,[[]]],[11,"update_start","","",0,[[]]],[11,"create","","",1,[[]]],[11,"len","","",1,[[]]],[11,"iter","","",1,[[],["iter",3]]],[11,"update_slice","","",1,[[]]],[11,"update","","",1,[[]]],[11,"update_start","","",1,[[]]],[11,"create","","",2,[[]]],[11,"len","","",2,[[]]],[11,"iter","","",2,[[],[["u32",3],["iter",3]]]],[11,"update_slice","","",2,[[]]],[11,"update","","",2,[[]]],[11,"update_start","","",2,[[]]],[11,"create","","",3,[[]]],[11,"len","","",3,[[]]],[11,"iter","","",3,[[],["iter",3]]],[11,"update_slice","","",3,[[]]],[11,"update","","",3,[[]]],[11,"update_start","","",3,[[]]],[11,"create","","",4,[[]]],[11,"len","","",4,[[]]],[11,"iter","","",4,[[],["iter",3]]],[11,"update_slice","","",4,[[]]],[11,"update","","",4,[[]]],[11,"update_start","","",4,[[]]],[11,"ZERO","hacspec_lib::prelude","",130,[[]]],[11,"ONE","","",130,[[]]],[11,"TWO","","",130,[[]]],[11,"from_literal","","",130,[[]]],[11,"from_hex_string","","",130,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",130,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",130,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",130,[[]]],[11,"rotate_left","","",130,[[]]],[11,"rotate_right","","",130,[[]]],[11,"ZERO","","",85,[[]]],[11,"ONE","","",85,[[]]],[11,"TWO","","",85,[[]]],[11,"from_literal","","",85,[[]]],[11,"from_hex_string","","",85,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",85,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",85,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",85,[[]]],[11,"rotate_left","","",85,[[]]],[11,"rotate_right","","",85,[[]]],[11,"ZERO","","",86,[[]]],[11,"ONE","","",86,[[]]],[11,"TWO","","",86,[[]]],[11,"from_literal","","",86,[[]]],[11,"from_hex_string","","",86,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",86,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",86,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",86,[[]]],[11,"rotate_left","","",86,[[]]],[11,"rotate_right","","",86,[[]]],[11,"ZERO","","",87,[[]]],[11,"ONE","","",87,[[]]],[11,"TWO","","",87,[[]]],[11,"from_literal","","",87,[[]]],[11,"from_hex_string","","",87,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",87,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",87,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",87,[[]]],[11,"rotate_left","","",87,[[]]],[11,"rotate_right","","",87,[[]]],[11,"ZERO","","",88,[[]]],[11,"ONE","","",88,[[]]],[11,"TWO","","",88,[[]]],[11,"from_literal","","",88,[[]]],[11,"from_hex_string","","",88,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",88,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",88,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",88,[[]]],[11,"rotate_left","","",88,[[]]],[11,"rotate_right","","",88,[[]]],[11,"ZERO","","",89,[[]]],[11,"ONE","","",89,[[]]],[11,"TWO","","",89,[[]]],[11,"from_literal","","",89,[[]]],[11,"from_hex_string","","",89,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",89,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",89,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",89,[[]]],[11,"rotate_left","","",89,[[]]],[11,"rotate_right","","",89,[[]]],[11,"ZERO","","",90,[[]]],[11,"ONE","","",90,[[]]],[11,"TWO","","",90,[[]]],[11,"from_literal","","",90,[[]]],[11,"from_hex_string","","",90,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",90,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",90,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",90,[[]]],[11,"rotate_left","","",90,[[]]],[11,"rotate_right","","",90,[[]]],[11,"ZERO","","",91,[[]]],[11,"ONE","","",91,[[]]],[11,"TWO","","",91,[[]]],[11,"from_literal","","",91,[[]]],[11,"from_hex_string","","",91,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",91,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",91,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",91,[[]]],[11,"rotate_left","","",91,[[]]],[11,"rotate_right","","",91,[[]]],[11,"ZERO","","",92,[[]]],[11,"ONE","","",92,[[]]],[11,"TWO","","",92,[[]]],[11,"from_literal","","",92,[[]]],[11,"from_hex_string","","",92,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",92,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",92,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",92,[[]]],[11,"rotate_left","","",92,[[]]],[11,"rotate_right","","",92,[[]]],[11,"ZERO","","",93,[[]]],[11,"ONE","","",93,[[]]],[11,"TWO","","",93,[[]]],[11,"from_literal","","",93,[[]]],[11,"from_hex_string","","",93,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",93,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",93,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",93,[[]]],[11,"rotate_left","","",93,[[]]],[11,"rotate_right","","",93,[[]]],[11,"ZERO","","",94,[[]]],[11,"ONE","","",94,[[]]],[11,"TWO","","",94,[[]]],[11,"from_literal","","",94,[[]]],[11,"from_hex_string","","",94,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",94,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",94,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",94,[[]]],[11,"rotate_left","","",94,[[]]],[11,"rotate_right","","",94,[[]]],[11,"classify","","",130,[[]]],[11,"classify","","",85,[[]]],[11,"classify","","",86,[[]]],[11,"classify","","",87,[[]]],[11,"classify","","",88,[[]]],[11,"classify","","",89,[[]]],[11,"classify","","",90,[[]]],[11,"classify","","",91,[[]]],[11,"classify","","",92,[[]]],[11,"classify","","",93,[[]]],[11,"classify","","",94,[[]]],[11,"classify","","",90,[[]]],[11,"classify","","",91,[[]]],[11,"classify","","",92,[[]]],[11,"classify","","",93,[[]]],[11,"classify","","",94,[[]]],[11,"classify","","",85,[[]]],[11,"classify","","",86,[[]]],[11,"classify","","",87,[[]]],[11,"classify","","",88,[[]]],[11,"classify","","",89,[[]]],[11,"to_le_bytes","","",85,[[],[["u8",3],["seq",3]]]],[11,"to_be_bytes","","",85,[[],[["u8",3],["seq",3]]]],[11,"from_le_bytes","","",85,[[["seq",3]]]],[11,"from_be_bytes","","",85,[[["seq",3]]]],[11,"to_le_bytes","","",86,[[],[["u8",3],["seq",3]]]],[11,"to_be_bytes","","",86,[[],[["u8",3],["seq",3]]]],[11,"from_le_bytes","","",86,[[["seq",3]]]],[11,"from_be_bytes","","",86,[[["seq",3]]]],[11,"to_le_bytes","","",87,[[],[["u8",3],["seq",3]]]],[11,"to_be_bytes","","",87,[[],[["u8",3],["seq",3]]]],[11,"from_le_bytes","","",87,[[["seq",3]]]],[11,"from_be_bytes","","",87,[[["seq",3]]]],[11,"to_le_bytes","","",88,[[],[["u8",3],["seq",3]]]],[11,"to_be_bytes","","",88,[[],[["u8",3],["seq",3]]]],[11,"from_le_bytes","","",88,[[["seq",3]]]],[11,"from_be_bytes","","",88,[[["seq",3]]]],[11,"to_le_bytes","","",89,[[],[["u8",3],["seq",3]]]],[11,"to_be_bytes","","",89,[[],[["u8",3],["seq",3]]]],[11,"from_le_bytes","","",89,[[["seq",3]]]],[11,"from_be_bytes","","",89,[[["seq",3]]]],[11,"sub_mod","","(self - rhs) % n.",130,[[]]],[11,"add_mod","","`(self + rhs) % n`",130,[[]]],[11,"mul_mod","","`(self * rhs) % n`",130,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",130,[[]]],[11,"modulo","","`self % n`",130,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer",130,[[]]],[11,"absolute","","`|self|`",130,[[]]],[11,"sub_mod","","(self - rhs) % n.",85,[[]]],[11,"add_mod","","`(self + rhs) % n`",85,[[]]],[11,"mul_mod","","`(self * rhs) % n`",85,[[]]],[11,"pow_mod","","`(self ^ exp) % n` TODO: implement",85,[[]]],[11,"modulo","","`self % n`",85,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer",85,[[]]],[11,"absolute","","`|self|`",85,[[]]],[11,"sub_mod","","(self - rhs) % n.",86,[[]]],[11,"add_mod","","`(self + rhs) % n`",86,[[]]],[11,"mul_mod","","`(self * rhs) % n`",86,[[]]],[11,"pow_mod","","`(self ^ exp) % n` TODO: implement",86,[[]]],[11,"modulo","","`self % n`",86,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer",86,[[]]],[11,"absolute","","`|self|`",86,[[]]],[11,"sub_mod","","(self - rhs) % n.",87,[[]]],[11,"add_mod","","`(self + rhs) % n`",87,[[]]],[11,"mul_mod","","`(self * rhs) % n`",87,[[]]],[11,"pow_mod","","`(self ^ exp) % n` TODO: implement",87,[[]]],[11,"modulo","","`self % n`",87,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer",87,[[]]],[11,"absolute","","`|self|`",87,[[]]],[11,"sub_mod","","(self - rhs) % n.",88,[[]]],[11,"add_mod","","`(self + rhs) % n`",88,[[]]],[11,"mul_mod","","`(self * rhs) % n`",88,[[]]],[11,"pow_mod","","`(self ^ exp) % n` TODO: implement",88,[[]]],[11,"modulo","","`self % n`",88,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer",88,[[]]],[11,"absolute","","`|self|`",88,[[]]],[11,"sub_mod","","(self - rhs) % n.",89,[[]]],[11,"add_mod","","`(self + rhs) % n`",89,[[]]],[11,"mul_mod","","`(self * rhs) % n`",89,[[]]],[11,"pow_mod","","`(self ^ exp) % n` TODO: implement",89,[[]]],[11,"modulo","","`self % n`",89,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer",89,[[]]],[11,"absolute","","`|self|`",89,[[]]],[11,"sub_mod","","(self - rhs) % n.",90,[[]]],[11,"add_mod","","`(self + rhs) % n`",90,[[]]],[11,"mul_mod","","`(self * rhs) % n`",90,[[]]],[11,"pow_mod","","`(self ^ exp) % n` TODO: implement",90,[[]]],[11,"modulo","","`self % n`",90,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer FIXME:…",90,[[]]],[11,"absolute","","`|self|` TODO: Check if `abs` is ct",90,[[]]],[11,"sub_mod","","(self - rhs) % n.",91,[[]]],[11,"add_mod","","`(self + rhs) % n`",91,[[]]],[11,"mul_mod","","`(self * rhs) % n`",91,[[]]],[11,"pow_mod","","`(self ^ exp) % n` TODO: implement",91,[[]]],[11,"modulo","","`self % n`",91,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer FIXME:…",91,[[]]],[11,"absolute","","`|self|` TODO: Check if `abs` is ct",91,[[]]],[11,"sub_mod","","(self - rhs) % n.",92,[[]]],[11,"add_mod","","`(self + rhs) % n`",92,[[]]],[11,"mul_mod","","`(self * rhs) % n`",92,[[]]],[11,"pow_mod","","`(self ^ exp) % n` TODO: implement",92,[[]]],[11,"modulo","","`self % n`",92,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer FIXME:…",92,[[]]],[11,"absolute","","`|self|` TODO: Check if `abs` is ct",92,[[]]],[11,"sub_mod","","(self - rhs) % n.",93,[[]]],[11,"add_mod","","`(self + rhs) % n`",93,[[]]],[11,"mul_mod","","`(self * rhs) % n`",93,[[]]],[11,"pow_mod","","`(self ^ exp) % n` TODO: implement",93,[[]]],[11,"modulo","","`self % n`",93,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer FIXME:…",93,[[]]],[11,"absolute","","`|self|` TODO: Check if `abs` is ct",93,[[]]],[11,"sub_mod","","(self - rhs) % n.",94,[[]]],[11,"add_mod","","`(self + rhs) % n`",94,[[]]],[11,"mul_mod","","`(self * rhs) % n`",94,[[]]],[11,"pow_mod","","`(self ^ exp) % n` TODO: implement",94,[[]]],[11,"modulo","","`self % n`",94,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer FIXME:…",94,[[]]],[11,"absolute","","`|self|` TODO: Check if `abs` is ct",94,[[]]],[11,"sub_mod","","(self - rhs) % n.",108,[[]]],[11,"add_mod","","`(self + rhs) % n`",108,[[]]],[11,"mul_mod","","`(self * rhs) % n`",108,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",108,[[]]],[11,"modulo","","`self % n`",108,[[]]],[11,"signed_modulo","","",108,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",108,[[]]],[11,"sub_mod","","(self - rhs) % n.",109,[[]]],[11,"add_mod","","`(self + rhs) % n`",109,[[]]],[11,"mul_mod","","`(self * rhs) % n`",109,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",109,[[]]],[11,"modulo","","`self % n`",109,[[]]],[11,"signed_modulo","","",109,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",109,[[]]],[11,"sub_mod","","(self - rhs) % n.",110,[[]]],[11,"add_mod","","`(self + rhs) % n`",110,[[]]],[11,"mul_mod","","`(self * rhs) % n`",110,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",110,[[]]],[11,"modulo","","`self % n`",110,[[]]],[11,"signed_modulo","","",110,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",110,[[]]],[11,"sub_mod","","(self - rhs) % n.",111,[[]]],[11,"add_mod","","`(self + rhs) % n`",111,[[]]],[11,"mul_mod","","`(self * rhs) % n`",111,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",111,[[]]],[11,"modulo","","`self % n`",111,[[]]],[11,"signed_modulo","","",111,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",111,[[]]],[11,"sub_mod","","`(self - rhs) % n` (coefficient-wise)",112,[[]]],[11,"add_mod","","`(self + rhs) % n` (coefficient-wise)",112,[[]]],[11,"mul_mod","","`(self * rhs) % n` (coefficient-wise) Note that the…",112,[[]]],[11,"pow_mod","","`(self ^ exp) % n` (coefficient-wise) Note that the…",112,[[]]],[11,"modulo","","`self % n` (coefficient-wise)",112,[[]]],[11,"signed_modulo","","`self % n` (coefficient-wise)",112,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",112,[[]]],[11,"sub_mod","","`(self - rhs) % n` (coefficient-wise)",113,[[]]],[11,"add_mod","","`(self + rhs) % n` (coefficient-wise)",113,[[]]],[11,"mul_mod","","`(self * rhs) % n` (coefficient-wise) Note that the…",113,[[]]],[11,"pow_mod","","`(self ^ exp) % n` (coefficient-wise) Note that the…",113,[[]]],[11,"modulo","","`self % n` (coefficient-wise)",113,[[]]],[11,"signed_modulo","","`self % n` (coefficient-wise)",113,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",113,[[]]],[11,"sub_mod","","`(self - rhs) % n` (coefficient-wise)",114,[[]]],[11,"add_mod","","`(self + rhs) % n` (coefficient-wise)",114,[[]]],[11,"mul_mod","","`(self * rhs) % n` (coefficient-wise) Note that the…",114,[[]]],[11,"pow_mod","","`(self ^ exp) % n` (coefficient-wise) Note that the…",114,[[]]],[11,"modulo","","`self % n` (coefficient-wise)",114,[[]]],[11,"signed_modulo","","`self % n` (coefficient-wise)",114,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",114,[[]]],[11,"sub_mod","","`(self - rhs) % n` (coefficient-wise)",115,[[]]],[11,"add_mod","","`(self + rhs) % n` (coefficient-wise)",115,[[]]],[11,"mul_mod","","`(self * rhs) % n` (coefficient-wise) Note that the…",115,[[]]],[11,"pow_mod","","`(self ^ exp) % n` (coefficient-wise) Note that the…",115,[[]]],[11,"modulo","","`self % n` (coefficient-wise)",115,[[]]],[11,"signed_modulo","","`self % n` (coefficient-wise)",115,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",115,[[]]],[11,"sub_mod","","(self - rhs) % n.",127,[[]]],[11,"add_mod","","`(self + rhs) % n`",127,[[]]],[11,"mul_mod","","`(self * rhs) % n`",127,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",127,[[]]],[11,"modulo","","`self % n`",127,[[]]],[11,"signed_modulo","","",127,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",127,[[]]],[11,"sub_mod","","(self - rhs) % n.",128,[[]]],[11,"add_mod","","`(self + rhs) % n`",128,[[]]],[11,"mul_mod","","`(self * rhs) % n`",128,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",128,[[]]],[11,"modulo","","`self % n`",128,[[]]],[11,"signed_modulo","","",128,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",128,[[]]],[11,"sub_mod","hacspec_lib","(self - rhs) % n.",0,[[]]],[11,"add_mod","","`(self + rhs) % n`",0,[[]]],[11,"mul_mod","","`(self * rhs) % n`",0,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",0,[[]]],[11,"modulo","","`self % n`",0,[[]]],[11,"signed_modulo","","",0,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",0,[[]]],[11,"sub_mod","","`(self - rhs) % n` (coefficient-wise)",1,[[]]],[11,"add_mod","","`(self + rhs) % n` (coefficient-wise)",1,[[]]],[11,"mul_mod","","`(self * rhs) % n` (coefficient-wise) Note that the…",1,[[]]],[11,"pow_mod","","`(self ^ exp) % n` (coefficient-wise) Note that the…",1,[[]]],[11,"modulo","","`self % n` (coefficient-wise)",1,[[]]],[11,"signed_modulo","","`self % n` (coefficient-wise)",1,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",1,[[]]],[11,"sub_mod","","(self - rhs) % n.",2,[[]]],[11,"add_mod","","`(self + rhs) % n`",2,[[]]],[11,"mul_mod","","`(self * rhs) % n`",2,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",2,[[]]],[11,"modulo","","`self % n`",2,[[]]],[11,"signed_modulo","","",2,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",2,[[]]],[11,"sub_mod","","`(self - rhs) % n` (coefficient-wise)",3,[[]]],[11,"add_mod","","`(self + rhs) % n` (coefficient-wise)",3,[[]]],[11,"mul_mod","","`(self * rhs) % n` (coefficient-wise) Note that the…",3,[[]]],[11,"pow_mod","","`(self ^ exp) % n` (coefficient-wise) Note that the…",3,[[]]],[11,"modulo","","`self % n` (coefficient-wise)",3,[[]]],[11,"signed_modulo","","`self % n` (coefficient-wise)",3,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",3,[[]]],[11,"max_val","hacspec_lib::prelude","Return largest value that can be represented.",130,[[]]],[11,"wrap_add","","",130,[[]]],[11,"wrap_sub","","",130,[[]]],[11,"wrap_mul","","",130,[[]]],[11,"wrap_div","","",130,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",130,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",130,[[]]],[11,"divide","","Division.",130,[[]]],[11,"inv","","Invert self modulo n.",130,[[]]],[11,"equal","","",130,[[]]],[11,"greater_than","","",130,[[]]],[11,"greater_than_or_qual","","",130,[[]]],[11,"less_than","","",130,[[]]],[11,"less_than_or_equal","","",130,[[]]],[11,"not_equal_bm","","",130,[[]]],[11,"equal_bm","","",130,[[]]],[11,"greater_than_bm","","",130,[[]]],[11,"greater_than_or_equal_bm","","",130,[[]]],[11,"less_than_bm","","",130,[[]]],[11,"less_than_or_equal_bm","","",130,[[]]],[11,"max_val","","Return largest value that can be represented.",85,[[]]],[11,"wrap_add","","",85,[[]]],[11,"wrap_sub","","",85,[[]]],[11,"wrap_mul","","",85,[[]]],[11,"wrap_div","","",85,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`. Note: the exponent…",85,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`. Here both, base and…",85,[[]]],[11,"divide","","Division.",85,[[]]],[11,"inv","","Invert self modulo n. FIXME: make ct",85,[[]]],[11,"equal","","Declassifies",85,[[]]],[11,"greater_than","","Declassifies",85,[[]]],[11,"greater_than_or_qual","","Declassifies",85,[[]]],[11,"less_than","","Declassifies",85,[[]]],[11,"less_than_or_equal","","Declassifies",85,[[]]],[11,"not_equal_bm","","",85,[[]]],[11,"equal_bm","","",85,[[]]],[11,"greater_than_bm","","",85,[[]]],[11,"greater_than_or_equal_bm","","",85,[[]]],[11,"less_than_bm","","",85,[[]]],[11,"less_than_or_equal_bm","","",85,[[]]],[11,"max_val","","Return largest value that can be represented.",86,[[]]],[11,"wrap_add","","",86,[[]]],[11,"wrap_sub","","",86,[[]]],[11,"wrap_mul","","",86,[[]]],[11,"wrap_div","","",86,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`. Note: the exponent…",86,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`. Here both, base and…",86,[[]]],[11,"divide","","Division.",86,[[]]],[11,"inv","","Invert self modulo n. FIXME: make ct",86,[[]]],[11,"equal","","Declassifies",86,[[]]],[11,"greater_than","","Declassifies",86,[[]]],[11,"greater_than_or_qual","","Declassifies",86,[[]]],[11,"less_than","","Declassifies",86,[[]]],[11,"less_than_or_equal","","Declassifies",86,[[]]],[11,"not_equal_bm","","",86,[[]]],[11,"equal_bm","","",86,[[]]],[11,"greater_than_bm","","",86,[[]]],[11,"greater_than_or_equal_bm","","",86,[[]]],[11,"less_than_bm","","",86,[[]]],[11,"less_than_or_equal_bm","","",86,[[]]],[11,"max_val","","Return largest value that can be represented.",87,[[]]],[11,"wrap_add","","",87,[[]]],[11,"wrap_sub","","",87,[[]]],[11,"wrap_mul","","",87,[[]]],[11,"wrap_div","","",87,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`. Note: the exponent…",87,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`. Here both, base and…",87,[[]]],[11,"divide","","Division.",87,[[]]],[11,"inv","","Invert self modulo n. FIXME: make ct",87,[[]]],[11,"equal","","Declassifies",87,[[]]],[11,"greater_than","","Declassifies",87,[[]]],[11,"greater_than_or_qual","","Declassifies",87,[[]]],[11,"less_than","","Declassifies",87,[[]]],[11,"less_than_or_equal","","Declassifies",87,[[]]],[11,"not_equal_bm","","",87,[[]]],[11,"equal_bm","","",87,[[]]],[11,"greater_than_bm","","",87,[[]]],[11,"greater_than_or_equal_bm","","",87,[[]]],[11,"less_than_bm","","",87,[[]]],[11,"less_than_or_equal_bm","","",87,[[]]],[11,"max_val","","Return largest value that can be represented.",88,[[]]],[11,"wrap_add","","",88,[[]]],[11,"wrap_sub","","",88,[[]]],[11,"wrap_mul","","",88,[[]]],[11,"wrap_div","","",88,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`. Note: the exponent…",88,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`. Here both, base and…",88,[[]]],[11,"divide","","Division.",88,[[]]],[11,"inv","","Invert self modulo n. FIXME: make ct",88,[[]]],[11,"equal","","Declassifies",88,[[]]],[11,"greater_than","","Declassifies",88,[[]]],[11,"greater_than_or_qual","","Declassifies",88,[[]]],[11,"less_than","","Declassifies",88,[[]]],[11,"less_than_or_equal","","Declassifies",88,[[]]],[11,"not_equal_bm","","",88,[[]]],[11,"equal_bm","","",88,[[]]],[11,"greater_than_bm","","",88,[[]]],[11,"greater_than_or_equal_bm","","",88,[[]]],[11,"less_than_bm","","",88,[[]]],[11,"less_than_or_equal_bm","","",88,[[]]],[11,"max_val","","Return largest value that can be represented.",89,[[]]],[11,"wrap_add","","",89,[[]]],[11,"wrap_sub","","",89,[[]]],[11,"wrap_mul","","",89,[[]]],[11,"wrap_div","","",89,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`. Note: the exponent…",89,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`. Here both, base and…",89,[[]]],[11,"divide","","Division.",89,[[]]],[11,"inv","","Invert self modulo n. FIXME: make ct",89,[[]]],[11,"equal","","Declassifies",89,[[]]],[11,"greater_than","","Declassifies",89,[[]]],[11,"greater_than_or_qual","","Declassifies",89,[[]]],[11,"less_than","","Declassifies",89,[[]]],[11,"less_than_or_equal","","Declassifies",89,[[]]],[11,"not_equal_bm","","",89,[[]]],[11,"equal_bm","","",89,[[]]],[11,"greater_than_bm","","",89,[[]]],[11,"greater_than_or_equal_bm","","",89,[[]]],[11,"less_than_bm","","",89,[[]]],[11,"less_than_or_equal_bm","","",89,[[]]],[11,"max_val","","Return largest value that can be represented.",90,[[]]],[11,"wrap_add","","",90,[[]]],[11,"wrap_sub","","",90,[[]]],[11,"wrap_mul","","",90,[[]]],[11,"wrap_div","","",90,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`. Note: the exponent…",90,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`. Here both, base and…",90,[[]]],[11,"divide","","Division.",90,[[]]],[11,"inv","","Invert self modulo n. FIXME: make ct",90,[[]]],[11,"equal","","Declassifies",90,[[]]],[11,"greater_than","","Declassifies",90,[[]]],[11,"greater_than_or_qual","","Declassifies",90,[[]]],[11,"less_than","","Declassifies",90,[[]]],[11,"less_than_or_equal","","Declassifies",90,[[]]],[11,"not_equal_bm","","",90,[[]]],[11,"equal_bm","","",90,[[]]],[11,"greater_than_bm","","",90,[[]]],[11,"greater_than_or_equal_bm","","",90,[[]]],[11,"less_than_bm","","",90,[[]]],[11,"less_than_or_equal_bm","","",90,[[]]],[11,"max_val","","Return largest value that can be represented.",91,[[]]],[11,"wrap_add","","",91,[[]]],[11,"wrap_sub","","",91,[[]]],[11,"wrap_mul","","",91,[[]]],[11,"wrap_div","","",91,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`. Note: the exponent…",91,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`. Here both, base and…",91,[[]]],[11,"divide","","Division.",91,[[]]],[11,"inv","","Invert self modulo n. FIXME: make ct",91,[[]]],[11,"equal","","Declassifies",91,[[]]],[11,"greater_than","","Declassifies",91,[[]]],[11,"greater_than_or_qual","","Declassifies",91,[[]]],[11,"less_than","","Declassifies",91,[[]]],[11,"less_than_or_equal","","Declassifies",91,[[]]],[11,"not_equal_bm","","",91,[[]]],[11,"equal_bm","","",91,[[]]],[11,"greater_than_bm","","",91,[[]]],[11,"greater_than_or_equal_bm","","",91,[[]]],[11,"less_than_bm","","",91,[[]]],[11,"less_than_or_equal_bm","","",91,[[]]],[11,"max_val","","Return largest value that can be represented.",92,[[]]],[11,"wrap_add","","",92,[[]]],[11,"wrap_sub","","",92,[[]]],[11,"wrap_mul","","",92,[[]]],[11,"wrap_div","","",92,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`. Note: the exponent…",92,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`. Here both, base and…",92,[[]]],[11,"divide","","Division.",92,[[]]],[11,"inv","","Invert self modulo n. FIXME: make ct",92,[[]]],[11,"equal","","Declassifies",92,[[]]],[11,"greater_than","","Declassifies",92,[[]]],[11,"greater_than_or_qual","","Declassifies",92,[[]]],[11,"less_than","","Declassifies",92,[[]]],[11,"less_than_or_equal","","Declassifies",92,[[]]],[11,"not_equal_bm","","",92,[[]]],[11,"equal_bm","","",92,[[]]],[11,"greater_than_bm","","",92,[[]]],[11,"greater_than_or_equal_bm","","",92,[[]]],[11,"less_than_bm","","",92,[[]]],[11,"less_than_or_equal_bm","","",92,[[]]],[11,"max_val","","Return largest value that can be represented.",93,[[]]],[11,"wrap_add","","",93,[[]]],[11,"wrap_sub","","",93,[[]]],[11,"wrap_mul","","",93,[[]]],[11,"wrap_div","","",93,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`. Note: the exponent…",93,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`. Here both, base and…",93,[[]]],[11,"divide","","Division.",93,[[]]],[11,"inv","","Invert self modulo n. FIXME: make ct",93,[[]]],[11,"equal","","Declassifies",93,[[]]],[11,"greater_than","","Declassifies",93,[[]]],[11,"greater_than_or_qual","","Declassifies",93,[[]]],[11,"less_than","","Declassifies",93,[[]]],[11,"less_than_or_equal","","Declassifies",93,[[]]],[11,"not_equal_bm","","",93,[[]]],[11,"equal_bm","","",93,[[]]],[11,"greater_than_bm","","",93,[[]]],[11,"greater_than_or_equal_bm","","",93,[[]]],[11,"less_than_bm","","",93,[[]]],[11,"less_than_or_equal_bm","","",93,[[]]],[11,"max_val","","Return largest value that can be represented.",94,[[]]],[11,"wrap_add","","",94,[[]]],[11,"wrap_sub","","",94,[[]]],[11,"wrap_mul","","",94,[[]]],[11,"wrap_div","","",94,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`. Note: the exponent…",94,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`. Here both, base and…",94,[[]]],[11,"divide","","Division.",94,[[]]],[11,"inv","","Invert self modulo n. FIXME: make ct",94,[[]]],[11,"equal","","Declassifies",94,[[]]],[11,"greater_than","","Declassifies",94,[[]]],[11,"greater_than_or_qual","","Declassifies",94,[[]]],[11,"less_than","","Declassifies",94,[[]]],[11,"less_than_or_equal","","Declassifies",94,[[]]],[11,"not_equal_bm","","",94,[[]]],[11,"equal_bm","","",94,[[]]],[11,"greater_than_bm","","",94,[[]]],[11,"greater_than_or_equal_bm","","",94,[[]]],[11,"less_than_bm","","",94,[[]]],[11,"less_than_or_equal_bm","","",94,[[]]],[11,"max_val","","Return largest value that can be represented.",108,[[]]],[11,"wrap_add","","",108,[[]]],[11,"wrap_sub","","",108,[[]]],[11,"wrap_mul","","",108,[[]]],[11,"wrap_div","","",108,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",108,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",108,[[]]],[11,"divide","","Division.",108,[[]]],[11,"inv","","Invert self modulo n.",108,[[]]],[11,"equal","","",108,[[]]],[11,"greater_than","","",108,[[]]],[11,"greater_than_or_qual","","",108,[[]]],[11,"less_than","","",108,[[]]],[11,"less_than_or_equal","","",108,[[]]],[11,"not_equal_bm","","",108,[[]]],[11,"equal_bm","","",108,[[]]],[11,"greater_than_bm","","",108,[[]]],[11,"greater_than_or_equal_bm","","",108,[[]]],[11,"less_than_bm","","",108,[[]]],[11,"less_than_or_equal_bm","","",108,[[]]],[11,"max_val","","Return largest value that can be represented.",109,[[]]],[11,"wrap_add","","",109,[[]]],[11,"wrap_sub","","",109,[[]]],[11,"wrap_mul","","",109,[[]]],[11,"wrap_div","","",109,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",109,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",109,[[]]],[11,"divide","","Division.",109,[[]]],[11,"inv","","Invert self modulo n.",109,[[]]],[11,"equal","","",109,[[]]],[11,"greater_than","","",109,[[]]],[11,"greater_than_or_qual","","",109,[[]]],[11,"less_than","","",109,[[]]],[11,"less_than_or_equal","","",109,[[]]],[11,"not_equal_bm","","",109,[[]]],[11,"equal_bm","","",109,[[]]],[11,"greater_than_bm","","",109,[[]]],[11,"greater_than_or_equal_bm","","",109,[[]]],[11,"less_than_bm","","",109,[[]]],[11,"less_than_or_equal_bm","","",109,[[]]],[11,"max_val","","Return largest value that can be represented.",110,[[]]],[11,"wrap_add","","",110,[[]]],[11,"wrap_sub","","",110,[[]]],[11,"wrap_mul","","",110,[[]]],[11,"wrap_div","","",110,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",110,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",110,[[]]],[11,"divide","","Division.",110,[[]]],[11,"inv","","Invert self modulo n.",110,[[]]],[11,"equal","","",110,[[]]],[11,"greater_than","","",110,[[]]],[11,"greater_than_or_qual","","",110,[[]]],[11,"less_than","","",110,[[]]],[11,"less_than_or_equal","","",110,[[]]],[11,"not_equal_bm","","",110,[[]]],[11,"equal_bm","","",110,[[]]],[11,"greater_than_bm","","",110,[[]]],[11,"greater_than_or_equal_bm","","",110,[[]]],[11,"less_than_bm","","",110,[[]]],[11,"less_than_or_equal_bm","","",110,[[]]],[11,"max_val","","Return largest value that can be represented.",111,[[]]],[11,"wrap_add","","",111,[[]]],[11,"wrap_sub","","",111,[[]]],[11,"wrap_mul","","",111,[[]]],[11,"wrap_div","","",111,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",111,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",111,[[]]],[11,"divide","","Division.",111,[[]]],[11,"inv","","Invert self modulo n.",111,[[]]],[11,"equal","","",111,[[]]],[11,"greater_than","","",111,[[]]],[11,"greater_than_or_qual","","",111,[[]]],[11,"less_than","","",111,[[]]],[11,"less_than_or_equal","","",111,[[]]],[11,"not_equal_bm","","",111,[[]]],[11,"equal_bm","","",111,[[]]],[11,"greater_than_bm","","",111,[[]]],[11,"greater_than_or_equal_bm","","",111,[[]]],[11,"less_than_bm","","",111,[[]]],[11,"less_than_or_equal_bm","","",111,[[]]],[11,"max_val","","Return largest value that can be represented. Not…",112,[[]]],[11,"wrap_add","","`self + rhs` (coefficient-wise and wrapping)",112,[[]]],[11,"wrap_sub","","`self - rhs` (coefficient-wise and wrapping)",112,[[]]],[11,"wrap_mul","","`self * rhs` (coefficient-wise and wrapping)",112,[[]]],[11,"wrap_div","","`self + rhs` (coefficient-wise and wrapping)",112,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32` (coefficient-wise and…",112,[[]]],[11,"pow_self","","Not implemented.",112,[[]]],[11,"divide","","`self / rhs` (coefficient-wise and wrapping).",112,[[]]],[11,"inv","","Not implemented",112,[[]]],[11,"equal","","",112,[[]]],[11,"greater_than","","",112,[[]]],[11,"greater_than_or_qual","","",112,[[]]],[11,"less_than","","",112,[[]]],[11,"less_than_or_equal","","",112,[[]]],[11,"not_equal_bm","","",112,[[]]],[11,"equal_bm","","",112,[[]]],[11,"greater_than_bm","","",112,[[]]],[11,"greater_than_or_equal_bm","","",112,[[]]],[11,"less_than_bm","","",112,[[]]],[11,"less_than_or_equal_bm","","",112,[[]]],[11,"max_val","","Return largest value that can be represented. Not…",113,[[]]],[11,"wrap_add","","`self + rhs` (coefficient-wise and wrapping)",113,[[]]],[11,"wrap_sub","","`self - rhs` (coefficient-wise and wrapping)",113,[[]]],[11,"wrap_mul","","`self * rhs` (coefficient-wise and wrapping)",113,[[]]],[11,"wrap_div","","`self + rhs` (coefficient-wise and wrapping)",113,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32` (coefficient-wise and…",113,[[]]],[11,"pow_self","","Not implemented.",113,[[]]],[11,"divide","","`self / rhs` (coefficient-wise and wrapping).",113,[[]]],[11,"inv","","Not implemented",113,[[]]],[11,"equal","","",113,[[]]],[11,"greater_than","","",113,[[]]],[11,"greater_than_or_qual","","",113,[[]]],[11,"less_than","","",113,[[]]],[11,"less_than_or_equal","","",113,[[]]],[11,"not_equal_bm","","",113,[[]]],[11,"equal_bm","","",113,[[]]],[11,"greater_than_bm","","",113,[[]]],[11,"greater_than_or_equal_bm","","",113,[[]]],[11,"less_than_bm","","",113,[[]]],[11,"less_than_or_equal_bm","","",113,[[]]],[11,"max_val","","Return largest value that can be represented. Not…",114,[[]]],[11,"wrap_add","","`self + rhs` (coefficient-wise and wrapping)",114,[[]]],[11,"wrap_sub","","`self - rhs` (coefficient-wise and wrapping)",114,[[]]],[11,"wrap_mul","","`self * rhs` (coefficient-wise and wrapping)",114,[[]]],[11,"wrap_div","","`self + rhs` (coefficient-wise and wrapping)",114,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32` (coefficient-wise and…",114,[[]]],[11,"pow_self","","Not implemented.",114,[[]]],[11,"divide","","`self / rhs` (coefficient-wise and wrapping).",114,[[]]],[11,"inv","","Not implemented",114,[[]]],[11,"equal","","",114,[[]]],[11,"greater_than","","",114,[[]]],[11,"greater_than_or_qual","","",114,[[]]],[11,"less_than","","",114,[[]]],[11,"less_than_or_equal","","",114,[[]]],[11,"not_equal_bm","","",114,[[]]],[11,"equal_bm","","",114,[[]]],[11,"greater_than_bm","","",114,[[]]],[11,"greater_than_or_equal_bm","","",114,[[]]],[11,"less_than_bm","","",114,[[]]],[11,"less_than_or_equal_bm","","",114,[[]]],[11,"max_val","","Return largest value that can be represented. Not…",115,[[]]],[11,"wrap_add","","`self + rhs` (coefficient-wise and wrapping)",115,[[]]],[11,"wrap_sub","","`self - rhs` (coefficient-wise and wrapping)",115,[[]]],[11,"wrap_mul","","`self * rhs` (coefficient-wise and wrapping)",115,[[]]],[11,"wrap_div","","`self + rhs` (coefficient-wise and wrapping)",115,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32` (coefficient-wise and…",115,[[]]],[11,"pow_self","","Not implemented.",115,[[]]],[11,"divide","","`self / rhs` (coefficient-wise and wrapping).",115,[[]]],[11,"inv","","Not implemented",115,[[]]],[11,"equal","","",115,[[]]],[11,"greater_than","","",115,[[]]],[11,"greater_than_or_qual","","",115,[[]]],[11,"less_than","","",115,[[]]],[11,"less_than_or_equal","","",115,[[]]],[11,"not_equal_bm","","",115,[[]]],[11,"equal_bm","","",115,[[]]],[11,"greater_than_bm","","",115,[[]]],[11,"greater_than_or_equal_bm","","",115,[[]]],[11,"less_than_bm","","",115,[[]]],[11,"less_than_or_equal_bm","","",115,[[]]],[11,"max_val","","Return largest value that can be represented.",127,[[]]],[11,"wrap_add","","",127,[[]]],[11,"wrap_sub","","",127,[[]]],[11,"wrap_mul","","",127,[[]]],[11,"wrap_div","","",127,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",127,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",127,[[]]],[11,"divide","","Division.",127,[[]]],[11,"inv","","Invert self modulo n.",127,[[]]],[11,"equal","","",127,[[]]],[11,"greater_than","","",127,[[]]],[11,"greater_than_or_qual","","",127,[[]]],[11,"less_than","","",127,[[]]],[11,"less_than_or_equal","","",127,[[]]],[11,"not_equal_bm","","",127,[[]]],[11,"equal_bm","","",127,[[]]],[11,"greater_than_bm","","",127,[[]]],[11,"greater_than_or_equal_bm","","",127,[[]]],[11,"less_than_bm","","",127,[[]]],[11,"less_than_or_equal_bm","","",127,[[]]],[11,"max_val","","Return largest value that can be represented.",128,[[]]],[11,"wrap_add","","",128,[[]]],[11,"wrap_sub","","",128,[[]]],[11,"wrap_mul","","",128,[[]]],[11,"wrap_div","","",128,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",128,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",128,[[]]],[11,"divide","","Division.",128,[[]]],[11,"inv","","Invert self modulo n.",128,[[]]],[11,"equal","","",128,[[]]],[11,"greater_than","","",128,[[]]],[11,"greater_than_or_qual","","",128,[[]]],[11,"less_than","","",128,[[]]],[11,"less_than_or_equal","","",128,[[]]],[11,"not_equal_bm","","",128,[[]]],[11,"equal_bm","","",128,[[]]],[11,"greater_than_bm","","",128,[[]]],[11,"greater_than_or_equal_bm","","",128,[[]]],[11,"less_than_bm","","",128,[[]]],[11,"less_than_or_equal_bm","","",128,[[]]],[11,"max_val","hacspec_lib","Return largest value that can be represented.",0,[[]]],[11,"wrap_add","","",0,[[]]],[11,"wrap_sub","","",0,[[]]],[11,"wrap_mul","","",0,[[]]],[11,"wrap_div","","",0,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",0,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",0,[[]]],[11,"divide","","Division.",0,[[]]],[11,"inv","","Invert self modulo n.",0,[[]]],[11,"equal","","",0,[[]]],[11,"greater_than","","",0,[[]]],[11,"greater_than_or_qual","","",0,[[]]],[11,"less_than","","",0,[[]]],[11,"less_than_or_equal","","",0,[[]]],[11,"not_equal_bm","","",0,[[]]],[11,"equal_bm","","",0,[[]]],[11,"greater_than_bm","","",0,[[]]],[11,"greater_than_or_equal_bm","","",0,[[]]],[11,"less_than_bm","","",0,[[]]],[11,"less_than_or_equal_bm","","",0,[[]]],[11,"max_val","","Return largest value that can be represented. Not…",1,[[]]],[11,"wrap_add","","`self + rhs` (coefficient-wise and wrapping)",1,[[]]],[11,"wrap_sub","","`self - rhs` (coefficient-wise and wrapping)",1,[[]]],[11,"wrap_mul","","`self * rhs` (coefficient-wise and wrapping)",1,[[]]],[11,"wrap_div","","`self + rhs` (coefficient-wise and wrapping)",1,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32` (coefficient-wise and…",1,[[]]],[11,"pow_self","","Not implemented.",1,[[]]],[11,"divide","","`self / rhs` (coefficient-wise and wrapping).",1,[[]]],[11,"inv","","Not implemented",1,[[]]],[11,"equal","","",1,[[]]],[11,"greater_than","","",1,[[]]],[11,"greater_than_or_qual","","",1,[[]]],[11,"less_than","","",1,[[]]],[11,"less_than_or_equal","","",1,[[]]],[11,"not_equal_bm","","",1,[[]]],[11,"equal_bm","","",1,[[]]],[11,"greater_than_bm","","",1,[[]]],[11,"greater_than_or_equal_bm","","",1,[[]]],[11,"less_than_bm","","",1,[[]]],[11,"less_than_or_equal_bm","","",1,[[]]],[11,"max_val","","Return largest value that can be represented.",2,[[]]],[11,"wrap_add","","",2,[[]]],[11,"wrap_sub","","",2,[[]]],[11,"wrap_mul","","",2,[[]]],[11,"wrap_div","","",2,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",2,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",2,[[]]],[11,"divide","","Division.",2,[[]]],[11,"inv","","Invert self modulo n.",2,[[]]],[11,"equal","","",2,[[]]],[11,"greater_than","","",2,[[]]],[11,"greater_than_or_qual","","",2,[[]]],[11,"less_than","","",2,[[]]],[11,"less_than_or_equal","","",2,[[]]],[11,"not_equal_bm","","",2,[[]]],[11,"equal_bm","","",2,[[]]],[11,"greater_than_bm","","",2,[[]]],[11,"greater_than_or_equal_bm","","",2,[[]]],[11,"less_than_bm","","",2,[[]]],[11,"less_than_or_equal_bm","","",2,[[]]],[11,"max_val","","Return largest value that can be represented. Not…",3,[[]]],[11,"wrap_add","","`self + rhs` (coefficient-wise and wrapping)",3,[[]]],[11,"wrap_sub","","`self - rhs` (coefficient-wise and wrapping)",3,[[]]],[11,"wrap_mul","","`self * rhs` (coefficient-wise and wrapping)",3,[[]]],[11,"wrap_div","","`self + rhs` (coefficient-wise and wrapping)",3,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32` (coefficient-wise and…",3,[[]]],[11,"pow_self","","Not implemented.",3,[[]]],[11,"divide","","`self / rhs` (coefficient-wise and wrapping).",3,[[]]],[11,"inv","","Not implemented",3,[[]]],[11,"equal","","",3,[[]]],[11,"greater_than","","",3,[[]]],[11,"greater_than_or_qual","","",3,[[]]],[11,"less_than","","",3,[[]]],[11,"less_than_or_equal","","",3,[[]]],[11,"not_equal_bm","","",3,[[]]],[11,"equal_bm","","",3,[[]]],[11,"greater_than_bm","","",3,[[]]],[11,"greater_than_or_equal_bm","","",3,[[]]],[11,"less_than_bm","","",3,[[]]],[11,"less_than_or_equal_bm","","",3,[[]]],[11,"clone","hacspec_lib::prelude","",108,[[],["u16word",3]]],[11,"clone","","",109,[[],["u32word",3]]],[11,"clone","","",110,[[],["u64word",3]]],[11,"clone","","",111,[[],["u128word",3]]],[11,"clone","","",112,[[],["u16word",3]]],[11,"clone","","",113,[[],["u32word",3]]],[11,"clone","","",114,[[],["u64word",3]]],[11,"clone","","",115,[[],["u128word",3]]],[11,"clone","","",126,[[],["secretseq",3]]],[11,"clone","","",127,[[],["publicseq",3]]],[11,"clone","","",128,[[],["seq",3]]],[11,"clone","hacspec_lib","",0,[[],["docsecretbytes",3]]],[11,"clone","","",1,[[],["docpublicbytes",3]]],[11,"clone","","",2,[[],["docsecretarray",3]]],[11,"clone","","",3,[[],["docpublicarray",3]]],[11,"clone","","",4,[[],["docparametricarray",3]]],[11,"default","hacspec_lib::prelude","",108,[[]]],[11,"default","","",109,[[]]],[11,"default","","",110,[[]]],[11,"default","","",111,[[]]],[11,"default","","",112,[[]]],[11,"default","","",113,[[]]],[11,"default","","",114,[[]]],[11,"default","","",115,[[]]],[11,"default","","",126,[[],["secretseq",3]]],[11,"default","","",127,[[],["publicseq",3]]],[11,"default","","",128,[[],["seq",3]]],[11,"default","hacspec_lib","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[]]],[11,"default","","",3,[[]]],[11,"default","","",4,[[]]],[11,"cmp","hacspec_lib::prelude","",112,[[],["ordering",4]]],[11,"cmp","","",113,[[],["ordering",4]]],[11,"cmp","","",114,[[],["ordering",4]]],[11,"cmp","","",115,[[],["ordering",4]]],[11,"cmp","hacspec_lib","",1,[[],["ordering",4]]],[11,"cmp","","",3,[[],["ordering",4]]],[11,"eq","hacspec_lib::prelude","",112,[[]]],[11,"eq","","",113,[[]]],[11,"eq","","",114,[[]]],[11,"eq","","",115,[[]]],[11,"eq","","",128,[[]]],[11,"eq","hacspec_lib","",1,[[]]],[11,"eq","","",3,[[]]],[11,"partial_cmp","hacspec_lib::prelude","",112,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",113,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",114,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",115,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","hacspec_lib","",1,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",3,[[],[["option",4],["ordering",4]]]],[11,"fmt","hacspec_lib::prelude","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","","",111,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","","",113,[[["formatter",3]],["result",6]]],[11,"fmt","","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",126,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","hacspec_lib","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"div","hacspec_lib::prelude","",112,[[["u16word",3]],["u16word",3]]],[11,"div","","",113,[[["u32word",3]],["u32word",3]]],[11,"div","","",114,[[["u64word",3]],["u64word",3]]],[11,"div","","",115,[[["u128word",3]],["u128word",3]]],[11,"div","hacspec_lib","",1,[[["docpublicbytes",3]],["docpublicbytes",3]]],[11,"div","","",3,[[["docpublicarray",3]],["docpublicarray",3]]],[11,"rem","hacspec_lib::prelude","",108,[[["u16word",3]],["u16word",3]]],[11,"rem","","",109,[[["u32word",3]],["u32word",3]]],[11,"rem","","",110,[[["u64word",3]],["u64word",3]]],[11,"rem","","",111,[[["u128word",3]],["u128word",3]]],[11,"rem","hacspec_lib","",0,[[["docsecretbytes",3]],["docsecretbytes",3]]],[11,"rem","","",2,[[["docsecretarray",3]],["docsecretarray",3]]],[11,"sub","hacspec_lib::prelude","",108,[[["u16word",3]],["u16word",3]]],[11,"sub","","",109,[[["u32word",3]],["u32word",3]]],[11,"sub","","",110,[[["u64word",3]],["u64word",3]]],[11,"sub","","",111,[[["u128word",3]],["u128word",3]]],[11,"sub","","",112,[[["u16word",3]],["u16word",3]]],[11,"sub","","",113,[[["u32word",3]],["u32word",3]]],[11,"sub","","",114,[[["u64word",3]],["u64word",3]]],[11,"sub","","",115,[[["u128word",3]],["u128word",3]]],[11,"sub","","",127,[[]]],[11,"sub","","",128,[[]]],[11,"sub","hacspec_lib","",0,[[["docsecretbytes",3]],["docsecretbytes",3]]],[11,"sub","","",1,[[["docpublicbytes",3]],["docpublicbytes",3]]],[11,"sub","","",2,[[["docsecretarray",3]],["docsecretarray",3]]],[11,"sub","","",3,[[["docpublicarray",3]],["docpublicarray",3]]],[11,"add","hacspec_lib::prelude","",108,[[["u16word",3]],["u16word",3]]],[11,"add","","",109,[[["u32word",3]],["u32word",3]]],[11,"add","","",110,[[["u64word",3]],["u64word",3]]],[11,"add","","",111,[[["u128word",3]],["u128word",3]]],[11,"add","","",112,[[["u16word",3]],["u16word",3]]],[11,"add","","",113,[[["u32word",3]],["u32word",3]]],[11,"add","","",114,[[["u64word",3]],["u64word",3]]],[11,"add","","",115,[[["u128word",3]],["u128word",3]]],[11,"add","","",127,[[]]],[11,"add","","",128,[[]]],[11,"add","hacspec_lib","",0,[[["docsecretbytes",3]],["docsecretbytes",3]]],[11,"add","","",1,[[["docpublicbytes",3]],["docpublicbytes",3]]],[11,"add","","",2,[[["docsecretarray",3]],["docsecretarray",3]]],[11,"add","","",3,[[["docpublicarray",3]],["docpublicarray",3]]],[11,"mul","hacspec_lib::prelude","",108,[[["u16word",3]],["u16word",3]]],[11,"mul","","",109,[[["u32word",3]],["u32word",3]]],[11,"mul","","",110,[[["u64word",3]],["u64word",3]]],[11,"mul","","",111,[[["u128word",3]],["u128word",3]]],[11,"mul","","",112,[[["u16word",3]],["u16word",3]]],[11,"mul","","",113,[[["u32word",3]],["u32word",3]]],[11,"mul","","",114,[[["u64word",3]],["u64word",3]]],[11,"mul","","",115,[[["u128word",3]],["u128word",3]]],[11,"mul","","",127,[[]]],[11,"mul","","",128,[[]]],[11,"mul","hacspec_lib","",0,[[["docsecretbytes",3]],["docsecretbytes",3]]],[11,"mul","","",1,[[["docpublicbytes",3]],["docpublicbytes",3]]],[11,"mul","","",2,[[["docsecretarray",3]],["docsecretarray",3]]],[11,"mul","","",3,[[["docpublicarray",3]],["docpublicarray",3]]],[11,"not","hacspec_lib::prelude","",108,[[]]],[11,"not","","",109,[[]]],[11,"not","","",110,[[]]],[11,"not","","",111,[[]]],[11,"not","","",112,[[]]],[11,"not","","",113,[[]]],[11,"not","","",114,[[]]],[11,"not","","",115,[[]]],[11,"not","","",127,[[]]],[11,"not","","",128,[[]]],[11,"not","hacspec_lib","",0,[[]]],[11,"not","","",1,[[]]],[11,"not","","",2,[[]]],[11,"not","","",3,[[]]],[11,"bitand","hacspec_lib::prelude","",108,[[]]],[11,"bitand","","",109,[[]]],[11,"bitand","","",110,[[]]],[11,"bitand","","",111,[[]]],[11,"bitand","","",112,[[]]],[11,"bitand","","",113,[[]]],[11,"bitand","","",114,[[]]],[11,"bitand","","",115,[[]]],[11,"bitand","","",127,[[]]],[11,"bitand","","",128,[[]]],[11,"bitand","hacspec_lib","",0,[[]]],[11,"bitand","","",1,[[]]],[11,"bitand","","",2,[[]]],[11,"bitand","","",3,[[]]],[11,"bitor","hacspec_lib::prelude","",108,[[]]],[11,"bitor","","",109,[[]]],[11,"bitor","","",110,[[]]],[11,"bitor","","",111,[[]]],[11,"bitor","","",112,[[]]],[11,"bitor","","",113,[[]]],[11,"bitor","","",114,[[]]],[11,"bitor","","",115,[[]]],[11,"bitor","","",127,[[]]],[11,"bitor","","",128,[[]]],[11,"bitor","hacspec_lib","",0,[[]]],[11,"bitor","","",1,[[]]],[11,"bitor","","",2,[[]]],[11,"bitor","","",3,[[]]],[11,"bitxor","hacspec_lib::prelude","",108,[[]]],[11,"bitxor","","",109,[[]]],[11,"bitxor","","",110,[[]]],[11,"bitxor","","",111,[[]]],[11,"bitxor","","",112,[[]]],[11,"bitxor","","",113,[[]]],[11,"bitxor","","",114,[[]]],[11,"bitxor","","",115,[[]]],[11,"bitxor","","",127,[[]]],[11,"bitxor","","",128,[[]]],[11,"bitxor","hacspec_lib","",0,[[]]],[11,"bitxor","","",1,[[]]],[11,"bitxor","","",2,[[]]],[11,"bitxor","","",3,[[]]],[11,"shl","hacspec_lib::prelude","",108,[[]]],[11,"shl","","",109,[[]]],[11,"shl","","",110,[[]]],[11,"shl","","",111,[[]]],[11,"shl","","",112,[[]]],[11,"shl","","",113,[[]]],[11,"shl","","",114,[[]]],[11,"shl","","",115,[[]]],[11,"shl","","",127,[[]]],[11,"shl","","",128,[[]]],[11,"shl","hacspec_lib","",0,[[]]],[11,"shl","","",1,[[]]],[11,"shl","","",2,[[]]],[11,"shl","","",3,[[]]],[11,"shr","hacspec_lib::prelude","",108,[[]]],[11,"shr","","",109,[[]]],[11,"shr","","",110,[[]]],[11,"shr","","",111,[[]]],[11,"shr","","",112,[[]]],[11,"shr","","",113,[[]]],[11,"shr","","",114,[[]]],[11,"shr","","",115,[[]]],[11,"shr","","",127,[[]]],[11,"shr","","",128,[[]]],[11,"shr","hacspec_lib","",0,[[]]],[11,"shr","","",1,[[]]],[11,"shr","","",2,[[]]],[11,"shr","","",3,[[]]],[11,"index","hacspec_lib::prelude","",108,[[],["u8",3]]],[11,"index","","",108,[[],["u8",3]]],[11,"index","","",108,[[],["u8",3]]],[11,"index","","",108,[[],["u8",3]]],[11,"index","","",108,[[["rangefull",3]]]],[11,"index","","",109,[[],["u8",3]]],[11,"index","","",109,[[],["u8",3]]],[11,"index","","",109,[[],["u8",3]]],[11,"index","","",109,[[],["u8",3]]],[11,"index","","",109,[[["rangefull",3]]]],[11,"index","","",110,[[],["u8",3]]],[11,"index","","",110,[[],["u8",3]]],[11,"index","","",110,[[],["u8",3]]],[11,"index","","",110,[[],["u8",3]]],[11,"index","","",110,[[["rangefull",3]]]],[11,"index","","",111,[[],["u8",3]]],[11,"index","","",111,[[],["u8",3]]],[11,"index","","",111,[[],["u8",3]]],[11,"index","","",111,[[],["u8",3]]],[11,"index","","",111,[[["rangefull",3]]]],[11,"index","","",112,[[]]],[11,"index","","",112,[[]]],[11,"index","","",112,[[]]],[11,"index","","",112,[[]]],[11,"index","","",112,[[["rangefull",3]]]],[11,"index","","",113,[[]]],[11,"index","","",113,[[]]],[11,"index","","",113,[[]]],[11,"index","","",113,[[]]],[11,"index","","",113,[[["rangefull",3]]]],[11,"index","","",114,[[]]],[11,"index","","",114,[[]]],[11,"index","","",114,[[]]],[11,"index","","",114,[[]]],[11,"index","","",114,[[["rangefull",3]]]],[11,"index","","",115,[[]]],[11,"index","","",115,[[]]],[11,"index","","",115,[[]]],[11,"index","","",115,[[]]],[11,"index","","",115,[[["rangefull",3]]]],[11,"index","","",126,[[]]],[11,"index","","",126,[[]]],[11,"index","","",126,[[]]],[11,"index","","",126,[[]]],[11,"index","","",126,[[["range",3]]]],[11,"index","","",127,[[]]],[11,"index","","",127,[[]]],[11,"index","","",127,[[]]],[11,"index","","",127,[[]]],[11,"index","","",127,[[["range",3]]]],[11,"index","","",128,[[]]],[11,"index","","",128,[[]]],[11,"index","","",128,[[]]],[11,"index","","",128,[[]]],[11,"index","","",128,[[["range",3]]]],[11,"index","hacspec_lib","",0,[[],["u8",3]]],[11,"index","","",0,[[],["u8",3]]],[11,"index","","",0,[[],["u8",3]]],[11,"index","","",0,[[],["u8",3]]],[11,"index","","",0,[[["rangefull",3]]]],[11,"index","","",1,[[]]],[11,"index","","",1,[[]]],[11,"index","","",1,[[]]],[11,"index","","",1,[[]]],[11,"index","","",1,[[["rangefull",3]]]],[11,"index","","",2,[[],["u32",3]]],[11,"index","","",2,[[],["u32",3]]],[11,"index","","",2,[[],["u32",3]]],[11,"index","","",2,[[],["u32",3]]],[11,"index","","",2,[[["rangefull",3]]]],[11,"index","","",3,[[]]],[11,"index","","",3,[[]]],[11,"index","","",3,[[]]],[11,"index","","",3,[[]]],[11,"index","","",3,[[["rangefull",3]]]],[11,"index","","",4,[[]]],[11,"index","","",4,[[]]],[11,"index","","",4,[[]]],[11,"index","","",4,[[]]],[11,"index","","",4,[[["rangefull",3]]]],[11,"index_mut","hacspec_lib::prelude","",108,[[],["u8",3]]],[11,"index_mut","","",108,[[],["u8",3]]],[11,"index_mut","","",108,[[],["u8",3]]],[11,"index_mut","","",108,[[],["u8",3]]],[11,"index_mut","","",109,[[],["u8",3]]],[11,"index_mut","","",109,[[],["u8",3]]],[11,"index_mut","","",109,[[],["u8",3]]],[11,"index_mut","","",109,[[],["u8",3]]],[11,"index_mut","","",110,[[],["u8",3]]],[11,"index_mut","","",110,[[],["u8",3]]],[11,"index_mut","","",110,[[],["u8",3]]],[11,"index_mut","","",110,[[],["u8",3]]],[11,"index_mut","","",111,[[],["u8",3]]],[11,"index_mut","","",111,[[],["u8",3]]],[11,"index_mut","","",111,[[],["u8",3]]],[11,"index_mut","","",111,[[],["u8",3]]],[11,"index_mut","","",112,[[]]],[11,"index_mut","","",112,[[]]],[11,"index_mut","","",112,[[]]],[11,"index_mut","","",112,[[]]],[11,"index_mut","","",113,[[]]],[11,"index_mut","","",113,[[]]],[11,"index_mut","","",113,[[]]],[11,"index_mut","","",113,[[]]],[11,"index_mut","","",114,[[]]],[11,"index_mut","","",114,[[]]],[11,"index_mut","","",114,[[]]],[11,"index_mut","","",114,[[]]],[11,"index_mut","","",115,[[]]],[11,"index_mut","","",115,[[]]],[11,"index_mut","","",115,[[]]],[11,"index_mut","","",115,[[]]],[11,"index_mut","","",126,[[]]],[11,"index_mut","","",126,[[]]],[11,"index_mut","","",126,[[]]],[11,"index_mut","","",126,[[]]],[11,"index_mut","","",127,[[]]],[11,"index_mut","","",127,[[]]],[11,"index_mut","","",127,[[]]],[11,"index_mut","","",127,[[]]],[11,"index_mut","","",128,[[]]],[11,"index_mut","","",128,[[]]],[11,"index_mut","","",128,[[]]],[11,"index_mut","","",128,[[]]],[11,"index_mut","hacspec_lib","",0,[[],["u8",3]]],[11,"index_mut","","",0,[[],["u8",3]]],[11,"index_mut","","",0,[[],["u8",3]]],[11,"index_mut","","",0,[[],["u8",3]]],[11,"index_mut","","",1,[[]]],[11,"index_mut","","",1,[[]]],[11,"index_mut","","",1,[[]]],[11,"index_mut","","",1,[[]]],[11,"index_mut","","",2,[[],["u32",3]]],[11,"index_mut","","",2,[[],["u32",3]]],[11,"index_mut","","",2,[[],["u32",3]]],[11,"index_mut","","",2,[[],["u32",3]]],[11,"index_mut","","",3,[[]]],[11,"index_mut","","",3,[[]]],[11,"index_mut","","",3,[[]]],[11,"index_mut","","",3,[[]]],[11,"index_mut","","",4,[[]]],[11,"index_mut","","",4,[[]]],[11,"index_mut","","",4,[[]]],[11,"index_mut","","",4,[[]]],[11,"new","hacspec_lib::prelude","Creates and initializes a `BigUint`.",129,[[["vec",3]],["biguint",3]]],[11,"from_slice","","Creates and initializes a `BigUint`.",129,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a `BigUint`.",129,[[]]],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",129,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",129,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must…",129,[[],[["biguint",3],["option",4]]]],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input…",129,[[],[["biguint",3],["option",4]]]],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input…",129,[[],[["biguint",3],["option",4]]]],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in…",129,[[],["vec",3]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in…",129,[[],["vec",3]]],[11,"to_u32_digits","","Returns the `u32` digits representation of the `BigUint`…",129,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",129,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",129,[[],["vec",3]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",129,[[],["vec",3]]],[11,"bits","","Determines the fewest bits necessary to express the…",129,[[]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",129,[[["biguint",3]],["biguint",3]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",129,[[],["biguint",3]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",129,[[],["biguint",3]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",129,[[],["biguint",3]]],[11,"new","","Creates and initializes a BigInt.",130,[[["vec",3],["sign",4]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",130,[[["sign",4],["biguint",3]],["bigint",3]]],[11,"from_slice","","Creates and initializes a `BigInt`.",130,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a `BigInt`.",130,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",130,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",130,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes…",130,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes…",130,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a `BigInt`.",130,[[],[["option",4],["bigint",3]]]],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input…",130,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input…",130,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the…",130,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the…",130,[[]]],[11,"to_u32_digits","","Returns the sign and the `u32` digits representation of…",130,[[]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the…",130,[[],["vec",3]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the…",130,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",130,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",130,[[]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",130,[[]]],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",130,[[],["sign",4]]],[11,"bits","","Determines the fewest bits necessary to express the…",130,[[]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it\'s not…",130,[[],[["biguint",3],["option",4]]]],[11,"checked_add","","",130,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",130,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",130,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",130,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",130,[[["bigint",3]],["bigint",3]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",130,[[],["bigint",3]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",130,[[],["bigint",3]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",130,[[],["bigint",3]]],[11,"kind","","Outputs the detailed cause of parsing an integer failing.",131,[[],["interrorkind",4]]],[11,"reverse","","Reverses the `Ordering`.",44,[[],["ordering",4]]],[11,"then","","Chains two orderings.",44,[[["ordering",4]],["ordering",4]]],[11,"then_with","","Chains the ordering with the given function.",44,[[],["ordering",4]]],[11,"contains","","Returns `true` if `item` is contained in the range.",75,[[]]],[11,"is_empty","","Returns `true` if the range contains no items.",75,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",76,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",77,[[]]],[11,"cloned","","Map a `Bound<&T>` to a `Bound<T>` by cloning the contents…",78,[[],["bound",4]]],[11,"new","","Creates a new inclusive range. Equivalent to writing…",133,[[],["rangeinclusive",3]]],[11,"start","","Returns the lower bound of the range (inclusive).",133,[[]]],[11,"end","","Returns the upper bound of the range (inclusive).",133,[[]]],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper…",133,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",133,[[]]],[11,"is_empty","","Returns `true` if the range contains no items.",133,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",80,[[]]],[11,"break_value","","Converts the `ControlFlow` into an `Option` which is…",84,[[],["option",4]]],[11,"from_try","","Create a `ControlFlow` from any type implementing `Try`.",84,[[],["controlflow",4]]],[11,"into_try","","Convert a `ControlFlow` into any type implementing `Try`;",84,[[]]],[18,"CONTINUE","","It\'s frequently the case that there\'s no value needed with…",84,null],[18,"BREAK","","APIs like `try_for_each` don\'t need values with `Break`,…",84,null],[11,"comp_eq","","Produces a new integer which is all ones if the two…",85,[[["u8",3]],["u8",3]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",85,[[["u8",3]],["u8",3]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",85,[[["u8",3]],["u8",3]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",85,[[["u8",3]],["u8",3]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",85,[[["u8",3]],["u8",3]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",85,[[["u8",3]],["u8",3]]],[11,"classify","","",85,[[],["u8",3]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",85,[[]]],[11,"zero","","",85,[[],["u8",3]]],[11,"one","","",85,[[],["u8",3]]],[11,"ones","","",85,[[],["u8",3]]],[11,"from_le_bytes","","",85,[[],[["vec",3],["u8",3]]]],[11,"to_le_bytes","","",85,[[],[["vec",3],["u8",3]]]],[11,"from_be_bytes","","",85,[[],[["vec",3],["u8",3]]]],[11,"to_be_bytes","","",85,[[],[["vec",3],["u8",3]]]],[11,"max_value","","",85,[[],["u8",3]]],[11,"rotate_left","","",85,[[],["u8",3]]],[11,"rotate_right","","",85,[[],["u8",3]]],[11,"checked_add","","Warning: panics when overflow.",85,[[["u8",3]],["u8",3]]],[11,"checked_sub","","Warning: panics when overflow.",85,[[["u8",3]],["u8",3]]],[11,"checked_mul","","Warning: panics when overflow.",85,[[["u8",3]],["u8",3]]],[11,"comp_eq","","Produces a new integer which is all ones if the two…",86,[[["u16",3]],["u16",3]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",86,[[["u16",3]],["u16",3]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",86,[[["u16",3]],["u16",3]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",86,[[["u16",3]],["u16",3]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",86,[[["u16",3]],["u16",3]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",86,[[["u16",3]],["u16",3]]],[11,"classify","","",86,[[],["u16",3]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",86,[[]]],[11,"zero","","",86,[[],["u16",3]]],[11,"one","","",86,[[],["u16",3]]],[11,"ones","","",86,[[],["u16",3]]],[11,"from_le_bytes","","",86,[[],[["vec",3],["u16",3]]]],[11,"to_le_bytes","","",86,[[],[["vec",3],["u8",3]]]],[11,"from_be_bytes","","",86,[[],[["vec",3],["u16",3]]]],[11,"to_be_bytes","","",86,[[],[["vec",3],["u8",3]]]],[11,"max_value","","",86,[[],["u16",3]]],[11,"rotate_left","","",86,[[],["u16",3]]],[11,"rotate_right","","",86,[[],["u16",3]]],[11,"checked_add","","Warning: panics when overflow.",86,[[["u16",3]],["u16",3]]],[11,"checked_sub","","Warning: panics when overflow.",86,[[["u16",3]],["u16",3]]],[11,"checked_mul","","Warning: panics when overflow.",86,[[["u16",3]],["u16",3]]],[11,"comp_eq","","Produces a new integer which is all ones if the two…",87,[[["u32",3]],["u32",3]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",87,[[["u32",3]],["u32",3]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",87,[[["u32",3]],["u32",3]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",87,[[["u32",3]],["u32",3]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",87,[[["u32",3]],["u32",3]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",87,[[["u32",3]],["u32",3]]],[11,"classify","","",87,[[],["u32",3]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",87,[[]]],[11,"zero","","",87,[[],["u32",3]]],[11,"one","","",87,[[],["u32",3]]],[11,"ones","","",87,[[],["u32",3]]],[11,"from_le_bytes","","",87,[[],[["vec",3],["u32",3]]]],[11,"to_le_bytes","","",87,[[],[["vec",3],["u8",3]]]],[11,"from_be_bytes","","",87,[[],[["vec",3],["u32",3]]]],[11,"to_be_bytes","","",87,[[],[["vec",3],["u8",3]]]],[11,"max_value","","",87,[[],["u32",3]]],[11,"rotate_left","","",87,[[],["u32",3]]],[11,"rotate_right","","",87,[[],["u32",3]]],[11,"checked_add","","Warning: panics when overflow.",87,[[["u32",3]],["u32",3]]],[11,"checked_sub","","Warning: panics when overflow.",87,[[["u32",3]],["u32",3]]],[11,"checked_mul","","Warning: panics when overflow.",87,[[["u32",3]],["u32",3]]],[11,"comp_eq","","Produces a new integer which is all ones if the two…",88,[[["u64",3]],["u64",3]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",88,[[["u64",3]],["u64",3]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",88,[[["u64",3]],["u64",3]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",88,[[["u64",3]],["u64",3]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",88,[[["u64",3]],["u64",3]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",88,[[["u64",3]],["u64",3]]],[11,"classify","","",88,[[],["u64",3]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",88,[[]]],[11,"zero","","",88,[[],["u64",3]]],[11,"one","","",88,[[],["u64",3]]],[11,"ones","","",88,[[],["u64",3]]],[11,"from_le_bytes","","",88,[[],[["vec",3],["u64",3]]]],[11,"to_le_bytes","","",88,[[],[["vec",3],["u8",3]]]],[11,"from_be_bytes","","",88,[[],[["vec",3],["u64",3]]]],[11,"to_be_bytes","","",88,[[],[["vec",3],["u8",3]]]],[11,"max_value","","",88,[[],["u64",3]]],[11,"rotate_left","","",88,[[],["u64",3]]],[11,"rotate_right","","",88,[[],["u64",3]]],[11,"checked_add","","Warning: panics when overflow.",88,[[["u64",3]],["u64",3]]],[11,"checked_sub","","Warning: panics when overflow.",88,[[["u64",3]],["u64",3]]],[11,"checked_mul","","Warning: panics when overflow.",88,[[["u64",3]],["u64",3]]],[11,"comp_eq","","Produces a new integer which is all ones if the two…",89,[[["u128",3]],["u128",3]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",89,[[["u128",3]],["u128",3]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",89,[[["u128",3]],["u128",3]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",89,[[["u128",3]],["u128",3]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",89,[[["u128",3]],["u128",3]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",89,[[["u128",3]],["u128",3]]],[11,"classify","","",89,[[],["u128",3]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",89,[[]]],[11,"zero","","",89,[[],["u128",3]]],[11,"one","","",89,[[],["u128",3]]],[11,"ones","","",89,[[],["u128",3]]],[11,"from_le_bytes","","",89,[[],[["vec",3],["u128",3]]]],[11,"to_le_bytes","","",89,[[],[["vec",3],["u8",3]]]],[11,"from_be_bytes","","",89,[[],[["vec",3],["u128",3]]]],[11,"to_be_bytes","","",89,[[],[["vec",3],["u8",3]]]],[11,"max_value","","",89,[[],["u128",3]]],[11,"rotate_left","","",89,[[],["u128",3]]],[11,"rotate_right","","",89,[[],["u128",3]]],[11,"checked_add","","Warning: panics when overflow.",89,[[["u128",3]],["u128",3]]],[11,"checked_sub","","Warning: panics when overflow.",89,[[["u128",3]],["u128",3]]],[11,"checked_mul","","Warning: panics when overflow.",89,[[["u128",3]],["u128",3]]],[11,"comp_eq","","",90,[[["i8",3]],["i8",3]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",90,[[["i8",3]],["i8",3]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",90,[[["i8",3]],["i8",3]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",90,[[["i8",3]],["i8",3]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",90,[[["i8",3]],["i8",3]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",90,[[["i8",3]],["i8",3]]],[11,"classify","","",90,[[],["i8",3]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",90,[[]]],[11,"zero","","",90,[[],["i8",3]]],[11,"one","","",90,[[],["i8",3]]],[11,"ones","","",90,[[],["i8",3]]],[11,"from_le_bytes","","",90,[[],[["vec",3],["i8",3]]]],[11,"to_le_bytes","","",90,[[],[["vec",3],["u8",3]]]],[11,"from_be_bytes","","",90,[[],[["vec",3],["i8",3]]]],[11,"to_be_bytes","","",90,[[],[["vec",3],["u8",3]]]],[11,"max_value","","",90,[[],["i8",3]]],[11,"rotate_left","","",90,[[],["i8",3]]],[11,"rotate_right","","",90,[[],["i8",3]]],[11,"checked_add","","Warning: panics when overflow.",90,[[["i8",3]],["i8",3]]],[11,"checked_sub","","Warning: panics when overflow.",90,[[["i8",3]],["i8",3]]],[11,"checked_mul","","Warning: panics when overflow.",90,[[["i8",3]],["i8",3]]],[11,"comp_eq","","",91,[[["i16",3]],["i16",3]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",91,[[["i16",3]],["i16",3]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",91,[[["i16",3]],["i16",3]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",91,[[["i16",3]],["i16",3]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",91,[[["i16",3]],["i16",3]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",91,[[["i16",3]],["i16",3]]],[11,"classify","","",91,[[],["i16",3]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",91,[[]]],[11,"zero","","",91,[[],["i16",3]]],[11,"one","","",91,[[],["i16",3]]],[11,"ones","","",91,[[],["i16",3]]],[11,"from_le_bytes","","",91,[[],[["i16",3],["vec",3]]]],[11,"to_le_bytes","","",91,[[],[["vec",3],["u8",3]]]],[11,"from_be_bytes","","",91,[[],[["i16",3],["vec",3]]]],[11,"to_be_bytes","","",91,[[],[["vec",3],["u8",3]]]],[11,"max_value","","",91,[[],["i16",3]]],[11,"rotate_left","","",91,[[],["i16",3]]],[11,"rotate_right","","",91,[[],["i16",3]]],[11,"checked_add","","Warning: panics when overflow.",91,[[["i16",3]],["i16",3]]],[11,"checked_sub","","Warning: panics when overflow.",91,[[["i16",3]],["i16",3]]],[11,"checked_mul","","Warning: panics when overflow.",91,[[["i16",3]],["i16",3]]],[11,"comp_eq","","",92,[[["i32",3]],["i32",3]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",92,[[["i32",3]],["i32",3]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",92,[[["i32",3]],["i32",3]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",92,[[["i32",3]],["i32",3]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",92,[[["i32",3]],["i32",3]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",92,[[["i32",3]],["i32",3]]],[11,"classify","","",92,[[],["i32",3]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",92,[[]]],[11,"zero","","",92,[[],["i32",3]]],[11,"one","","",92,[[],["i32",3]]],[11,"ones","","",92,[[],["i32",3]]],[11,"from_le_bytes","","",92,[[],[["vec",3],["i32",3]]]],[11,"to_le_bytes","","",92,[[],[["vec",3],["u8",3]]]],[11,"from_be_bytes","","",92,[[],[["vec",3],["i32",3]]]],[11,"to_be_bytes","","",92,[[],[["vec",3],["u8",3]]]],[11,"max_value","","",92,[[],["i32",3]]],[11,"rotate_left","","",92,[[],["i32",3]]],[11,"rotate_right","","",92,[[],["i32",3]]],[11,"checked_add","","Warning: panics when overflow.",92,[[["i32",3]],["i32",3]]],[11,"checked_sub","","Warning: panics when overflow.",92,[[["i32",3]],["i32",3]]],[11,"checked_mul","","Warning: panics when overflow.",92,[[["i32",3]],["i32",3]]],[11,"comp_eq","","",93,[[["i64",3]],["i64",3]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",93,[[["i64",3]],["i64",3]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",93,[[["i64",3]],["i64",3]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",93,[[["i64",3]],["i64",3]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",93,[[["i64",3]],["i64",3]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",93,[[["i64",3]],["i64",3]]],[11,"classify","","",93,[[],["i64",3]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",93,[[]]],[11,"zero","","",93,[[],["i64",3]]],[11,"one","","",93,[[],["i64",3]]],[11,"ones","","",93,[[],["i64",3]]],[11,"from_le_bytes","","",93,[[],[["i64",3],["vec",3]]]],[11,"to_le_bytes","","",93,[[],[["vec",3],["u8",3]]]],[11,"from_be_bytes","","",93,[[],[["i64",3],["vec",3]]]],[11,"to_be_bytes","","",93,[[],[["vec",3],["u8",3]]]],[11,"max_value","","",93,[[],["i64",3]]],[11,"rotate_left","","",93,[[],["i64",3]]],[11,"rotate_right","","",93,[[],["i64",3]]],[11,"checked_add","","Warning: panics when overflow.",93,[[["i64",3]],["i64",3]]],[11,"checked_sub","","Warning: panics when overflow.",93,[[["i64",3]],["i64",3]]],[11,"checked_mul","","Warning: panics when overflow.",93,[[["i64",3]],["i64",3]]],[11,"comp_eq","","",94,[[["i128",3]],["i128",3]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",94,[[["i128",3]],["i128",3]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",94,[[["i128",3]],["i128",3]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",94,[[["i128",3]],["i128",3]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",94,[[["i128",3]],["i128",3]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",94,[[["i128",3]],["i128",3]]],[11,"classify","","",94,[[],["i128",3]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",94,[[]]],[11,"zero","","",94,[[],["i128",3]]],[11,"one","","",94,[[],["i128",3]]],[11,"ones","","",94,[[],["i128",3]]],[11,"from_le_bytes","","",94,[[],[["vec",3],["i128",3]]]],[11,"to_le_bytes","","",94,[[],[["vec",3],["u8",3]]]],[11,"from_be_bytes","","",94,[[],[["vec",3],["i128",3]]]],[11,"to_be_bytes","","",94,[[],[["vec",3],["u8",3]]]],[11,"max_value","","",94,[[],["i128",3]]],[11,"rotate_left","","",94,[[],["i128",3]]],[11,"rotate_right","","",94,[[],["i128",3]]],[11,"checked_add","","Warning: panics when overflow.",94,[[["i128",3]],["i128",3]]],[11,"checked_sub","","Warning: panics when overflow.",94,[[["i128",3]],["i128",3]]],[11,"checked_mul","","Warning: panics when overflow.",94,[[["i128",3]],["i128",3]]],[11,"as_str","hacspec_lib::prelude::fmt","Get the formatted string, if it has no arguments to be…",135,[[],["option",4]]],[11,"entry","","Adds a new entry to the list output.",136,[[["debug",8]],["debuglist",3]]],[11,"entries","","Adds the contents of an iterator of entries to the list…",136,[[],["debuglist",3]]],[11,"finish","","Finishes output and returns any error encountered.",136,[[],[["error",3],["result",4]]]],[11,"entry","","Adds a new entry to the map output.",137,[[["debug",8]],["debugmap",3]]],[11,"key","","Adds the key part of a new entry to the map output.",137,[[["debug",8]],["debugmap",3]]],[11,"value","","Adds the value part of a new entry to the map output.",137,[[["debug",8]],["debugmap",3]]],[11,"entries","","Adds the contents of an iterator of entries to the map…",137,[[],["debugmap",3]]],[11,"finish","","Finishes output and returns any error encountered.",137,[[],[["error",3],["result",4]]]],[11,"entry","","Adds a new entry to the set output.",138,[[["debug",8]],["debugset",3]]],[11,"entries","","Adds the contents of an iterator of entries to the set…",138,[[],["debugset",3]]],[11,"finish","","Finishes output and returns any error encountered.",138,[[],[["error",3],["result",4]]]],[11,"field","","Adds a new field to the generated struct output.",139,[[["debug",8]],["debugstruct",3]]],[11,"finish_non_exhaustive","","Marks the struct as non-exhaustive, indicating to the…",139,[[],[["error",3],["result",4]]]],[11,"finish","","Finishes output and returns any error encountered.",139,[[],[["error",3],["result",4]]]],[11,"field","","Adds a new field to the generated tuple struct output.",140,[[["debug",8]],["debugtuple",3]]],[11,"finish","","Finishes output and returns any error encountered.",140,[[],[["error",3],["result",4]]]],[11,"pad_integral","","Performs the correct padding for an integer which has…",141,[[],[["error",3],["result",4]]]],[11,"pad","","This function takes a string slice and emits it to the…",141,[[],[["error",3],["result",4]]]],[11,"write_str","","Writes some data to the underlying buffer contained within…",141,[[],[["error",3],["result",4]]]],[11,"write_fmt","","Writes some formatted information into this instance.",141,[[["arguments",3]],[["error",3],["result",4]]]],[11,"flags","","Flags for formatting",141,[[]]],[11,"fill","","Character used as \'fill\' whenever there is alignment.",141,[[]]],[11,"align","","Flag indicating what form of alignment was requested.",141,[[],[["alignment",4],["option",4]]]],[11,"width","","Optionally specified integer width that the output should…",141,[[],["option",4]]],[11,"precision","","Optionally specified precision for numeric types.…",141,[[],["option",4]]],[11,"sign_plus","","Determines if the `+` flag was specified.",141,[[]]],[11,"sign_minus","","Determines if the `-` flag was specified.",141,[[]]],[11,"alternate","","Determines if the `#` flag was specified.",141,[[]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",141,[[]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with…",141,[[],["debugstruct",3]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with…",141,[[],["debugtuple",3]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with…",141,[[],["debuglist",3]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with…",141,[[],["debugset",3]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with…",141,[[],["debugmap",3]]]],"p":[[3,"DocSecretBytes"],[3,"DocPublicBytes"],[3,"DocSecretArray"],[3,"DocPublicArray"],[3,"DocParametricArray"],[4,"Sign"],[8,"CheckedSub"],[8,"Zero"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[4,"Ordering"],[8,"Add"],[8,"Div"],[8,"Mul"],[8,"Neg"],[8,"Rem"],[8,"Sub"],[8,"AddAssign"],[8,"DivAssign"],[8,"MulAssign"],[8,"RemAssign"],[8,"SubAssign"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Not"],[8,"Shl"],[8,"Shr"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Deref"],[8,"DerefMut"],[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Index"],[8,"IndexMut"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Bound"],[8,"RangeBounds"],[3,"RangeToInclusive"],[8,"Try"],[8,"Generator"],[4,"GeneratorState"],[4,"ControlFlow"],[3,"U8"],[3,"U16"],[3,"U32"],[3,"U64"],[3,"U128"],[3,"I8"],[3,"I16"],[3,"I32"],[3,"I64"],[3,"I128"],[8,"FromStr"],[8,"PartialEq"],[4,"Alignment"],[8,"Binary"],[8,"Octal"],[8,"Debug"],[8,"Display"],[8,"Write"],[8,"LowerExp"],[8,"UpperExp"],[8,"LowerHex"],[8,"Pointer"],[8,"UpperHex"],[3,"U16Word"],[3,"U32Word"],[3,"U64Word"],[3,"U128Word"],[3,"u16Word"],[3,"u32Word"],[3,"u64Word"],[3,"u128Word"],[8,"SeqTrait"],[8,"Integer"],[8,"SecretInteger"],[8,"SecretIntegerCopy"],[8,"PublicInteger"],[8,"PublicIntegerCopy"],[8,"UnsignedSecretInteger"],[8,"UnsignedPublicInteger"],[8,"ModNumeric"],[8,"Numeric"],[3,"SecretSeq"],[3,"PublicSeq"],[3,"Seq"],[3,"BigUint"],[3,"BigInt"],[3,"ParseIntError"],[3,"RangeFull"],[3,"RangeInclusive"],[3,"Error"],[3,"Arguments"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"Formatter"]],"a":{"!=":[833],"%":[580,592,729,741],"%=":[592,741],"&":[596,745],"&*":[624,773],"&=":[614,763],"*":[574,590,624,627,723,739,773,776],"*=":[590,739],"+":[568,586,717,735],"+=":[586,735],"-":[577,583,594,726,732,743],"-=":[594,743],"..":[643,646,648,649,792,795,797,798],"..=":[659,660,808,809],"/":[571,588,720,737],"/=":[588,737],"<<":[608,757],"<<=":[620,769],"==":[833],">>":[611,760],">>=":[622,771],"?":[662,811],"[":[638,641,787,790],"[]":[638,641,787,790],"]":[638,641,787,790],"^":[602,751],"^=":[618,767],"{:?}":[850,876],"{}":[853],"|":[599,748],"|=":[616,765]}},\
"main":{"doc":"This is a demo of hacspec for the HACS workshop on…","i":[],"p":[]},\
"num":{"doc":"A collection of numeric types and traits for Rust.","i":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[]]],[11,"div_ceil","","Ceiled integer division.",1,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",1,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",1,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",1,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[]]],[10,"is_even","","Returns `true` if the number is even.",1,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",1,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",1,[[]]],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",2,[[]]],[10,"infinity","","Returns the infinite value.",2,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",2,[[]]],[10,"neg_zero","","Returns `-0.0`.",2,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",2,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",2,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",2,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",2,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",2,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",2,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",2,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",2,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",2,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",2,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",2,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",2,[[]]],[10,"trunc","","Return the integer part of a number.",2,[[]]],[10,"fract","","Returns the fractional part of a number.",2,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",2,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",2,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",2,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",2,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",2,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",2,[[]]],[10,"powi","","Raise a number to an integer power.",2,[[]]],[10,"powf","","Raise a number to a floating point power.",2,[[]]],[10,"sqrt","","Take the square root of a number.",2,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",2,[[]]],[10,"exp2","","Returns `2^(self)`.",2,[[]]],[10,"ln","","Returns the natural logarithm of the number.",2,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",2,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",2,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",2,[[]]],[11,"to_degrees","","Converts radians to degrees.",2,[[]]],[11,"to_radians","","Converts degrees to radians.",2,[[]]],[10,"max","","Returns the maximum of the two numbers.",2,[[]]],[10,"min","","Returns the minimum of the two numbers.",2,[[]]],[10,"abs_sub","","The positive difference of two numbers.",2,[[]]],[10,"cbrt","","Take the cubic root of a number.",2,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",2,[[]]],[10,"sin","","Computes the sine of a number (in radians).",2,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",2,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",2,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",2,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",2,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",2,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",2,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",2,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",2,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",2,[[]]],[10,"sinh","","Hyperbolic sine function.",2,[[]]],[10,"cosh","","Hyperbolic cosine function.",2,[[]]],[10,"tanh","","Hyperbolic tangent function.",2,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",2,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",2,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",2,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",2,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",3,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[]]],[5,"cast","num","Cast from one machine scalar to another.",null,[[],["option",4]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[0,"pow","","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",7,null],[10,"pow","","Returns `self` to the power `rhs`.",7,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"pow","num","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,[[]]],[10,"max_value","","returns the largest finite number this type can represent",8,[[]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",9,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",10,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",11,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",12,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[8,"Num","","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",13,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",13,[[],["result",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[],["option",4]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",14,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",14,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",14,[[]]],[8,"PrimInt","","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",15,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",15,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",15,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",15,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",15,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",15,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",15,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",15,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",15,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",15,[[]]],[8,"Saturating","","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",16,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",16,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",17,[[]]],[10,"abs_sub","","The positive difference of two numbers.",17,[[]]],[10,"signum","","Returns the sign of the number.",17,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",17,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",17,[[]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",3,[[],["option",4]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",18,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",18,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",18,[[]]],[0,"bigint","","",null,null],[3,"ParseBigIntError","num::bigint","",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",19,[[],[["biguint",3],["option",4]]]],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`\'s composing element.",null,null],[13,"Minus","","",20,null],[13,"NoSign","","",20,null],[13,"Plus","","",20,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`. This…",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",21,[[],[["bigint",3],["option",4]]]],[0,"complex","num","",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[3,"ParseComplexError","","",null,null],[0,"integer","num","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",1,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[]]],[11,"div_ceil","","Ceiled integer division.",1,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",1,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",1,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",1,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[]]],[10,"is_even","","Returns `true` if the number is even.",1,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",1,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",1,[[]]],[3,"ExtendedGcd","","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",22,null],[12,"x","","",22,null],[12,"y","","",22,null],[5,"div_rem","","Simultaneous integer division and modulus",null,[[]]],[5,"div_floor","","Floored integer division",null,[[]]],[5,"mod_floor","","Floored integer modulus",null,[[]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[]]],[5,"div_ceil","","Ceiled integer division",null,[[]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",null,[[]]],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"binomial","","Calculate the binomial coefficient.",null,[[]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[]]],[8,"Roots","","Provides methods to compute an integer\'s square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",23,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",23,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",23,[[]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[]]],[8,"Average","","Provides methods to compute the average of two integers,…",null,null],[10,"average_ceil","","Returns the ceiling value of the average of `self` and…",24,[[]]],[10,"average_floor","","Returns the floor value of the average of `self` and…",24,[[]]],[5,"average_ceil","","Returns the ceiling value of the average of `x` and `y` --…",null,[[]]],[5,"average_floor","","Returns the floor value of the average of `x` and `y` --…",null,[[]]],[0,"iter","num","",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[3,"RangeFrom","","An iterator over the infinite range starting at `start`",null,null],[5,"range_from","","Return an iterator over the infinite range starting at…",null,[[],["rangefrom",3]]],[3,"RangeStepFrom","","An iterator over the infinite range starting at `start` by…",null,null],[5,"range_step_from","","Return an iterator over the infinite range starting at…",null,[[],["rangestepfrom",3]]],[0,"traits","num","",null,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,[[]]],[10,"max_value","","returns the largest finite number this type can represent",8,[[]]],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",3,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[]]],[0,"float","num::traits","",null,null],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",25,[[]]],[10,"neg_infinity","","Returns negative infinity.",25,[[]]],[10,"nan","","Returns NaN.",25,[[]]],[10,"neg_zero","","Returns `-0.0`.",25,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",25,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",25,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",25,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",25,[[]]],[11,"is_nan","","Returns `true` if the number is NaN.",25,[[]]],[11,"is_infinite","","Returns `true` if the number is infinite.",25,[[]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",25,[[]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",25,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",25,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a number.",25,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",25,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",25,[[]]],[11,"trunc","","Return the integer part of a number.",25,[[]]],[11,"fract","","Returns the fractional part of a number.",25,[[]]],[11,"abs","","Computes the absolute value of `self`. Returns…",25,[[]]],[11,"signum","","Returns a number that represents the sign of `self`.",25,[[]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",25,[[]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",25,[[]]],[11,"min","","Returns the minimum of the two numbers.",25,[[]]],[11,"max","","Returns the maximum of the two numbers.",25,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",25,[[]]],[11,"powi","","Raise a number to an integer power.",25,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",25,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",25,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",25,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",2,[[]]],[10,"infinity","","Returns the infinite value.",2,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",2,[[]]],[10,"neg_zero","","Returns `-0.0`.",2,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",2,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",2,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",2,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",2,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",2,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",2,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",2,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",2,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",2,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",2,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",2,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",2,[[]]],[10,"trunc","","Return the integer part of a number.",2,[[]]],[10,"fract","","Returns the fractional part of a number.",2,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",2,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",2,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",2,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",2,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",2,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",2,[[]]],[10,"powi","","Raise a number to an integer power.",2,[[]]],[10,"powf","","Raise a number to a floating point power.",2,[[]]],[10,"sqrt","","Take the square root of a number.",2,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",2,[[]]],[10,"exp2","","Returns `2^(self)`.",2,[[]]],[10,"ln","","Returns the natural logarithm of the number.",2,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",2,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",2,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",2,[[]]],[11,"to_degrees","","Converts radians to degrees.",2,[[]]],[11,"to_radians","","Converts degrees to radians.",2,[[]]],[10,"max","","Returns the maximum of the two numbers.",2,[[]]],[10,"min","","Returns the minimum of the two numbers.",2,[[]]],[10,"abs_sub","","The positive difference of two numbers.",2,[[]]],[10,"cbrt","","Take the cubic root of a number.",2,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",2,[[]]],[10,"sin","","Computes the sine of a number (in radians).",2,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",2,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",2,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",2,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",2,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",2,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",2,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",2,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",2,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",2,[[]]],[10,"sinh","","Hyperbolic sine function.",2,[[]]],[10,"cosh","","Hyperbolic cosine function.",2,[[]]],[10,"tanh","","Hyperbolic tangent function.",2,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",2,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",2,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",2,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",2,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",26,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",26,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",26,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",26,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",26,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",26,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",26,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",26,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",26,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",26,[[]]],[10,"LN_10","","Return `ln(10.0)`.",26,[[]]],[10,"LN_2","","Return `ln(2.0)`.",26,[[]]],[10,"LOG10_E","","Return `log10(e)`.",26,[[]]],[10,"LOG2_E","","Return `log2(e)`.",26,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",26,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",26,[[]]],[11,"TAU","","Return the full circle constant `τ`.",26,[[]]],[11,"LOG10_2","","Return `log10(2.0)`.",26,[[]]],[11,"LOG2_10","","Return `log2(10.0)`.",26,[[]]],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",18,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",18,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",18,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",14,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",14,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",14,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",15,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",15,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",15,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",15,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",15,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",15,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",15,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",15,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",15,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",15,[[]]],[0,"ops","num::traits","",null,null],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",9,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",12,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",11,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",10,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",27,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",28,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",29,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",30,[[],["option",4]]],[0,"inv","num::traits::ops","",null,null],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",31,null],[10,"inv","","Returns the multiplicative inverse of `self`.",31,[[]]],[0,"mul_add","num::traits::ops","",null,null],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",32,null],[10,"mul_add","","Performs the fused multiply-add operation.",32,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",33,[[]]],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",16,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",16,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds…",null,null],[10,"saturating_add","","Saturating addition. Computes `self + other`, saturating…",34,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds…",null,null],[10,"saturating_sub","","Saturating subtraction. Computes `self - other`,…",35,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric…",null,null],[10,"saturating_mul","","Saturating multiplication. Computes `self * other`,…",36,[[]]],[0,"wrapping","num::traits::ops","",null,null],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",37,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",38,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",39,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",40,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",41,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",42,[[]]],[0,"pow","num::traits","",null,null],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",7,null],[10,"pow","","Returns `self` to the power `rhs`.",7,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[0,"real","num::traits","",null,null],[8,"Real","num::traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can…",43,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",43,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",43,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",43,[[]]],[10,"floor","","Returns the largest integer less than or equal to a number.",43,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",43,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",43,[[]]],[10,"trunc","","Return the integer part of a number.",43,[[]]],[10,"fract","","Returns the fractional part of a number.",43,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",43,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",43,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",43,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",43,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",43,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",43,[[]]],[10,"powi","","Raise a number to an integer power.",43,[[]]],[10,"powf","","Raise a number to a real number power.",43,[[]]],[10,"sqrt","","Take the square root of a number.",43,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",43,[[]]],[10,"exp2","","Returns `2^(self)`.",43,[[]]],[10,"ln","","Returns the natural logarithm of the number.",43,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",43,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",43,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",43,[[]]],[10,"to_degrees","","Converts radians to degrees.",43,[[]]],[10,"to_radians","","Converts degrees to radians.",43,[[]]],[10,"max","","Returns the maximum of the two numbers.",43,[[]]],[10,"min","","Returns the minimum of the two numbers.",43,[[]]],[10,"abs_sub","","The positive difference of two numbers.",43,[[]]],[10,"cbrt","","Take the cubic root of a number.",43,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",43,[[]]],[10,"sin","","Computes the sine of a number (in radians).",43,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",43,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",43,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",43,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",43,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",43,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",43,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",43,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",43,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",43,[[]]],[10,"sinh","","Hyperbolic sine function.",43,[[]]],[10,"cosh","","Hyperbolic cosine function.",43,[[]]],[10,"tanh","","Hyperbolic tangent function.",43,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",43,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",43,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",43,[[]]],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",17,[[]]],[10,"abs_sub","","The positive difference of two numbers.",17,[[]]],[10,"signum","","Returns the sign of the number.",17,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",17,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",17,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",13,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",13,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",44,null],[13,"Invalid","","",44,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",45,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,[[]]],[10,"max_value","","returns the largest finite number this type can represent",8,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",2,[[]]],[10,"infinity","","Returns the infinite value.",2,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",2,[[]]],[10,"neg_zero","","Returns `-0.0`.",2,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",2,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",2,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",2,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",2,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",2,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",2,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",2,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",2,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",2,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",2,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",2,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",2,[[]]],[10,"trunc","","Return the integer part of a number.",2,[[]]],[10,"fract","","Returns the fractional part of a number.",2,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",2,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",2,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",2,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",2,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",2,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",2,[[]]],[10,"powi","","Raise a number to an integer power.",2,[[]]],[10,"powf","","Raise a number to a floating point power.",2,[[]]],[10,"sqrt","","Take the square root of a number.",2,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",2,[[]]],[10,"exp2","","Returns `2^(self)`.",2,[[]]],[10,"ln","","Returns the natural logarithm of the number.",2,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",2,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",2,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",2,[[]]],[11,"to_degrees","","Converts radians to degrees.",2,[[]]],[11,"to_radians","","Converts degrees to radians.",2,[[]]],[10,"max","","Returns the maximum of the two numbers.",2,[[]]],[10,"min","","Returns the minimum of the two numbers.",2,[[]]],[10,"abs_sub","","The positive difference of two numbers.",2,[[]]],[10,"cbrt","","Take the cubic root of a number.",2,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",2,[[]]],[10,"sin","","Computes the sine of a number (in radians).",2,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",2,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",2,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",2,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",2,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",2,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",2,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",2,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",2,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",2,[[]]],[10,"sinh","","Hyperbolic sine function.",2,[[]]],[10,"cosh","","Hyperbolic cosine function.",2,[[]]],[10,"tanh","","Hyperbolic tangent function.",2,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",2,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",2,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",2,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",2,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",26,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",26,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",26,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",26,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",26,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",26,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",26,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",26,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",26,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",26,[[]]],[10,"LN_10","","Return `ln(10.0)`.",26,[[]]],[10,"LN_2","","Return `ln(2.0)`.",26,[[]]],[10,"LOG10_E","","Return `log10(e)`.",26,[[]]],[10,"LOG2_E","","Return `log2(e)`.",26,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",26,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",26,[[]]],[11,"TAU","","Return the full circle constant `τ`.",26,[[]]],[11,"LOG10_2","","Return `log10(2.0)`.",26,[[]]],[11,"LOG2_10","","Return `log2(10.0)`.",26,[[]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[],["option",4]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",3,[[],["option",4]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",14,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",14,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",14,[[]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",18,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",18,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",18,[[]]],[8,"PrimInt","","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",15,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",15,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",15,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",15,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",15,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",15,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",15,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",15,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",15,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",15,[[]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",9,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",10,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",11,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",28,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",27,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",29,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",30,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",12,[[],["option",4]]],[8,"Inv","","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",31,null],[10,"inv","","Returns the multiplicative inverse of `self`.",31,[[]]],[8,"MulAdd","","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",32,null],[10,"mul_add","","Performs the fused multiply-add operation.",32,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",33,[[]]],[8,"Saturating","","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",16,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",16,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds…",null,null],[10,"saturating_add","","Saturating addition. Computes `self + other`, saturating…",34,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric…",null,null],[10,"saturating_mul","","Saturating multiplication. Computes `self * other`,…",36,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds…",null,null],[10,"saturating_sub","","Saturating subtraction. Computes `self - other`,…",35,[[]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",37,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",39,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",40,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",41,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",42,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",38,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",7,null],[10,"pow","","Returns `self` to the power `rhs`.",7,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",17,[[]]],[10,"abs_sub","","The positive difference of two numbers.",17,[[]]],[10,"signum","","Returns the sign of the number.",17,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",17,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",17,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"rational","num","",null,null],[3,"Ratio","num::rational","Represents the ratio between two numbers.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"ParseRatioError","","",null,null],[11,"from","num::bigint","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"to_string","","",46,[[],["string",3]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",46,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",46,[[]]],[11,"from","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"to_string","","",47,[[],["string",3]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",47,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",47,[[]]],[11,"from","num::complex","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",0,[[],["string",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","num::bigint","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"to_string","","",48,[[],["string",3]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"from","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"from","num::complex","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"to_string","","",49,[[],["string",3]]],[11,"from","num::integer","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"from","","",50,[[]]],[11,"into_iter","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","num::iter","",51,[[]]],[11,"into_iter","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into_iter","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"from","","",53,[[]]],[11,"into_iter","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into_iter","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into_iter","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into_iter","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"from","num::traits","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"to_string","","",45,[[],["string",3]]],[11,"from","num::rational","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"to_string","","",57,[[],["string",3]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"from","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"to_string","","",58,[[],["string",3]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"fmt","num::bigint","",46,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",47,[[["formatter",3]],[["result",4],["error",3]]]],[11,"bitor_assign","","",47,[[["biguint",3]]]],[11,"bitor_assign","","",46,[[["bigint",3]]]],[11,"bitor_assign","","",46,[[["bigint",3]]]],[11,"bitor_assign","","",47,[[["biguint",3]]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",46,[[["bigint",3]]]],[11,"sub_assign","","",47,[[]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",47,[[["biguint",3]]]],[11,"sub_assign","","",46,[[["bigint",3]]]],[11,"sub_assign","","",47,[[["biguint",3]]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",47,[[]]],[11,"sub_assign","","",47,[[]]],[11,"sub_assign","","",47,[[]]],[11,"sub_assign","","",47,[[]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",46,[[]]],[11,"sub_assign","","",47,[[]]],[11,"bitor","","",47,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",47,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",46,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",46,[[["bigint",3]],["bigint",3]]],[11,"from_str","","",46,[[],[["bigint",3],["result",4],["parsebiginterror",3]]]],[11,"from_str","","",47,[[],[["result",4],["biguint",3],["parsebiginterror",3]]]],[11,"checked_sub","","",46,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_sub","","",47,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",46,[[["bigint",3]],["bigint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",47,[[["biguint",3]],["biguint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",47,[[["biguint",3]],["biguint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[["bigint",3]],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",47,[[],["biguint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"sub","","",46,[[],["bigint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from","","",47,[[],["biguint",3]]],[11,"from","","",47,[[],["biguint",3]]],[11,"from","","",46,[[["biguint",3]],["bigint",3]]],[11,"from","","",47,[[],["biguint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from","","",47,[[],["biguint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from","","",47,[[],["biguint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from","","",47,[[],["biguint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from","","",46,[[],["bigint",3]]],[11,"from_str_radix","","Creates and initializes a BigInt.",46,[[],[["bigint",3],["result",4],["parsebiginterror",3]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",47,[[],[["result",4],["biguint",3],["parsebiginterror",3]]]],[11,"fmt","","",46,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",47,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",48,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",47,[[]]],[11,"hash","","",46,[[]]],[11,"hash","","",20,[[]]],[11,"checked_add","","",46,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_add","","",47,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"shl_assign","","",47,[[]]],[11,"shl_assign","","",46,[[]]],[11,"nth_root","","",46,[[],["bigint",3]]],[11,"sqrt","","",46,[[],["bigint",3]]],[11,"cbrt","","",46,[[],["bigint",3]]],[11,"nth_root","","",47,[[],["biguint",3]]],[11,"sqrt","","",47,[[],["biguint",3]]],[11,"cbrt","","",47,[[],["biguint",3]]],[11,"fmt","","",46,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",47,[[["formatter",3]],[["result",4],["error",3]]]],[11,"to_bigint","","",47,[[],[["bigint",3],["option",4]]]],[11,"to_bigint","","",46,[[],[["bigint",3],["option",4]]]],[11,"div_assign","","",47,[[]]],[11,"div_assign","","",46,[[]]],[11,"div_assign","","",47,[[]]],[11,"div_assign","","",46,[[]]],[11,"div_assign","","",47,[[]]],[11,"div_assign","","",47,[[]]],[11,"div_assign","","",47,[[["biguint",3]]]],[11,"div_assign","","",47,[[["biguint",3]]]],[11,"div_assign","","",46,[[]]],[11,"div_assign","","",46,[[]]],[11,"div_assign","","",46,[[]]],[11,"div_assign","","",47,[[]]],[11,"div_assign","","",46,[[]]],[11,"div_assign","","",46,[[["bigint",3]]]],[11,"div_assign","","",46,[[]]],[11,"div_assign","","",47,[[]]],[11,"div_assign","","",46,[[]]],[11,"div_assign","","",46,[[["bigint",3]]]],[11,"div_assign","","",46,[[]]],[11,"div_assign","","",46,[[]]],[11,"div_assign","","",46,[[]]],[11,"div_assign","","",46,[[]]],[11,"from_i64","","",46,[[],[["bigint",3],["option",4]]]],[11,"from_i128","","",46,[[],[["bigint",3],["option",4]]]],[11,"from_u64","","",46,[[],[["bigint",3],["option",4]]]],[11,"from_u128","","",46,[[],[["bigint",3],["option",4]]]],[11,"from_f64","","",46,[[],[["bigint",3],["option",4]]]],[11,"from_i64","","",47,[[],[["biguint",3],["option",4]]]],[11,"from_i128","","",47,[[],[["biguint",3],["option",4]]]],[11,"from_u64","","",47,[[],[["biguint",3],["option",4]]]],[11,"from_u128","","",47,[[],[["biguint",3],["option",4]]]],[11,"from_f64","","",47,[[],[["biguint",3],["option",4]]]],[11,"mul_assign","","",46,[[]]],[11,"mul_assign","","",46,[[]]],[11,"mul_assign","","",46,[[]]],[11,"mul_assign","","",46,[[]]],[11,"mul_assign","","",46,[[]]],[11,"mul_assign","","",47,[[]]],[11,"mul_assign","","",47,[[["biguint",3]]]],[11,"mul_assign","","",46,[[]]],[11,"mul_assign","","",46,[[]]],[11,"mul_assign","","",46,[[]]],[11,"mul_assign","","",46,[[["bigint",3]]]],[11,"mul_assign","","",47,[[]]],[11,"mul_assign","","",47,[[]]],[11,"mul_assign","","",46,[[]]],[11,"mul_assign","","",47,[[]]],[11,"mul_assign","","",47,[[["biguint",3]]]],[11,"mul_assign","","",46,[[]]],[11,"mul_assign","","",47,[[]]],[11,"mul_assign","","",46,[[["bigint",3]]]],[11,"mul_assign","","",46,[[]]],[11,"mul_assign","","",47,[[]]],[11,"mul_assign","","",46,[[]]],[11,"default","","",47,[[],["biguint",3]]],[11,"default","","",46,[[],["bigint",3]]],[11,"partial_cmp","","",20,[[["sign",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",47,[[["biguint",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",46,[[["bigint",3]],[["option",4],["ordering",4]]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[["bigint",3]],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",47,[[["biguint",3]],["biguint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[["bigint",3]],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",47,[[["biguint",3]],["biguint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",47,[[],["biguint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"div","","",46,[[],["bigint",3]]],[11,"checked_mul","","",46,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_mul","","",47,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"div_rem","","",47,[[["biguint",3]]]],[11,"div_floor","","",47,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",47,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",47,[[["biguint",3]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",47,[[["biguint",3]],["biguint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",47,[[["biguint",3]],["biguint",3]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",47,[[["biguint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",47,[[["biguint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",47,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",47,[[]]],[11,"div_rem","","",46,[[["bigint",3]]]],[11,"div_floor","","",46,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",46,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",46,[[["bigint",3]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",46,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",46,[[["bigint",3]],["bigint",3]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",46,[[["bigint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",46,[[["bigint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",46,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",46,[[]]],[11,"product","","",47,[[],["biguint",3]]],[11,"product","","",46,[[],["bigint",3]]],[11,"neg","","Negate Sign value.",20,[[],["sign",4]]],[11,"neg","","",47,[[],["biguint",3]]],[11,"neg","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",47,[[["biguint",3]],["biguint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",46,[[["bigint",3]],["bigint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",46,[[["bigint",3]],["bigint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",47,[[["biguint",3]],["biguint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"rem","","",47,[[],["biguint",3]]],[11,"rem","","",46,[[],["bigint",3]]],[11,"sum","","",46,[[],["bigint",3]]],[11,"sum","","",47,[[],["biguint",3]]],[11,"bitxor","","",47,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",46,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",46,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",47,[[["biguint",3]],["biguint",3]]],[11,"not","","",46,[[],["bigint",3]]],[11,"to_i64","","",47,[[],["option",4]]],[11,"to_i128","","",47,[[],["option",4]]],[11,"to_u64","","",47,[[],["option",4]]],[11,"to_u128","","",47,[[],["option",4]]],[11,"to_f32","","",47,[[],["option",4]]],[11,"to_f64","","",47,[[],["option",4]]],[11,"to_i64","","",46,[[],["option",4]]],[11,"to_i128","","",46,[[],["option",4]]],[11,"to_u64","","",46,[[],["option",4]]],[11,"to_u128","","",46,[[],["option",4]]],[11,"to_f32","","",46,[[],["option",4]]],[11,"to_f64","","",46,[[],["option",4]]],[11,"one","","",47,[[],["biguint",3]]],[11,"set_one","","",47,[[]]],[11,"is_one","","",47,[[]]],[11,"one","","",46,[[],["bigint",3]]],[11,"set_one","","",46,[[]]],[11,"is_one","","",46,[[]]],[11,"mul","","",47,[[["biguint",3]],["biguint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",47,[[["biguint",3]],["biguint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",46,[[["bigint",3]],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",20,[[["sign",4]],["sign",4]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",46,[[["bigint",3]],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",47,[[],["biguint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"mul","","",46,[[],["bigint",3]]],[11,"cmp","","",47,[[["biguint",3]],["ordering",4]]],[11,"cmp","","",20,[[["sign",4]],["ordering",4]]],[11,"cmp","","",46,[[["bigint",3]],["ordering",4]]],[11,"shl","","",47,[[],["biguint",3]]],[11,"shl","","",46,[[],["bigint",3]]],[11,"fmt","","",47,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",46,[[["formatter",3]],[["result",4],["error",3]]]],[11,"to_biguint","","",46,[[],[["biguint",3],["option",4]]]],[11,"to_biguint","","",47,[[],[["biguint",3],["option",4]]]],[11,"eq","","",48,[[["parsebiginterror",3]]]],[11,"ne","","",48,[[["parsebiginterror",3]]]],[11,"eq","","",20,[[["sign",4]]]],[11,"eq","","",46,[[["bigint",3]]]],[11,"eq","","",47,[[["biguint",3]]]],[11,"bitand_assign","","",46,[[["bigint",3]]]],[11,"bitand_assign","","",47,[[["biguint",3]]]],[11,"bitand_assign","","",46,[[["bigint",3]]]],[11,"bitand_assign","","",47,[[["biguint",3]]]],[11,"rem_assign","","",47,[[]]],[11,"rem_assign","","",46,[[]]],[11,"rem_assign","","",46,[[]]],[11,"rem_assign","","",46,[[]]],[11,"rem_assign","","",46,[[]]],[11,"rem_assign","","",46,[[]]],[11,"rem_assign","","",47,[[]]],[11,"rem_assign","","",47,[[]]],[11,"rem_assign","","",46,[[]]],[11,"rem_assign","","",47,[[]]],[11,"rem_assign","","",46,[[["bigint",3]]]],[11,"rem_assign","","",46,[[["bigint",3]]]],[11,"rem_assign","","",46,[[]]],[11,"rem_assign","","",47,[[["biguint",3]]]],[11,"rem_assign","","",47,[[]]],[11,"rem_assign","","",46,[[]]],[11,"rem_assign","","",46,[[]]],[11,"rem_assign","","",47,[[]]],[11,"rem_assign","","",46,[[]]],[11,"rem_assign","","",47,[[["biguint",3]]]],[11,"rem_assign","","",46,[[]]],[11,"rem_assign","","",46,[[]]],[11,"shr_assign","","",46,[[]]],[11,"shr_assign","","",47,[[]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",47,[[["biguint",3]],["biguint",3]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[["bigint",3]],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",47,[[["biguint",3]],["biguint",3]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",47,[[],["biguint",3]]],[11,"add","","",46,[[["bigint",3]],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"add","","",46,[[],["bigint",3]]],[11,"fmt","","",47,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",48,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",20,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",46,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",47,[[],["biguint",3]]],[11,"clone","","",48,[[],["parsebiginterror",3]]],[11,"clone","","",46,[[],["bigint",3]]],[11,"clone","","",20,[[],["sign",4]]],[11,"checked_div","","",47,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"checked_div","","",46,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"add_assign","","",46,[[]]],[11,"add_assign","","",47,[[]]],[11,"add_assign","","",46,[[]]],[11,"add_assign","","",47,[[["biguint",3]]]],[11,"add_assign","","",47,[[]]],[11,"add_assign","","",47,[[]]],[11,"add_assign","","",46,[[]]],[11,"add_assign","","",46,[[]]],[11,"add_assign","","",46,[[]]],[11,"add_assign","","",46,[[]]],[11,"add_assign","","",46,[[["bigint",3]]]],[11,"add_assign","","",46,[[]]],[11,"add_assign","","",47,[[["biguint",3]]]],[11,"add_assign","","",46,[[]]],[11,"add_assign","","",46,[[]]],[11,"add_assign","","",47,[[]]],[11,"add_assign","","",46,[[]]],[11,"add_assign","","",47,[[]]],[11,"add_assign","","",46,[[["bigint",3]]]],[11,"add_assign","","",46,[[]]],[11,"add_assign","","",47,[[]]],[11,"add_assign","","",46,[[]]],[11,"description","","",48,[[]]],[11,"bitand","","",47,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",46,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",46,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",47,[[["biguint",3]],["biguint",3]]],[11,"shr","","",46,[[],["bigint",3]]],[11,"shr","","",47,[[],["biguint",3]]],[11,"abs","","",46,[[],["bigint",3]]],[11,"abs_sub","","",46,[[["bigint",3]],["bigint",3]]],[11,"signum","","",46,[[],["bigint",3]]],[11,"is_positive","","",46,[[]]],[11,"is_negative","","",46,[[]]],[11,"zero","","",47,[[],["biguint",3]]],[11,"set_zero","","",47,[[]]],[11,"is_zero","","",47,[[]]],[11,"zero","","",46,[[],["bigint",3]]],[11,"set_zero","","",46,[[]]],[11,"is_zero","","",46,[[]]],[11,"bitxor_assign","","",46,[[["bigint",3]]]],[11,"bitxor_assign","","",46,[[["bigint",3]]]],[11,"bitxor_assign","","",47,[[["biguint",3]]]],[11,"bitxor_assign","","",47,[[["biguint",3]]]],[11,"fmt","","",47,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",46,[[["formatter",3]],[["result",4],["error",3]]]],[11,"eq","num::integer","",22,[[["extendedgcd",3]]]],[11,"ne","","",22,[[["extendedgcd",3]]]],[11,"clone","","",22,[[],["extendedgcd",3]]],[11,"next","","",50,[[],["option",4]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","num::traits","",45,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",44,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",45,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from_usize","num::complex","",0,[[],[["option",4],["complex",3]]]],[11,"from_isize","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u8","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u16","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u64","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i8","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i16","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i64","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u128","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i128","","",0,[[],[["option",4],["complex",3]]]],[11,"from_f32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_f64","","",0,[[],[["option",4],["complex",3]]]],[11,"from","","",0,[[],["complex",3]]],[11,"from","","",0,[[],["complex",3]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[["complex",3]]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[["complex",3]]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"eq","","",0,[[["complex",3]]]],[11,"ne","","",0,[[["complex",3]]]],[11,"eq","","",49,[[["parsecomplexerror",3]]]],[11,"ne","","",49,[[["parsecomplexerror",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"product","","",0,[[],["complex",3]]],[11,"product","","",0,[[],["complex",3]]],[11,"sum","","",0,[[],["complex",3]]],[11,"sum","","",0,[[],["complex",3]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],[["complex",3],["result",4]]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[["complex",3]]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[["complex",3]]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"one","","",0,[[],["complex",3]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"div","","",0,[[["complex",3]]]],[11,"div","","",0,[[["complex",3]]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[]]],[11,"fmt","","",49,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"as_","","",0,[[]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],[["result",4],["complex",3]]]],[11,"add","","",0,[[["complex",3]]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[["complex",3]]]],[11,"inv","","",0,[[]]],[11,"default","","",0,[[],["complex",3]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"div_assign","","",0,[[]]],[11,"mul_add","","",0,[[["complex",3]],["complex",3]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"zero","","",0,[[],["complex",3]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"mul","","",0,[[["complex",3]]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[["complex",3]]]],[11,"mul","","",0,[[]]],[11,"to_usize","","",0,[[],["option",4]]],[11,"to_isize","","",0,[[],["option",4]]],[11,"to_u8","","",0,[[],["option",4]]],[11,"to_u16","","",0,[[],["option",4]]],[11,"to_u32","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_i8","","",0,[[],["option",4]]],[11,"to_i16","","",0,[[],["option",4]]],[11,"to_i32","","",0,[[],["option",4]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_f32","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"from","","",0,[[],[["option",4],["complex",3]]]],[11,"clone","","",0,[[],["complex",3]]],[11,"fmt","","",49,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"description","","",49,[[]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"clone","num::iter","",51,[[],["range",3]]],[11,"clone","","",54,[[],["rangestepinclusive",3]]],[11,"clone","","",56,[[],["rangestepfrom",3]]],[11,"clone","","",52,[[],["rangeinclusive",3]]],[11,"clone","","",53,[[],["rangestep",3]]],[11,"clone","","",55,[[],["rangefrom",3]]],[11,"next_back","","",52,[[],["option",4]]],[11,"next_back","","",51,[[],["option",4]]],[11,"next","","",51,[[],["option",4]]],[11,"size_hint","","",51,[[]]],[11,"next","","",55,[[],["option",4]]],[11,"size_hint","","",55,[[]]],[11,"next","","",56,[[],["option",4]]],[11,"size_hint","","",56,[[]]],[11,"next","","",53,[[],["option",4]]],[11,"next","","",52,[[],["option",4]]],[11,"size_hint","","",52,[[]]],[11,"next","","",54,[[],["option",4]]],[11,"from","num::rational","",57,[[],["ratio",3]]],[11,"from","","",57,[[],["ratio",3]]],[11,"eq","","",57,[[["ratio",3]]]],[11,"eq","","",58,[[["parseratioerror",3]]]],[11,"ne","","",58,[[["parseratioerror",3]]]],[11,"checked_div","","",57,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"sum","","",57,[[],["ratio",3]]],[11,"sum","","",57,[[],["ratio",3]]],[11,"product","","",57,[[],["ratio",3]]],[11,"product","","",57,[[],["ratio",3]]],[11,"cmp","","",57,[[["ratio",3]],["ordering",4]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",57,[[],[["result",4],["ratio",3],["parseratioerror",3]]]],[11,"zero","","",57,[[],["ratio",3]]],[11,"is_zero","","",57,[[]]],[11,"set_zero","","",57,[[]]],[11,"sub","","",57,[[],["ratio",3]]],[11,"sub","","",57,[[],["ratio",3]]],[11,"sub","","",57,[[["ratio",3]],["ratio",3]]],[11,"sub","","",57,[[["ratio",3]],["ratio",3]]],[11,"description","","",58,[[]]],[11,"from_i64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",57,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",57,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",57,[[],[["ratio",3],["option",4]]]],[11,"partial_cmp","","",57,[[["ratio",3]],[["option",4],["ordering",4]]]],[11,"into","","",57,[[]]],[11,"sub_assign","","",57,[[]]],[11,"sub_assign","","",57,[[["ratio",3]]]],[11,"sub_assign","","",57,[[["ratio",3]]]],[11,"sub_assign","","",57,[[]]],[11,"rem","","",57,[[["ratio",3]],["ratio",3]]],[11,"rem","","",57,[[],["ratio",3]]],[11,"rem","","",57,[[["ratio",3]],["ratio",3]]],[11,"rem","","",57,[[],["ratio",3]]],[11,"neg","","",57,[[],["ratio",3]]],[11,"hash","","",57,[[]]],[11,"div","","",57,[[["ratio",3]],["ratio",3]]],[11,"div","","",57,[[],["ratio",3]]],[11,"div","","",57,[[],["ratio",3]]],[11,"div","","",57,[[["ratio",3]],["ratio",3]]],[11,"fmt","","",58,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",57,[[["formatter",3]],[["result",4],["error",3]]]],[11,"add","","",57,[[["ratio",3]],["ratio",3]]],[11,"add","","",57,[[],["ratio",3]]],[11,"add","","",57,[[],["ratio",3]]],[11,"add","","",57,[[["ratio",3]],["ratio",3]]],[11,"mul_assign","","",57,[[]]],[11,"mul_assign","","",57,[[["ratio",3]]]],[11,"mul_assign","","",57,[[]]],[11,"mul_assign","","",57,[[["ratio",3]]]],[11,"inv","","",57,[[],["ratio",3]]],[11,"div_assign","","",57,[[["ratio",3]]]],[11,"div_assign","","",57,[[]]],[11,"div_assign","","",57,[[["ratio",3]]]],[11,"div_assign","","",57,[[]]],[11,"checked_mul","","",57,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"abs","","",57,[[],["ratio",3]]],[11,"abs_sub","","",57,[[["ratio",3]],["ratio",3]]],[11,"signum","","",57,[[],["ratio",3]]],[11,"is_positive","","",57,[[]]],[11,"is_negative","","",57,[[]]],[11,"checked_sub","","",57,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"add_assign","","",57,[[["ratio",3]]]],[11,"add_assign","","",57,[[]]],[11,"add_assign","","",57,[[]]],[11,"add_assign","","",57,[[["ratio",3]]]],[11,"one","","",57,[[],["ratio",3]]],[11,"is_one","","",57,[[]]],[11,"set_one","","",57,[[]]],[11,"mul","","",57,[[["ratio",3]],["ratio",3]]],[11,"mul","","",57,[[["ratio",3]],["ratio",3]]],[11,"mul","","",57,[[],["ratio",3]]],[11,"mul","","",57,[[],["ratio",3]]],[11,"clone","","",57,[[],["ratio",3]]],[11,"clone","","",58,[[],["parseratioerror",3]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",57,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",58,[[["formatter",3]],[["result",4],["error",3]]]],[11,"checked_add","","",57,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"pow","","",57,[[],["ratio",3]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",57,[[],[["result",4],["ratio",3],["parseratioerror",3]]]],[11,"rem_assign","","",57,[[]]],[11,"rem_assign","","",57,[[["ratio",3]]]],[11,"rem_assign","","",57,[[["ratio",3]]]],[11,"rem_assign","","",57,[[]]],[11,"new","num::bigint","Creates and initializes a BigInt.",46,[[["sign",4],["vec",3]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",46,[[["biguint",3],["sign",4]],["bigint",3]]],[11,"from_slice","","Creates and initializes a `BigInt`.",46,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a `BigInt`.",46,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",46,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",46,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes…",46,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes…",46,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a `BigInt`.",46,[[],[["bigint",3],["option",4]]]],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input…",46,[[["sign",4]],[["bigint",3],["option",4]]]],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input…",46,[[["sign",4]],[["bigint",3],["option",4]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the…",46,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the…",46,[[]]],[11,"to_u32_digits","","Returns the sign and the `u32` digits representation of…",46,[[]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the…",46,[[],["vec",3]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the…",46,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",46,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",46,[[]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",46,[[]]],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",46,[[],["sign",4]]],[11,"bits","","Determines the fewest bits necessary to express the…",46,[[]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it\'s not…",46,[[],[["biguint",3],["option",4]]]],[11,"checked_add","","",46,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_sub","","",46,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_mul","","",46,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_div","","",46,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",46,[[["bigint",3]],["bigint",3]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",46,[[],["bigint",3]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",46,[[],["bigint",3]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",46,[[],["bigint",3]]],[11,"new","","Creates and initializes a `BigUint`.",47,[[["vec",3]],["biguint",3]]],[11,"from_slice","","Creates and initializes a `BigUint`.",47,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a `BigUint`.",47,[[]]],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",47,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",47,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must…",47,[[],[["biguint",3],["option",4]]]],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input…",47,[[],[["biguint",3],["option",4]]]],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input…",47,[[],[["biguint",3],["option",4]]]],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in…",47,[[],["vec",3]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in…",47,[[],["vec",3]]],[11,"to_u32_digits","","Returns the `u32` digits representation of the `BigUint`…",47,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",47,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",47,[[],["vec",3]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",47,[[],["vec",3]]],[11,"bits","","Determines the fewest bits necessary to express the…",47,[[]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",47,[[["biguint",3]],["biguint",3]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",47,[[],["biguint",3]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",47,[[],["biguint",3]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",47,[[],["biguint",3]]],[11,"new","num::complex","Create a new Complex",0,[[],["complex",3]]],[11,"i","","Returns imaginary unit",0,[[],["complex",3]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn\'t…",0,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[],["complex",3]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[],["complex",3]]],[11,"powu","","Raises `self` to an unsigned integer power.",0,[[],["complex",3]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[],["complex",3]]],[11,"inv","","Returns `1/self`",0,[[],["complex",3]]],[11,"powi","","Raises `self` to a signed integer power.",0,[[],["complex",3]]],[11,"l1_norm","","Returns the L1 norm `|re| + |im|` -- the Manhattan…",0,[[]]],[11,"norm","","Calculate |self|",0,[[]]],[11,"arg","","Calculate the principal Arg of self.",0,[[]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r *…",0,[[]]],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[],["complex",3]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural…",0,[[],["complex",3]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[],["complex",3]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[],["complex",3]]],[11,"cbrt","","Computes the principal value of the cube root of `self`.",0,[[],["complex",3]]],[11,"powf","","Raises `self` to a floating point power.",0,[[],["complex",3]]],[11,"log","","Returns the logarithm of `self` with respect to an…",0,[[],["complex",3]]],[11,"powc","","Raises `self` to a complex power.",0,[[["complex",3]],["complex",3]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[],["complex",3]]],[11,"sin","","Computes the sine of `self`.",0,[[],["complex",3]]],[11,"cos","","Computes the cosine of `self`.",0,[[],["complex",3]]],[11,"tan","","Computes the tangent of `self`.",0,[[],["complex",3]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[],["complex",3]]],[11,"acos","","Computes the principal value of the inverse cosine of…",0,[[],["complex",3]]],[11,"atan","","Computes the principal value of the inverse tangent of…",0,[[],["complex",3]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[],["complex",3]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[],["complex",3]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[],["complex",3]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of…",0,[[],["complex",3]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine…",0,[[],["complex",3]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent…",0,[[],["complex",3]]],[11,"finv","","Returns `1/self` using floating-point operations.",0,[[],["complex",3]]],[11,"fdiv","","Returns `self/other` using floating-point operations.",0,[[["complex",3]],["complex",3]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[]]],[11,"new","num::integer","For a given n, iterate over all binomial coefficients…",50,[[],["iterbinomial",3]]],[11,"new_raw","num::rational","Creates a `Ratio` without checking for `denom == 0` or…",57,[[],["ratio",3]]],[11,"numer","","Gets an immutable reference to the numerator.",57,[[]]],[11,"denom","","Gets an immutable reference to the denominator.",57,[[]]],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",57,[[],["ratio",3]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",57,[[],["ratio",3]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",57,[[]]],[11,"is_integer","","Returns true if the rational number is an integer…",57,[[]]],[11,"reduced","","Returns a reduced copy of self.",57,[[],["ratio",3]]],[11,"recip","","Returns the reciprocal.",57,[[],["ratio",3]]],[11,"floor","","Rounds towards minus infinity.",57,[[],["ratio",3]]],[11,"ceil","","Rounds towards plus infinity.",57,[[],["ratio",3]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",57,[[],["ratio",3]]],[11,"trunc","","Rounds towards zero.",57,[[],["ratio",3]]],[11,"fract","","Returns the fractional part of a number, with division…",57,[[],["ratio",3]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",57,[[],["ratio",3]]],[11,"from_float","","Converts a float into a rational number.",57,[[],[["ratio",3],["option",4]]]],[11,"approximate_float","","",57,[[],[["option",4],["ratio",3]]]]],"p":[[3,"Complex"],[8,"Integer"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[8,"Bounded"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedSub"],[8,"Num"],[8,"One"],[8,"PrimInt"],[8,"Saturating"],[8,"Signed"],[8,"Zero"],[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[3,"ExtendedGcd"],[8,"Roots"],[8,"Average"],[8,"FloatCore"],[8,"FloatConst"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"BigInt"],[3,"BigUint"],[3,"ParseBigIntError"],[3,"ParseComplexError"],[3,"IterBinomial"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"],[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_bigint":{"doc":"A Big integer (signed version: `BigInt`, unsigned version:…","i":[[3,"ParseBigIntError","num_bigint","",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`\'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[11,"new","","Creates and initializes a BigInt.",1,[[["vec",3],["sign",4]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",1,[[["sign",4],["biguint",3]],["bigint",3]]],[11,"from_slice","","Creates and initializes a `BigInt`.",1,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a `BigInt`.",1,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",1,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",1,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes…",1,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes…",1,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a `BigInt`.",1,[[],[["option",4],["bigint",3]]]],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input…",1,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input…",1,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the…",1,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the…",1,[[]]],[11,"to_u32_digits","","Returns the sign and the `u32` digits representation of…",1,[[]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the…",1,[[],["vec",3]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the…",1,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",1,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",1,[[]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",1,[[]]],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",1,[[],["sign",4]]],[11,"bits","","Determines the fewest bits necessary to express the…",1,[[]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it\'s not…",1,[[],[["option",4],["biguint",3]]]],[11,"checked_add","","",1,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",1,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",1,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",1,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",1,[[]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",1,[[]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",1,[[]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",1,[[]]],[11,"new","","Creates and initializes a `BigUint`.",2,[[["vec",3]],["biguint",3]]],[11,"from_slice","","Creates and initializes a `BigUint`.",2,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,[[]]],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must…",2,[[],[["option",4],["biguint",3]]]],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input…",2,[[],[["option",4],["biguint",3]]]],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input…",2,[[],[["option",4],["biguint",3]]]],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in…",2,[[],["vec",3]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in…",2,[[],["vec",3]]],[11,"to_u32_digits","","Returns the `u32` digits representation of the `BigUint`…",2,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",2,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",2,[[],["vec",3]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",2,[[],["vec",3]]],[11,"bits","","Determines the fewest bits necessary to express the…",2,[[]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,[[]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",2,[[]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",2,[[]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",2,[[]]],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",3,[[],[["option",4],["biguint",3]]]],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`. This…",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",4,[[],[["option",4],["bigint",3]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",2,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",2,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",1,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_bigint","","",1,[[],[["option",4],["bigint",3]]]],[11,"to_bigint","","",2,[[],[["option",4],["bigint",3]]]],[11,"to_biguint","","",1,[[],[["option",4],["biguint",3]]]],[11,"to_biguint","","",2,[[],[["option",4],["biguint",3]]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[["biguint",3]]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"clone","","",0,[[],["sign",4]]],[11,"clone","","",1,[[],["bigint",3]]],[11,"clone","","",2,[[],["biguint",3]]],[11,"clone","","",5,[[],["parsebiginterror",3]]],[11,"default","","",1,[[],["bigint",3]]],[11,"default","","",2,[[],["biguint",3]]],[11,"cmp","","",0,[[["sign",4]],["ordering",4]]],[11,"cmp","","",1,[[["bigint",3]],["ordering",4]]],[11,"cmp","","",2,[[["biguint",3]],["ordering",4]]],[11,"eq","","",0,[[["sign",4]]]],[11,"eq","","",1,[[["bigint",3]]]],[11,"eq","","",2,[[["biguint",3]]]],[11,"eq","","",5,[[["parsebiginterror",3]]]],[11,"ne","","",5,[[["parsebiginterror",3]]]],[11,"partial_cmp","","",0,[[["sign",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["bigint",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",2,[[["biguint",3]],[["option",4],["ordering",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"div","","",1,[[["bigint",3]],["bigint",3]]],[11,"div","","",1,[[["bigint",3]],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",2,[[["biguint",3]],["biguint",3]]],[11,"div","","",2,[[["biguint",3]],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"rem","","",1,[[["bigint",3]],["bigint",3]]],[11,"rem","","",1,[[["bigint",3]],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",2,[[["biguint",3]],["biguint",3]]],[11,"rem","","",2,[[["biguint",3]],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"sub","","",1,[[["bigint",3]],["bigint",3]]],[11,"sub","","",1,[[["bigint",3]],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",2,[[["biguint",3]],["biguint",3]]],[11,"sub","","",2,[[["biguint",3]],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"add","","",1,[[["bigint",3]],["bigint",3]]],[11,"add","","",1,[[["bigint",3]],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",2,[[["biguint",3]],["biguint",3]]],[11,"add","","",2,[[["biguint",3]],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"mul","","",0,[[["sign",4]],["sign",4]]],[11,"mul","","",1,[[["bigint",3]],["bigint",3]]],[11,"mul","","",1,[[["bigint",3]],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",2,[[["biguint",3]],["biguint",3]]],[11,"mul","","",2,[[["biguint",3]],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"neg","","Negate Sign value.",0,[[],["sign",4]]],[11,"neg","","",1,[[],["bigint",3]]],[11,"neg","","",2,[[],["biguint",3]]],[11,"add_assign","","",1,[[["bigint",3]]]],[11,"add_assign","","",1,[[["bigint",3]]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",2,[[["biguint",3]]]],[11,"add_assign","","",2,[[["biguint",3]]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"sub_assign","","",1,[[["bigint",3]]]],[11,"sub_assign","","",1,[[["bigint",3]]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",2,[[["biguint",3]]]],[11,"sub_assign","","",2,[[["biguint",3]]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"mul_assign","","",1,[[["bigint",3]]]],[11,"mul_assign","","",1,[[["bigint",3]]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",2,[[["biguint",3]]]],[11,"mul_assign","","",2,[[["biguint",3]]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"div_assign","","",1,[[["bigint",3]]]],[11,"div_assign","","",1,[[["bigint",3]]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",2,[[["biguint",3]]]],[11,"div_assign","","",2,[[["biguint",3]]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"rem_assign","","",1,[[["bigint",3]]]],[11,"rem_assign","","",1,[[["bigint",3]]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",2,[[["biguint",3]]]],[11,"rem_assign","","",2,[[["biguint",3]]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"not","","",1,[[],["bigint",3]]],[11,"bitand","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",2,[[["biguint",3]],["biguint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"bitand_assign","","",1,[[["bigint",3]]]],[11,"bitand_assign","","",1,[[["bigint",3]]]],[11,"bitand_assign","","",2,[[["biguint",3]]]],[11,"bitand_assign","","",2,[[["biguint",3]]]],[11,"bitor_assign","","",1,[[["bigint",3]]]],[11,"bitor_assign","","",1,[[["bigint",3]]]],[11,"bitor_assign","","",2,[[["biguint",3]]]],[11,"bitor_assign","","",2,[[["biguint",3]]]],[11,"bitxor_assign","","",1,[[["bigint",3]]]],[11,"bitxor_assign","","",1,[[["bigint",3]]]],[11,"bitxor_assign","","",2,[[["biguint",3]]]],[11,"bitxor_assign","","",2,[[["biguint",3]]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",2,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"product","","",1,[[]]],[11,"product","","",2,[[]]],[11,"sum","","",1,[[]]],[11,"sum","","",2,[[]]],[11,"from_str","","",1,[[],[["result",4],["parsebiginterror",3],["bigint",3]]]],[11,"from_str","","",2,[[],[["biguint",3],["parsebiginterror",3],["result",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"description","","",5,[[]]],[11,"nth_root","","",1,[[]]],[11,"sqrt","","",1,[[]]],[11,"cbrt","","",1,[[]]],[11,"nth_root","","",2,[[]]],[11,"sqrt","","",2,[[]]],[11,"cbrt","","",2,[[]]],[11,"div_rem","","",1,[[["bigint",3]]]],[11,"div_floor","","",1,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",1,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",1,[[["bigint",3]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",1,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",1,[[["bigint",3]],["bigint",3]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["bigint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,[[["bigint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,[[]]],[11,"div_rem","","",2,[[["biguint",3]]]],[11,"div_floor","","",2,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",2,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",2,[[["biguint",3]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",2,[[]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",2,[[["biguint",3]],["biguint",3]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,[[["biguint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,[[["biguint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,[[]]],[11,"to_i64","","",1,[[],["option",4]]],[11,"to_i128","","",1,[[],["option",4]]],[11,"to_u64","","",1,[[],["option",4]]],[11,"to_u128","","",1,[[],["option",4]]],[11,"to_f32","","",1,[[],["option",4]]],[11,"to_f64","","",1,[[],["option",4]]],[11,"to_i64","","",2,[[],["option",4]]],[11,"to_i128","","",2,[[],["option",4]]],[11,"to_u64","","",2,[[],["option",4]]],[11,"to_u128","","",2,[[],["option",4]]],[11,"to_f32","","",2,[[],["option",4]]],[11,"to_f64","","",2,[[],["option",4]]],[11,"from_i64","","",1,[[],[["option",4],["bigint",3]]]],[11,"from_i128","","",1,[[],[["option",4],["bigint",3]]]],[11,"from_u64","","",1,[[],[["option",4],["bigint",3]]]],[11,"from_u128","","",1,[[],[["option",4],["bigint",3]]]],[11,"from_f64","","",1,[[],[["option",4],["bigint",3]]]],[11,"from_i64","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_i128","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_u64","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_u128","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_f64","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",1,[[],[["result",4],["parsebiginterror",3],["bigint",3]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,[[],[["biguint",3],["parsebiginterror",3],["result",4]]]],[11,"zero","","",1,[[],["bigint",3]]],[11,"set_zero","","",1,[[]]],[11,"is_zero","","",1,[[]]],[11,"zero","","",2,[[],["biguint",3]]],[11,"set_zero","","",2,[[]]],[11,"is_zero","","",2,[[]]],[11,"one","","",1,[[],["bigint",3]]],[11,"set_one","","",1,[[]]],[11,"is_one","","",1,[[]]],[11,"one","","",2,[[],["biguint",3]]],[11,"set_one","","",2,[[]]],[11,"is_one","","",2,[[]]],[11,"checked_add","","",1,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_add","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_sub","","",1,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_mul","","",1,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_div","","",1,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"abs","","",1,[[],["bigint",3]]],[11,"abs_sub","","",1,[[["bigint",3]],["bigint",3]]],[11,"signum","","",1,[[],["bigint",3]]],[11,"is_positive","","",1,[[]]],[11,"is_negative","","",1,[[]]]],"p":[[4,"Sign"],[3,"BigInt"],[3,"BigUint"],[8,"ToBigUint"],[8,"ToBigInt"],[3,"ParseBigIntError"]]},\
"num_complex":{"doc":"Complex numbers.","i":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"new","","Create a new Complex",0,[[]]],[11,"i","","Returns imaginary unit",0,[[]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn\'t…",0,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[]]],[11,"powu","","Raises `self` to an unsigned integer power.",0,[[]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[]]],[11,"inv","","Returns `1/self`",0,[[]]],[11,"powi","","Raises `self` to a signed integer power.",0,[[]]],[11,"l1_norm","","Returns the L1 norm `|re| + |im|` -- the Manhattan…",0,[[]]],[11,"norm","","Calculate |self|",0,[[]]],[11,"arg","","Calculate the principal Arg of self.",0,[[]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r *…",0,[[]]],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural…",0,[[]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[]]],[11,"cbrt","","Computes the principal value of the cube root of `self`.",0,[[]]],[11,"powf","","Raises `self` to a floating point power.",0,[[]]],[11,"log","","Returns the logarithm of `self` with respect to an…",0,[[]]],[11,"powc","","Raises `self` to a complex power.",0,[[]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[]]],[11,"sin","","Computes the sine of `self`.",0,[[]]],[11,"cos","","Computes the cosine of `self`.",0,[[]]],[11,"tan","","Computes the tangent of `self`.",0,[[]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[]]],[11,"acos","","Computes the principal value of the inverse cosine of…",0,[[]]],[11,"atan","","Computes the principal value of the inverse tangent of…",0,[[]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of…",0,[[]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine…",0,[[]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent…",0,[[]]],[11,"finv","","Returns `1/self` using floating-point operations.",0,[[],["complex",3]]],[11,"fdiv","","Returns `self/other` using floating-point operations.",0,[[["complex",3]],["complex",3]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_string","","",1,[[],["string",3]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[["complex",3]]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[]]],[11,"sub","","",0,[[["complex",3]]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"eq","","",0,[[["complex",3]]]],[11,"ne","","",0,[[["complex",3]]]],[11,"eq","","",1,[[["parsecomplexerror",3]]]],[11,"ne","","",1,[[["parsecomplexerror",3]]]],[11,"add","","",0,[[["complex",3]]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"mul","","",0,[[["complex",3]]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"product","","",0,[[]]],[11,"product","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[],["complex",3]]],[11,"default","","",0,[[],["complex",3]]],[11,"description","","",1,[[]]],[11,"to_usize","","",0,[[],["option",4]]],[11,"to_isize","","",0,[[],["option",4]]],[11,"to_u8","","",0,[[],["option",4]]],[11,"to_u16","","",0,[[],["option",4]]],[11,"to_u32","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_i8","","",0,[[],["option",4]]],[11,"to_i16","","",0,[[],["option",4]]],[11,"to_i32","","",0,[[],["option",4]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_f32","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"from_usize","","",0,[[],["option",4]]],[11,"from_isize","","",0,[[],["option",4]]],[11,"from_u8","","",0,[[],["option",4]]],[11,"from_u16","","",0,[[],["option",4]]],[11,"from_u32","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_i8","","",0,[[],["option",4]]],[11,"from_i16","","",0,[[],["option",4]]],[11,"from_i32","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from","","",0,[[["toprimitive",8]],["option",4]]],[11,"as_","","",0,[[]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],["result",4]]],[11,"zero","","",0,[[]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"one","","",0,[[]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"inv","","",0,[[]]],[11,"mul_add","","",0,[[["complex",3]],["complex",3]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[["complex",3]]]],[11,"pow","","",0,[[["complex",3]]]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]},\
"num_integer":{"doc":"Integer trait and functions.","i":[[3,"ExtendedGcd","num_integer","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",0,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["roots",8]],["roots",8]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[["roots",8]],["roots",8]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[["roots",8]],["roots",8]]],[5,"average_ceil","","Returns the ceiling value of the average of `x` and `y` --…",null,[[["average",8]],["average",8]]],[5,"average_floor","","Returns the floor value of the average of `x` and `y` --…",null,[[["average",8]],["average",8]]],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["integer",8]]]],[5,"div_floor","","Floored integer division",null,[[["integer",8]],["integer",8]]],[5,"mod_floor","","Floored integer modulus",null,[[["integer",8]],["integer",8]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["integer",8]]]],[5,"div_ceil","","Ceiled integer division",null,[[["integer",8]],["integer",8]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[["integer",8]],["integer",8]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[["integer",8]],["integer",8]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",null,[[["integer",8]]]],[5,"binomial","","Calculate the binomial coefficient.",null,[[["integer",8],["clone",8]],[["integer",8],["clone",8]]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],[["integer",8],["clone",8]]]],[8,"Roots","","Provides methods to compute an integer\'s square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",1,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[]]],[8,"Average","","Provides methods to compute the average of two integers,…",null,null],[10,"average_ceil","","Returns the ceiling value of the average of `self` and…",2,[[]]],[10,"average_floor","","Returns the floor value of the average of `self` and…",2,[[]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",3,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",3,[[]]],[11,"div_ceil","","Ceiled integer division.",3,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",3,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",3,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",3,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",3,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",3,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",3,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",3,[[]]],[10,"is_even","","Returns `true` if the number is even.",3,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",3,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",3,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",3,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",3,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",3,[[]]],[11,"new","","For a given n, iterate over all binomial coefficients…",4,[[],["iterbinomial",3]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["extendedgcd",3]]]],[11,"ne","","",0,[[["extendedgcd",3]]]],[11,"next","","",4,[[],["option",4]]],[11,"clone","","",0,[[],["extendedgcd",3]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[]]]],"p":[[3,"ExtendedGcd"],[8,"Roots"],[8,"Average"],[8,"Integer"],[3,"IterBinomial"]]},\
"num_iter":{"doc":"External iterators for generic mathematics","i":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",null,null],[3,"RangeFrom","","An iterator over the infinite range starting at `start`",null,null],[3,"RangeStepFrom","","An iterator over the infinite range starting at `start` by…",null,null],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[5,"range_from","","Return an iterator over the infinite range starting at…",null,[[],["rangefrom",3]]],[5,"range_step_from","","Return an iterator over the infinite range starting at…",null,[[],["rangestepfrom",3]]],[11,"from","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",3,[[],["option",4]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"next_back","","",0,[[],["option",4]]],[11,"next_back","","",1,[[],["option",4]]],[11,"clone","","",0,[[],["range",3]]],[11,"clone","","",1,[[],["rangeinclusive",3]]],[11,"clone","","",2,[[],["rangestep",3]]],[11,"clone","","",3,[[],["rangestepinclusive",3]]],[11,"clone","","",4,[[],["rangefrom",3]]],[11,"clone","","",5,[[],["rangestepfrom",3]]]],"p":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"]]},\
"num_rational":{"doc":"Rational numbers","i":[[3,"Ratio","num_rational","Represents the ratio between two numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or…",0,[[],["ratio",3]]],[11,"numer","","Gets an immutable reference to the numerator.",0,[[]]],[11,"denom","","Gets an immutable reference to the denominator.",0,[[]]],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,[[],["ratio",3]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,[[],["ratio",3]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,[[]]],[11,"is_integer","","Returns true if the rational number is an integer…",0,[[]]],[11,"reduced","","Returns a reduced copy of self.",0,[[],["ratio",3]]],[11,"recip","","Returns the reciprocal.",0,[[],["ratio",3]]],[11,"floor","","Rounds towards minus infinity.",0,[[],["ratio",3]]],[11,"ceil","","Rounds towards plus infinity.",0,[[],["ratio",3]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",0,[[],["ratio",3]]],[11,"trunc","","Rounds towards zero.",0,[[],["ratio",3]]],[11,"fract","","Returns the fractional part of a number, with division…",0,[[],["ratio",3]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,[[],["ratio",3]]],[11,"from_float","","Converts a float into a rational number.",0,[[["floatcore",8]],[["bigrational",6],["option",4]]]],[11,"approximate_float","","",0,[[["floatcore",8],["numcast",8]],[["ratio",3],["option",4]]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",0,[[],["string",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_string","","",1,[[],["string",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",0,[[],["ratio",3]]],[11,"from","","",0,[[],["ratio",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[["ratio",3]],["ratio",3]]],[11,"div","","",0,[[],["ratio",3]]],[11,"div","","",0,[[["ratio",3]],["ratio",3]]],[11,"div","","",0,[[],["ratio",3]]],[11,"rem","","",0,[[["ratio",3]],["ratio",3]]],[11,"rem","","",0,[[],["ratio",3]]],[11,"rem","","",0,[[["ratio",3]],["ratio",3]]],[11,"rem","","",0,[[],["ratio",3]]],[11,"sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"sub","","",0,[[],["ratio",3]]],[11,"sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"sub","","",0,[[],["ratio",3]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[["parseratioerror",3]]]],[11,"ne","","",1,[[["parseratioerror",3]]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"partial_cmp","","",0,[[],[["ordering",4],["option",4]]]],[11,"add","","",0,[[["ratio",3]],["ratio",3]]],[11,"add","","",0,[[],["ratio",3]]],[11,"add","","",0,[[["ratio",3]],["ratio",3]]],[11,"add","","",0,[[],["ratio",3]]],[11,"mul","","",0,[[["ratio",3]],["ratio",3]]],[11,"mul","","",0,[[],["ratio",3]]],[11,"mul","","",0,[[["ratio",3]],["ratio",3]]],[11,"mul","","",0,[[],["ratio",3]]],[11,"neg","","",0,[[],["ratio",3]]],[11,"add_assign","","",0,[[["ratio",3]]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["ratio",3]]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["ratio",3]]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["ratio",3]]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["ratio",3]]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["ratio",3]]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[["ratio",3]]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["ratio",3]]]],[11,"div_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["ratio",3]]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["ratio",3]]]],[11,"rem_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"product","","",0,[[]]],[11,"product","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,[[],[["parseratioerror",3],["result",4],["ratio",3]]]],[11,"into","","",0,[[]]],[11,"clone","","",0,[[],["ratio",3]]],[11,"clone","","",1,[[],["parseratioerror",3]]],[11,"checked_add","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_div","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_mul","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_sub","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,[[],[["parseratioerror",3],["result",4],["ratio",3]]]],[11,"one","","",0,[[],["ratio",3]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"abs","","",0,[[],["ratio",3]]],[11,"abs_sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"signum","","",0,[[],["ratio",3]]],[11,"is_positive","","",0,[[]]],[11,"is_negative","","",0,[[]]],[11,"zero","","",0,[[],["ratio",3]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"inv","","",0,[[],["ratio",3]]],[11,"description","","",1,[[]]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","i":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[["partialord",8]],["partialord",8]]],[0,"bounds","","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",2,[[]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[]]],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,[[["numcast",8]],[["numcast",8],["option",4]]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",3,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[["toprimitive",8]],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[]]],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",7,[[]]],[10,"neg_infinity","","Returns negative infinity.",7,[[]]],[10,"nan","","Returns NaN.",7,[[]]],[10,"neg_zero","","Returns `-0.0`.",7,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",7,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",7,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",7,[[]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",7,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",7,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",7,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",7,[[]]],[11,"trunc","","Return the integer part of a number.",7,[[]]],[11,"fract","","Returns the fractional part of a number.",7,[[]]],[11,"abs","","Computes the absolute value of `self`. Returns…",7,[[]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",7,[[]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",7,[[]]],[11,"min","","Returns the minimum of the two numbers.",7,[[]]],[11,"max","","Returns the maximum of the two numbers.",7,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",7,[[]]],[11,"powi","","Raise a number to an integer power.",7,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",7,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",8,[[]]],[10,"infinity","","Returns the infinite value.",8,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",8,[[]]],[10,"neg_zero","","Returns `-0.0`.",8,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",8,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",8,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",8,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",8,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",8,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",8,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",8,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",8,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",8,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",8,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",8,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",8,[[]]],[10,"trunc","","Return the integer part of a number.",8,[[]]],[10,"fract","","Returns the fractional part of a number.",8,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",8,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",8,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",8,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",8,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",8,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",8,[[]]],[10,"powi","","Raise a number to an integer power.",8,[[]]],[10,"powf","","Raise a number to a floating point power.",8,[[]]],[10,"sqrt","","Take the square root of a number.",8,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",8,[[]]],[10,"exp2","","Returns `2^(self)`.",8,[[]]],[10,"ln","","Returns the natural logarithm of the number.",8,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",8,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",8,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",8,[[]]],[11,"to_degrees","","Converts radians to degrees.",8,[[]]],[11,"to_radians","","Converts degrees to radians.",8,[[]]],[10,"max","","Returns the maximum of the two numbers.",8,[[]]],[10,"min","","Returns the minimum of the two numbers.",8,[[]]],[10,"abs_sub","","The positive difference of two numbers.",8,[[]]],[10,"cbrt","","Take the cubic root of a number.",8,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",8,[[]]],[10,"sin","","Computes the sine of a number (in radians).",8,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",8,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",8,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",8,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",8,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",8,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",8,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",8,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",8,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",8,[[]]],[10,"sinh","","Hyperbolic sine function.",8,[[]]],[10,"cosh","","Hyperbolic cosine function.",8,[[]]],[10,"tanh","","Hyperbolic tangent function.",8,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",8,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",8,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",8,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",8,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",9,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",9,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",9,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",9,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",9,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",9,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",9,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",9,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",9,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",9,[[]]],[10,"LN_10","","Return `ln(10.0)`.",9,[[]]],[10,"LN_2","","Return `ln(2.0)`.",9,[[]]],[10,"LOG10_E","","Return `log10(e)`.",9,[[]]],[10,"LOG2_E","","Return `log2(e)`.",9,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",9,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",9,[[]]],[11,"TAU","","Return the full circle constant `τ`.",9,[[]]],[11,"LOG10_2","","Return `log10(2.0)`.",9,[[]]],[11,"LOG2_10","","Return `log2(10.0)`.",9,[[]]],[0,"identities","num_traits","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,[[],["zero",8]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[],["one",8]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",10,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",10,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",11,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",11,[[]]],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",12,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",12,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",12,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",12,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[]]],[0,"ops","num_traits","",null,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",13,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",14,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",15,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",16,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",17,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",18,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",19,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",20,[[],["option",4]]],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",21,null],[10,"inv","","Returns the multiplicative inverse of `self`.",21,[[]]],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",22,null],[10,"mul_add","","Performs the fused multiply-add operation.",22,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",23,[[]]],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",24,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",24,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds…",null,null],[10,"saturating_add","","Saturating addition. Computes `self + other`, saturating…",25,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds…",null,null],[10,"saturating_sub","","Saturating subtraction. Computes `self - other`,…",26,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric…",null,null],[10,"saturating_mul","","Saturating multiplication. Computes `self * other`,…",27,[[]]],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",28,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",29,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",30,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",31,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",32,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",33,[[]]],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation…",null,[[["mul",8],["clone",8],["one",8]],[["mul",8],["clone",8],["one",8]]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[["one",8],["checkedmul",8],["clone",8]],[["clone",8],["option",4],["one",8],["checkedmul",8]]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",34,null],[10,"pow","","Returns `self` to the power `rhs`.",34,[[]]],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can…",35,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",35,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",35,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",35,[[]]],[10,"floor","","Returns the largest integer less than or equal to a number.",35,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",35,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",35,[[]]],[10,"trunc","","Return the integer part of a number.",35,[[]]],[10,"fract","","Returns the fractional part of a number.",35,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",35,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",35,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",35,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",35,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",35,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",35,[[]]],[10,"powi","","Raise a number to an integer power.",35,[[]]],[10,"powf","","Raise a number to a real number power.",35,[[]]],[10,"sqrt","","Take the square root of a number.",35,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",35,[[]]],[10,"exp2","","Returns `2^(self)`.",35,[[]]],[10,"ln","","Returns the natural logarithm of the number.",35,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",35,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",35,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",35,[[]]],[10,"to_degrees","","Converts radians to degrees.",35,[[]]],[10,"to_radians","","Converts degrees to radians.",35,[[]]],[10,"max","","Returns the maximum of the two numbers.",35,[[]]],[10,"min","","Returns the minimum of the two numbers.",35,[[]]],[10,"abs_sub","","The positive difference of two numbers.",35,[[]]],[10,"cbrt","","Take the cubic root of a number.",35,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",35,[[]]],[10,"sin","","Computes the sine of a number (in radians).",35,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",35,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",35,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",35,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",35,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",35,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",35,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",35,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",35,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",35,[[]]],[10,"sinh","","Hyperbolic sine function.",35,[[]]],[10,"cosh","","Hyperbolic cosine function.",35,[[]]],[10,"tanh","","Hyperbolic tangent function.",35,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",35,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",35,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",35,[[]]],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,[[["signed",8]],["signed",8]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["signed",8]],["signed",8]]],[5,"signum","","Returns the sign of the number.",null,[[["signed",8]],["signed",8]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",36,[[]]],[10,"abs_sub","","The positive difference of two numbers.",36,[[]]],[10,"signum","","Returns the sign of the number.",36,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",36,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",36,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",37,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",37,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"]]},\
"poly1305":{"doc":"","i":[[3,"Block","poly1305","Fixed length byte array.",null,null],[12,"0","","",0,null],[3,"Tag","","Fixed length byte array.",null,null],[12,"0","","",1,null],[3,"FieldCanvas","","",null,null],[3,"FieldElement","","",null,null],[5,"poly","","",null,[[["key",3],["byteseq",6]],["tag",3]]],[5,"poly_mac","","",null,[[["key",3],["byteseq",6],["iv",3]],["tag",3]]],[11,"new","","",0,[[]]],[11,"length","","",0,[[]]],[11,"from_array","","",0,[[]]],[11,"from_native_slice","","",0,[[]]],[11,"capacity","","",0,[[]]],[11,"from_slice","","",0,[[]]],[11,"from_slice_range","","",0,[[["range",3]]]],[11,"slice","","",0,[[],[["u8",3],["seq",3]]]],[11,"slice_range","","",0,[[["range",3]],[["u8",3],["seq",3]]]],[11,"num_chunks","","",0,[[]]],[11,"get_chunk_len","","",0,[[]]],[11,"get_chunk","","",0,[[]]],[11,"set_chunk","","",0,[[]]],[11,"from_vec","","",0,[[["vec",3],["u8",3]],["block",3]]],[11,"from_seq","","",0,[[],["block",3]]],[11,"from_hex","","Read hex string to Bytes.",0,[[],["block",3]]],[11,"declassify_eq","","",0,[[]]],[11,"to_be_bytes","","",0,[[],[["u8",3],["seq",3]]]],[11,"to_le_bytes","","",0,[[],[["u8",3],["seq",3]]]],[11,"from_public_slice","","",0,[[],["block",3]]],[11,"from_public_array","","Create an array from a regular Rust array.",0,[[],["block",3]]],[11,"to_be_U32s","","",0,[[],[["u32",3],["seq",3]]]],[11,"to_le_U32s","","",0,[[],[["u32",3],["seq",3]]]],[11,"to_be_U64s","","",0,[[],[["seq",3],["u64",3]]]],[11,"to_le_U64s","","",0,[[],[["seq",3],["u64",3]]]],[11,"to_U128s_be","","",0,[[],[["u128",3],["seq",3]]]],[11,"to_U128s_le","","",0,[[],[["u128",3],["seq",3]]]],[11,"to_hex","","",0,[[],["string",3]]],[11,"new","","",1,[[]]],[11,"length","","",1,[[]]],[11,"from_array","","",1,[[]]],[11,"from_native_slice","","",1,[[]]],[11,"capacity","","",1,[[]]],[11,"from_slice","","",1,[[]]],[11,"from_slice_range","","",1,[[["range",3]]]],[11,"slice","","",1,[[],["seq",3]]],[11,"slice_range","","",1,[[["range",3]],["seq",3]]],[11,"num_chunks","","",1,[[]]],[11,"get_chunk_len","","",1,[[]]],[11,"get_chunk","","",1,[[]]],[11,"set_chunk","","",1,[[]]],[11,"from_vec","","",1,[[["vec",3]],["tag",3]]],[11,"from_seq","","",1,[[],["tag",3]]],[11,"from_hex","","Read hex string to Bytes.",1,[[],["tag",3]]],[11,"to_be_u32s","","",1,[[],["seq",3]]],[11,"to_le_u32s","","",1,[[],["seq",3]]],[11,"to_be_u64s","","",1,[[],["seq",3]]],[11,"to_le_u64s","","",1,[[],["seq",3]]],[11,"to_u128s_be","","",1,[[],["seq",3]]],[11,"to_u128s_le","","",1,[[],["seq",3]]],[11,"to_hex","","",1,[[],["string",3]]],[11,"max_value","","",2,[[]]],[11,"from_literal","","",2,[[]]],[11,"from_signed_literal","","",2,[[]]],[11,"pow2","","Returns 2 to the power of the argument",2,[[],["fieldcanvas",3]]],[11,"bit","","Gets the `i`-th least significant bit of this integer.",2,[[]]],[11,"from_hex","","",2,[[]]],[11,"from_le_bytes","","",2,[[]]],[11,"to_le_bytes","","",2,[[],["vec",3]]],[11,"comp_eq","","Produces a new integer which is all ones if the two…",2,[[]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",2,[[]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",2,[[]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",2,[[]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",2,[[]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",2,[[]]],[11,"inv","","",2,[[]]],[11,"pow_felem","","",2,[[]]],[11,"pow","","Returns self to the power of the argument. The exponent is…",2,[[]]],[11,"from_canvas","","",3,[[["fieldcanvas",3]],["fieldelement",3]]],[11,"into_canvas","","",3,[[],["fieldcanvas",3]]],[11,"max","","",3,[[],["fieldcanvas",3]]],[11,"declassify","","",3,[[],["bigint",3]]],[11,"from_hex","","",3,[[]]],[11,"from_le_bytes","","",3,[[]]],[11,"to_le_bytes","","",3,[[],["vec",3]]],[11,"bit","","Gets the `i`-th least significant bit of this integer.",3,[[]]],[11,"from_literal","","",3,[[]]],[11,"from_signed_literal","","",3,[[]]],[11,"comp_eq","","",3,[[]]],[11,"comp_ne","","",3,[[]]],[11,"comp_gte","","",3,[[]]],[11,"comp_gt","","",3,[[]]],[11,"comp_lte","","",3,[[]]],[11,"comp_lt","","",3,[[]]],[11,"inv","","",3,[[]]],[11,"pow_felem","","",3,[[]]],[11,"pow","","Returns self to the power of the argument. The exponent is…",3,[[]]],[11,"from_byte_seq_le","","",3,[[["seqtrait",8],["u8",3]],["fieldelement",3]]],[11,"to_public_byte_seq_le","","",3,[[],["seq",3]]],[11,"to_byte_seq_le","","",3,[[],[["u8",3],["seq",3]]]],[11,"from_secret_literal","","",3,[[["u128",3]],["fieldelement",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",2,[[["biguint",3]],["fieldcanvas",3]]],[11,"from","","",2,[[["bigint",3]],["fieldcanvas",3]]],[11,"from","","",3,[[["fieldcanvas",3]],["fieldelement",3]]],[11,"into","","",2,[[],["bigint",3]]],[11,"into","","",2,[[],["biguint",3]]],[11,"into","","",3,[[],["fieldcanvas",3]]],[11,"clone","","",0,[[],["block",3]]],[11,"clone","","",1,[[],["tag",3]]],[11,"clone","","",2,[[],["fieldcanvas",3]]],[11,"clone","","",3,[[],["fieldelement",3]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[],["fieldcanvas",3]]],[11,"default","","",3,[[],["fieldelement",3]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"cmp","","",2,[[["fieldcanvas",3]],["ordering",4]]],[11,"cmp","","",3,[[],["ordering",4]]],[11,"eq","","",1,[[]]],[11,"eq","","",2,[[["fieldcanvas",3]]]],[11,"eq","","",3,[[]]],[11,"partial_cmp","","",1,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",2,[[["fieldcanvas",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",3,[[],[["option",4],["ordering",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"div","","",1,[[["tag",3]],["tag",3]]],[11,"div","","",2,[[["fieldcanvas",3]],["fieldcanvas",3]]],[11,"div","","",3,[[["fieldelement",3]],["fieldelement",3]]],[11,"rem","","",0,[[["block",3]],["block",3]]],[11,"rem","","",2,[[["fieldcanvas",3]],["fieldcanvas",3]]],[11,"rem","","",3,[[["fieldelement",3]],["fieldelement",3]]],[11,"sub","","",0,[[["block",3]],["block",3]]],[11,"sub","","",1,[[["tag",3]],["tag",3]]],[11,"sub","","",2,[[["fieldcanvas",3]],["fieldcanvas",3]]],[11,"sub","","",3,[[["fieldelement",3]],["fieldelement",3]]],[11,"add","","",0,[[["block",3]],["block",3]]],[11,"add","","",1,[[["tag",3]],["tag",3]]],[11,"add","","",2,[[["fieldcanvas",3]],["fieldcanvas",3]]],[11,"add","","",3,[[["fieldelement",3]],["fieldelement",3]]],[11,"mul","","",0,[[["block",3]],["block",3]]],[11,"mul","","",1,[[["tag",3]],["tag",3]]],[11,"mul","","",2,[[["fieldcanvas",3]],["fieldcanvas",3]]],[11,"mul","","",3,[[["fieldelement",3]],["fieldelement",3]]],[11,"not","","",0,[[]]],[11,"not","","",1,[[]]],[11,"not","","",2,[[]]],[11,"not","","",3,[[]]],[11,"bitand","","",0,[[]]],[11,"bitand","","",1,[[]]],[11,"bitand","","",2,[[]]],[11,"bitand","","",3,[[]]],[11,"bitor","","",0,[[]]],[11,"bitor","","",1,[[]]],[11,"bitor","","",2,[[]]],[11,"bitor","","",3,[[]]],[11,"bitxor","","",0,[[]]],[11,"bitxor","","",1,[[]]],[11,"bitxor","","",2,[[]]],[11,"bitxor","","",3,[[]]],[11,"shl","","",0,[[]]],[11,"shl","","",1,[[]]],[11,"shl","","",2,[[]]],[11,"shl","","",3,[[]]],[11,"shr","","",0,[[]]],[11,"shr","","",1,[[]]],[11,"shr","","",2,[[]]],[11,"shr","","",3,[[]]],[11,"index","","",0,[[],["u8",3]]],[11,"index","","",0,[[],["u8",3]]],[11,"index","","",0,[[],["u8",3]]],[11,"index","","",0,[[],["u8",3]]],[11,"index","","",0,[[["rangefull",3]]]],[11,"index","","",1,[[]]],[11,"index","","",1,[[]]],[11,"index","","",1,[[]]],[11,"index","","",1,[[]]],[11,"index","","",1,[[["rangefull",3]]]],[11,"index_mut","","",0,[[],["u8",3]]],[11,"index_mut","","",0,[[],["u8",3]]],[11,"index_mut","","",0,[[],["u8",3]]],[11,"index_mut","","",0,[[],["u8",3]]],[11,"index_mut","","",1,[[]]],[11,"index_mut","","",1,[[]]],[11,"index_mut","","",1,[[]]],[11,"index_mut","","",1,[[]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"create","","",0,[[]]],[11,"len","","",0,[[]]],[11,"iter","","",0,[[],[["u8",3],["iter",3]]]],[11,"update_slice","","",0,[[]]],[11,"update","","",0,[[]]],[11,"update_start","","",0,[[]]],[11,"create","","",1,[[]]],[11,"len","","",1,[[]]],[11,"iter","","",1,[[],["iter",3]]],[11,"update_slice","","",1,[[]]],[11,"update","","",1,[[]]],[11,"update_start","","",1,[[]]],[11,"ZERO","","",2,[[]]],[11,"ONE","","",2,[[]]],[11,"TWO","","",2,[[]]],[11,"from_literal","","",2,[[]]],[11,"from_hex_string","","",2,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",2,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",2,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",2,[[]]],[11,"rotate_left","","",2,[[]]],[11,"rotate_right","","",2,[[]]],[11,"ZERO","","",3,[[]]],[11,"ONE","","",3,[[]]],[11,"TWO","","",3,[[]]],[11,"from_literal","","",3,[[]]],[11,"from_hex_string","","",3,[[["string",3]]]],[11,"get_bit","","Get bit `i` of this integer.",3,[[]]],[11,"set_bit","","Set bit `i` of this integer to `b` and return the result.…",3,[[]]],[11,"set","","Set bit `pos` of this integer to bit `yi` of integer `y`.",3,[[]]],[11,"rotate_left","","",3,[[]]],[11,"rotate_right","","",3,[[]]],[11,"sub_mod","","(self - rhs) % n.",0,[[]]],[11,"add_mod","","`(self + rhs) % n`",0,[[]]],[11,"mul_mod","","`(self * rhs) % n`",0,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",0,[[]]],[11,"modulo","","`self % n`",0,[[]]],[11,"signed_modulo","","",0,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",0,[[]]],[11,"sub_mod","","`(self - rhs) % n` (coefficient-wise)",1,[[]]],[11,"add_mod","","`(self + rhs) % n` (coefficient-wise)",1,[[]]],[11,"mul_mod","","`(self * rhs) % n` (coefficient-wise) Note that the…",1,[[]]],[11,"pow_mod","","`(self ^ exp) % n` (coefficient-wise) Note that the…",1,[[]]],[11,"modulo","","`self % n` (coefficient-wise)",1,[[]]],[11,"signed_modulo","","`self % n` (coefficient-wise)",1,[[]]],[11,"absolute","","`|self|` (coefficient-wise)",1,[[]]],[11,"sub_mod","","(self - rhs) % n.",2,[[]]],[11,"add_mod","","`(self + rhs) % n`",2,[[]]],[11,"mul_mod","","`(self * rhs) % n`",2,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",2,[[]]],[11,"modulo","","`self % n`",2,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer",2,[[]]],[11,"absolute","","`|self|`",2,[[]]],[11,"sub_mod","","(self - rhs) % n.",3,[[]]],[11,"add_mod","","`(self + rhs) % n`",3,[[]]],[11,"mul_mod","","`(self * rhs) % n`",3,[[]]],[11,"pow_mod","","`(self ^ exp) % n`",3,[[]]],[11,"modulo","","`self % n`",3,[[]]],[11,"signed_modulo","","`self % n` that always returns a positive integer",3,[[]]],[11,"absolute","","`|self|`",3,[[]]],[11,"max_val","","Return largest value that can be represented.",0,[[]]],[11,"wrap_add","","",0,[[]]],[11,"wrap_sub","","",0,[[]]],[11,"wrap_mul","","",0,[[]]],[11,"wrap_div","","",0,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",0,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",0,[[]]],[11,"divide","","Division.",0,[[]]],[11,"inv","","Invert self modulo n.",0,[[]]],[11,"equal","","",0,[[]]],[11,"greater_than","","",0,[[]]],[11,"greater_than_or_qual","","",0,[[]]],[11,"less_than","","",0,[[]]],[11,"less_than_or_equal","","",0,[[]]],[11,"not_equal_bm","","",0,[[]]],[11,"equal_bm","","",0,[[]]],[11,"greater_than_bm","","",0,[[]]],[11,"greater_than_or_equal_bm","","",0,[[]]],[11,"less_than_bm","","",0,[[]]],[11,"less_than_or_equal_bm","","",0,[[]]],[11,"max_val","","Return largest value that can be represented. Not…",1,[[]]],[11,"wrap_add","","`self + rhs` (coefficient-wise and wrapping)",1,[[]]],[11,"wrap_sub","","`self - rhs` (coefficient-wise and wrapping)",1,[[]]],[11,"wrap_mul","","`self * rhs` (coefficient-wise and wrapping)",1,[[]]],[11,"wrap_div","","`self + rhs` (coefficient-wise and wrapping)",1,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32` (coefficient-wise and…",1,[[]]],[11,"pow_self","","Not implemented.",1,[[]]],[11,"divide","","`self / rhs` (coefficient-wise and wrapping).",1,[[]]],[11,"inv","","Not implemented",1,[[]]],[11,"equal","","",1,[[]]],[11,"greater_than","","",1,[[]]],[11,"greater_than_or_qual","","",1,[[]]],[11,"less_than","","",1,[[]]],[11,"less_than_or_equal","","",1,[[]]],[11,"not_equal_bm","","",1,[[]]],[11,"equal_bm","","",1,[[]]],[11,"greater_than_bm","","",1,[[]]],[11,"greater_than_or_equal_bm","","",1,[[]]],[11,"less_than_bm","","",1,[[]]],[11,"less_than_or_equal_bm","","",1,[[]]],[11,"max_val","","Return largest value that can be represented.",2,[[]]],[11,"wrap_add","","",2,[[]]],[11,"wrap_sub","","",2,[[]]],[11,"wrap_mul","","",2,[[]]],[11,"wrap_div","","",2,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",2,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",2,[[]]],[11,"divide","","Division.",2,[[]]],[11,"inv","","Invert self modulo n.",2,[[]]],[11,"equal","","",2,[[]]],[11,"greater_than","","",2,[[]]],[11,"greater_than_or_qual","","",2,[[]]],[11,"less_than","","",2,[[]]],[11,"less_than_or_equal","","",2,[[]]],[11,"not_equal_bm","","",2,[[]]],[11,"equal_bm","","",2,[[]]],[11,"greater_than_bm","","",2,[[]]],[11,"greater_than_or_equal_bm","","",2,[[]]],[11,"less_than_bm","","",2,[[]]],[11,"less_than_or_equal_bm","","",2,[[]]],[11,"max_val","","Return largest value that can be represented.",3,[[]]],[11,"wrap_add","","",3,[[]]],[11,"wrap_sub","","",3,[[]]],[11,"wrap_mul","","",3,[[]]],[11,"wrap_div","","",3,[[]]],[11,"exp","","`self ^ exp` where `exp` is a `u32`.",3,[[]]],[11,"pow_self","","`self ^ exp` where `exp` is a `Self`.",3,[[]]],[11,"divide","","Division.",3,[[]]],[11,"inv","","Invert self modulo n. NOTE: `n` is ignored and inversion…",3,[[]]],[11,"equal","","",3,[[]]],[11,"greater_than","","",3,[[]]],[11,"greater_than_or_qual","","",3,[[]]],[11,"less_than","","",3,[[]]],[11,"less_than_or_equal","","",3,[[]]],[11,"not_equal_bm","","",3,[[]]],[11,"equal_bm","","",3,[[]]],[11,"greater_than_bm","","",3,[[]]],[11,"greater_than_or_equal_bm","","",3,[[]]],[11,"less_than_bm","","",3,[[]]],[11,"less_than_or_equal_bm","","",3,[[]]]],"p":[[3,"Block"],[3,"Tag"],[3,"FieldCanvas"],[3,"FieldElement"]]},\
"secret_integers":{"doc":"This crate defines simple wrappers around Rust\'s integer…","i":[[3,"U8","secret_integers","",null,null],[12,"0","","",0,null],[3,"U16","","",null,null],[12,"0","","",1,null],[3,"U32","","",null,null],[12,"0","","",2,null],[3,"U64","","",null,null],[12,"0","","",3,null],[3,"U128","","",null,null],[12,"0","","",4,null],[3,"I8","","",null,null],[12,"0","","",5,null],[3,"I16","","",null,null],[12,"0","","",6,null],[3,"I32","","",null,null],[12,"0","","",7,null],[3,"I64","","",null,null],[12,"0","","",8,null],[3,"I128","","",null,null],[12,"0","","",9,null],[11,"classify","","",0,[[["into",8]]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",0,[[]]],[11,"zero","","",0,[[]]],[11,"one","","",0,[[]]],[11,"ones","","",0,[[]]],[11,"from_le_bytes","","",0,[[],[["u8",3],["vec",3]]]],[11,"to_le_bytes","","",0,[[],[["u8",3],["vec",3]]]],[11,"from_be_bytes","","",0,[[],[["u8",3],["vec",3]]]],[11,"to_be_bytes","","",0,[[],[["u8",3],["vec",3]]]],[11,"max_value","","",0,[[],["u8",3]]],[11,"checked_add","","Warning: panics when overflow.",0,[[]]],[11,"checked_sub","","Warning: panics when overflow.",0,[[]]],[11,"checked_mul","","Warning: panics when overflow.",0,[[]]],[11,"rotate_left","","",0,[[]]],[11,"rotate_right","","",0,[[]]],[11,"comp_eq","","Produces a new integer which is all ones if the two…",0,[[]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",0,[[]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",0,[[]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",0,[[]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",0,[[]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",0,[[]]],[11,"classify","","",1,[[["into",8]]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",1,[[]]],[11,"zero","","",1,[[]]],[11,"one","","",1,[[]]],[11,"ones","","",1,[[]]],[11,"from_le_bytes","","",1,[[],[["vec",3],["u16",3]]]],[11,"to_le_bytes","","",1,[[],[["u8",3],["vec",3]]]],[11,"from_be_bytes","","",1,[[],[["vec",3],["u16",3]]]],[11,"to_be_bytes","","",1,[[],[["u8",3],["vec",3]]]],[11,"max_value","","",1,[[],["u16",3]]],[11,"checked_add","","Warning: panics when overflow.",1,[[]]],[11,"checked_sub","","Warning: panics when overflow.",1,[[]]],[11,"checked_mul","","Warning: panics when overflow.",1,[[]]],[11,"rotate_left","","",1,[[]]],[11,"rotate_right","","",1,[[]]],[11,"comp_eq","","Produces a new integer which is all ones if the two…",1,[[]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",1,[[]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",1,[[]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",1,[[]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",1,[[]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",1,[[]]],[11,"classify","","",2,[[["into",8]]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",2,[[]]],[11,"zero","","",2,[[]]],[11,"one","","",2,[[]]],[11,"ones","","",2,[[]]],[11,"from_le_bytes","","",2,[[],[["vec",3],["u32",3]]]],[11,"to_le_bytes","","",2,[[],[["u8",3],["vec",3]]]],[11,"from_be_bytes","","",2,[[],[["vec",3],["u32",3]]]],[11,"to_be_bytes","","",2,[[],[["u8",3],["vec",3]]]],[11,"max_value","","",2,[[],["u32",3]]],[11,"checked_add","","Warning: panics when overflow.",2,[[]]],[11,"checked_sub","","Warning: panics when overflow.",2,[[]]],[11,"checked_mul","","Warning: panics when overflow.",2,[[]]],[11,"rotate_left","","",2,[[]]],[11,"rotate_right","","",2,[[]]],[11,"comp_eq","","Produces a new integer which is all ones if the two…",2,[[]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",2,[[]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",2,[[]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",2,[[]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",2,[[]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",2,[[]]],[11,"classify","","",3,[[["into",8]]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",3,[[]]],[11,"zero","","",3,[[]]],[11,"one","","",3,[[]]],[11,"ones","","",3,[[]]],[11,"from_le_bytes","","",3,[[],[["u64",3],["vec",3]]]],[11,"to_le_bytes","","",3,[[],[["u8",3],["vec",3]]]],[11,"from_be_bytes","","",3,[[],[["u64",3],["vec",3]]]],[11,"to_be_bytes","","",3,[[],[["u8",3],["vec",3]]]],[11,"max_value","","",3,[[],["u64",3]]],[11,"checked_add","","Warning: panics when overflow.",3,[[]]],[11,"checked_sub","","Warning: panics when overflow.",3,[[]]],[11,"checked_mul","","Warning: panics when overflow.",3,[[]]],[11,"rotate_left","","",3,[[]]],[11,"rotate_right","","",3,[[]]],[11,"comp_eq","","Produces a new integer which is all ones if the two…",3,[[]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",3,[[]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",3,[[]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",3,[[]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",3,[[]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",3,[[]]],[11,"classify","","",4,[[["into",8]]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",4,[[]]],[11,"zero","","",4,[[]]],[11,"one","","",4,[[]]],[11,"ones","","",4,[[]]],[11,"from_le_bytes","","",4,[[],[["vec",3],["u128",3]]]],[11,"to_le_bytes","","",4,[[],[["u8",3],["vec",3]]]],[11,"from_be_bytes","","",4,[[],[["vec",3],["u128",3]]]],[11,"to_be_bytes","","",4,[[],[["u8",3],["vec",3]]]],[11,"max_value","","",4,[[],["u128",3]]],[11,"checked_add","","Warning: panics when overflow.",4,[[]]],[11,"checked_sub","","Warning: panics when overflow.",4,[[]]],[11,"checked_mul","","Warning: panics when overflow.",4,[[]]],[11,"rotate_left","","",4,[[]]],[11,"rotate_right","","",4,[[]]],[11,"comp_eq","","Produces a new integer which is all ones if the two…",4,[[]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",4,[[]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",4,[[]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",4,[[]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",4,[[]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",4,[[]]],[11,"classify","","",5,[[["into",8]]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",5,[[]]],[11,"zero","","",5,[[]]],[11,"one","","",5,[[]]],[11,"ones","","",5,[[]]],[11,"from_le_bytes","","",5,[[],[["i8",3],["vec",3]]]],[11,"to_le_bytes","","",5,[[],[["u8",3],["vec",3]]]],[11,"from_be_bytes","","",5,[[],[["i8",3],["vec",3]]]],[11,"to_be_bytes","","",5,[[],[["u8",3],["vec",3]]]],[11,"max_value","","",5,[[],["i8",3]]],[11,"checked_add","","Warning: panics when overflow.",5,[[]]],[11,"checked_sub","","Warning: panics when overflow.",5,[[]]],[11,"checked_mul","","Warning: panics when overflow.",5,[[]]],[11,"rotate_left","","",5,[[]]],[11,"rotate_right","","",5,[[]]],[11,"comp_eq","","",5,[[]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",5,[[]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",5,[[]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",5,[[]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",5,[[]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",5,[[]]],[11,"classify","","",6,[[["into",8]]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",6,[[]]],[11,"zero","","",6,[[]]],[11,"one","","",6,[[]]],[11,"ones","","",6,[[]]],[11,"from_le_bytes","","",6,[[],[["vec",3],["i16",3]]]],[11,"to_le_bytes","","",6,[[],[["u8",3],["vec",3]]]],[11,"from_be_bytes","","",6,[[],[["vec",3],["i16",3]]]],[11,"to_be_bytes","","",6,[[],[["u8",3],["vec",3]]]],[11,"max_value","","",6,[[],["i16",3]]],[11,"checked_add","","Warning: panics when overflow.",6,[[]]],[11,"checked_sub","","Warning: panics when overflow.",6,[[]]],[11,"checked_mul","","Warning: panics when overflow.",6,[[]]],[11,"rotate_left","","",6,[[]]],[11,"rotate_right","","",6,[[]]],[11,"comp_eq","","",6,[[]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",6,[[]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",6,[[]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",6,[[]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",6,[[]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",6,[[]]],[11,"classify","","",7,[[["into",8]]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",7,[[]]],[11,"zero","","",7,[[]]],[11,"one","","",7,[[]]],[11,"ones","","",7,[[]]],[11,"from_le_bytes","","",7,[[],[["i32",3],["vec",3]]]],[11,"to_le_bytes","","",7,[[],[["u8",3],["vec",3]]]],[11,"from_be_bytes","","",7,[[],[["i32",3],["vec",3]]]],[11,"to_be_bytes","","",7,[[],[["u8",3],["vec",3]]]],[11,"max_value","","",7,[[],["i32",3]]],[11,"checked_add","","Warning: panics when overflow.",7,[[]]],[11,"checked_sub","","Warning: panics when overflow.",7,[[]]],[11,"checked_mul","","Warning: panics when overflow.",7,[[]]],[11,"rotate_left","","",7,[[]]],[11,"rotate_right","","",7,[[]]],[11,"comp_eq","","",7,[[]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",7,[[]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",7,[[]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",7,[[]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",7,[[]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",7,[[]]],[11,"classify","","",8,[[["into",8]]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",8,[[]]],[11,"zero","","",8,[[]]],[11,"one","","",8,[[]]],[11,"ones","","",8,[[]]],[11,"from_le_bytes","","",8,[[],[["vec",3],["i64",3]]]],[11,"to_le_bytes","","",8,[[],[["u8",3],["vec",3]]]],[11,"from_be_bytes","","",8,[[],[["vec",3],["i64",3]]]],[11,"to_be_bytes","","",8,[[],[["u8",3],["vec",3]]]],[11,"max_value","","",8,[[],["i64",3]]],[11,"checked_add","","Warning: panics when overflow.",8,[[]]],[11,"checked_sub","","Warning: panics when overflow.",8,[[]]],[11,"checked_mul","","Warning: panics when overflow.",8,[[]]],[11,"rotate_left","","",8,[[]]],[11,"rotate_right","","",8,[[]]],[11,"comp_eq","","",8,[[]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",8,[[]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",8,[[]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",8,[[]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",8,[[]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",8,[[]]],[11,"classify","","",9,[[["into",8]]]],[11,"declassify","","Warning: use with caution, breaks the constant-time…",9,[[]]],[11,"zero","","",9,[[]]],[11,"one","","",9,[[]]],[11,"ones","","",9,[[]]],[11,"from_le_bytes","","",9,[[],[["vec",3],["i128",3]]]],[11,"to_le_bytes","","",9,[[],[["u8",3],["vec",3]]]],[11,"from_be_bytes","","",9,[[],[["vec",3],["i128",3]]]],[11,"to_be_bytes","","",9,[[],[["u8",3],["vec",3]]]],[11,"max_value","","",9,[[],["i128",3]]],[11,"checked_add","","Warning: panics when overflow.",9,[[]]],[11,"checked_sub","","Warning: panics when overflow.",9,[[]]],[11,"checked_mul","","Warning: panics when overflow.",9,[[]]],[11,"rotate_left","","",9,[[]]],[11,"rotate_right","","",9,[[]]],[11,"comp_eq","","",9,[[]]],[11,"comp_ne","","Produces a new integer which is all ones if the first…",9,[[]]],[11,"comp_gte","","Produces a new integer which is all ones if the first…",9,[[]]],[11,"comp_gt","","Produces a new integer which is all ones if the first…",9,[[]]],[11,"comp_lte","","Produces a new integer which is all ones if the first…",9,[[]]],[11,"comp_lt","","Produces a new integer which is all ones if the first…",9,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"from","","",1,[[]]],[11,"from","","",2,[[]]],[11,"from","","",3,[[]]],[11,"from","","",4,[[]]],[11,"from","","",5,[[]]],[11,"from","","",6,[[]]],[11,"from","","",7,[[]]],[11,"from","","",8,[[]]],[11,"from","","",9,[[]]],[11,"from","","",4,[[["u8",3]],["u128",3]]],[11,"from","","",0,[[["u128",3]],["u8",3]]],[11,"from","","",4,[[["u16",3]],["u128",3]]],[11,"from","","",1,[[["u128",3]],["u16",3]]],[11,"from","","",4,[[["u32",3]],["u128",3]]],[11,"from","","",2,[[["u128",3]],["u32",3]]],[11,"from","","",4,[[["u64",3]],["u128",3]]],[11,"from","","",3,[[["u128",3]],["u64",3]]],[11,"from","","",3,[[["u8",3]],["u64",3]]],[11,"from","","",0,[[["u64",3]],["u8",3]]],[11,"from","","",3,[[["u16",3]],["u64",3]]],[11,"from","","",1,[[["u64",3]],["u16",3]]],[11,"from","","",3,[[["u32",3]],["u64",3]]],[11,"from","","",2,[[["u64",3]],["u32",3]]],[11,"from","","",2,[[["u8",3]],["u32",3]]],[11,"from","","",0,[[["u32",3]],["u8",3]]],[11,"from","","",2,[[["u16",3]],["u32",3]]],[11,"from","","",1,[[["u32",3]],["u16",3]]],[11,"from","","",0,[[],["u8",3]]],[11,"from","","",1,[[],["u16",3]]],[11,"from","","",2,[[],["u32",3]]],[11,"from","","",2,[[],["u32",3]]],[11,"from","","",3,[[],["u64",3]]],[11,"from","","",3,[[],["u64",3]]],[11,"from","","",3,[[],["u64",3]]],[11,"from","","",3,[[],["u64",3]]],[11,"from","","",4,[[],["u128",3]]],[11,"from","","",4,[[],["u128",3]]],[11,"from","","",4,[[],["u128",3]]],[11,"from","","",4,[[],["u128",3]]],[11,"from","","",4,[[],["u128",3]]],[11,"from","","",1,[[["u8",3]],["u16",3]]],[11,"from","","",0,[[["u16",3]],["u8",3]]],[11,"from","","",9,[[["i8",3]],["i128",3]]],[11,"from","","",5,[[["i128",3]],["i8",3]]],[11,"from","","",9,[[["i16",3]],["i128",3]]],[11,"from","","",6,[[["i128",3]],["i16",3]]],[11,"from","","",9,[[["i32",3]],["i128",3]]],[11,"from","","",7,[[["i128",3]],["i32",3]]],[11,"from","","",9,[[["i64",3]],["i128",3]]],[11,"from","","",8,[[["i128",3]],["i64",3]]],[11,"from","","",8,[[["i8",3]],["i64",3]]],[11,"from","","",5,[[["i64",3]],["i8",3]]],[11,"from","","",8,[[["i16",3]],["i64",3]]],[11,"from","","",6,[[["i64",3]],["i16",3]]],[11,"from","","",8,[[["i32",3]],["i64",3]]],[11,"from","","",7,[[["i64",3]],["i32",3]]],[11,"from","","",7,[[["i8",3]],["i32",3]]],[11,"from","","",5,[[["i32",3]],["i8",3]]],[11,"from","","",7,[[["i16",3]],["i32",3]]],[11,"from","","",6,[[["i32",3]],["i16",3]]],[11,"from","","",6,[[["i8",3]],["i16",3]]],[11,"from","","",5,[[["i16",3]],["i8",3]]],[11,"from","","",9,[[["u128",3]],["i128",3]]],[11,"from","","",4,[[["i128",3]],["u128",3]]],[11,"from","","",8,[[["u64",3]],["i64",3]]],[11,"from","","",3,[[["i64",3]],["u64",3]]],[11,"from","","",7,[[["u32",3]],["i32",3]]],[11,"from","","",2,[[["i32",3]],["u32",3]]],[11,"from","","",6,[[["u16",3]],["i16",3]]],[11,"from","","",1,[[["i16",3]],["u16",3]]],[11,"from","","",5,[[["u8",3]],["i8",3]]],[11,"from","","",0,[[["i8",3]],["u8",3]]],[11,"clone","","",0,[[],["u8",3]]],[11,"clone","","",1,[[],["u16",3]]],[11,"clone","","",2,[[],["u32",3]]],[11,"clone","","",3,[[],["u64",3]]],[11,"clone","","",4,[[],["u128",3]]],[11,"clone","","",5,[[],["i8",3]]],[11,"clone","","",6,[[],["i16",3]]],[11,"clone","","",7,[[],["i32",3]]],[11,"clone","","",8,[[],["i64",3]]],[11,"clone","","",9,[[],["i128",3]]],[11,"default","","",0,[[],["u8",3]]],[11,"default","","",1,[[],["u16",3]]],[11,"default","","",2,[[],["u32",3]]],[11,"default","","",3,[[],["u64",3]]],[11,"default","","",4,[[],["u128",3]]],[11,"default","","",5,[[],["i8",3]]],[11,"default","","",6,[[],["i16",3]]],[11,"default","","",7,[[],["i32",3]]],[11,"default","","",8,[[],["i64",3]]],[11,"default","","",9,[[],["i128",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"sub","","",0,[[]]],[11,"sub","","",1,[[]]],[11,"sub","","",2,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",4,[[]]],[11,"sub","","",5,[[]]],[11,"sub","","",6,[[]]],[11,"sub","","",7,[[]]],[11,"sub","","",8,[[]]],[11,"sub","","",9,[[]]],[11,"add","","",0,[[]]],[11,"add","","",1,[[]]],[11,"add","","",2,[[]]],[11,"add","","",3,[[]]],[11,"add","","",4,[[]]],[11,"add","","",5,[[]]],[11,"add","","",6,[[]]],[11,"add","","",7,[[]]],[11,"add","","",8,[[]]],[11,"add","","",9,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",1,[[]]],[11,"mul","","",2,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",4,[[]]],[11,"mul","","",5,[[]]],[11,"mul","","",6,[[]]],[11,"mul","","",7,[[]]],[11,"mul","","",8,[[]]],[11,"mul","","",9,[[]]],[11,"neg","","",0,[[]]],[11,"neg","","",1,[[]]],[11,"neg","","",2,[[]]],[11,"neg","","",3,[[]]],[11,"neg","","",4,[[]]],[11,"neg","","",5,[[]]],[11,"neg","","",6,[[]]],[11,"neg","","",7,[[]]],[11,"neg","","",8,[[]]],[11,"neg","","",9,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",3,[[]]],[11,"add_assign","","",4,[[]]],[11,"add_assign","","",5,[[]]],[11,"add_assign","","",6,[[]]],[11,"add_assign","","",7,[[]]],[11,"add_assign","","",8,[[]]],[11,"add_assign","","",9,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",3,[[]]],[11,"sub_assign","","",4,[[]]],[11,"sub_assign","","",5,[[]]],[11,"sub_assign","","",6,[[]]],[11,"sub_assign","","",7,[[]]],[11,"sub_assign","","",8,[[]]],[11,"sub_assign","","",9,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",3,[[]]],[11,"mul_assign","","",4,[[]]],[11,"mul_assign","","",5,[[]]],[11,"mul_assign","","",6,[[]]],[11,"mul_assign","","",7,[[]]],[11,"mul_assign","","",8,[[]]],[11,"mul_assign","","",9,[[]]],[11,"not","","",0,[[]]],[11,"not","","",1,[[]]],[11,"not","","",2,[[]]],[11,"not","","",3,[[]]],[11,"not","","",4,[[]]],[11,"not","","",5,[[]]],[11,"not","","",6,[[]]],[11,"not","","",7,[[]]],[11,"not","","",8,[[]]],[11,"not","","",9,[[]]],[11,"bitand","","",0,[[]]],[11,"bitand","","",1,[[]]],[11,"bitand","","",2,[[]]],[11,"bitand","","",3,[[]]],[11,"bitand","","",4,[[]]],[11,"bitand","","",5,[[]]],[11,"bitand","","",6,[[]]],[11,"bitand","","",7,[[]]],[11,"bitand","","",8,[[]]],[11,"bitand","","",9,[[]]],[11,"bitor","","",0,[[]]],[11,"bitor","","",1,[[]]],[11,"bitor","","",2,[[]]],[11,"bitor","","",3,[[]]],[11,"bitor","","",4,[[]]],[11,"bitor","","",5,[[]]],[11,"bitor","","",6,[[]]],[11,"bitor","","",7,[[]]],[11,"bitor","","",8,[[]]],[11,"bitor","","",9,[[]]],[11,"bitxor","","",0,[[]]],[11,"bitxor","","",1,[[]]],[11,"bitxor","","",2,[[]]],[11,"bitxor","","",3,[[]]],[11,"bitxor","","",4,[[]]],[11,"bitxor","","",5,[[]]],[11,"bitxor","","",6,[[]]],[11,"bitxor","","",7,[[]]],[11,"bitxor","","",8,[[]]],[11,"bitxor","","",9,[[]]],[11,"shl","","",0,[[]]],[11,"shl","","",1,[[]]],[11,"shl","","",2,[[]]],[11,"shl","","",3,[[]]],[11,"shl","","",4,[[]]],[11,"shl","","",5,[[]]],[11,"shl","","",6,[[]]],[11,"shl","","",7,[[]]],[11,"shl","","",8,[[]]],[11,"shl","","",9,[[]]],[11,"shr","","",0,[[]]],[11,"shr","","",1,[[]]],[11,"shr","","",2,[[]]],[11,"shr","","",3,[[]]],[11,"shr","","",4,[[]]],[11,"shr","","",5,[[]]],[11,"shr","","",6,[[]]],[11,"shr","","",7,[[]]],[11,"shr","","",8,[[]]],[11,"shr","","",9,[[]]],[11,"bitand_assign","","",0,[[]]],[11,"bitand_assign","","",1,[[]]],[11,"bitand_assign","","",2,[[]]],[11,"bitand_assign","","",3,[[]]],[11,"bitand_assign","","",4,[[]]],[11,"bitand_assign","","",5,[[]]],[11,"bitand_assign","","",6,[[]]],[11,"bitand_assign","","",7,[[]]],[11,"bitand_assign","","",8,[[]]],[11,"bitand_assign","","",9,[[]]],[11,"bitor_assign","","",0,[[]]],[11,"bitor_assign","","",1,[[]]],[11,"bitor_assign","","",2,[[]]],[11,"bitor_assign","","",3,[[]]],[11,"bitor_assign","","",4,[[]]],[11,"bitor_assign","","",5,[[]]],[11,"bitor_assign","","",6,[[]]],[11,"bitor_assign","","",7,[[]]],[11,"bitor_assign","","",8,[[]]],[11,"bitor_assign","","",9,[[]]],[11,"bitxor_assign","","",0,[[]]],[11,"bitxor_assign","","",1,[[]]],[11,"bitxor_assign","","",2,[[]]],[11,"bitxor_assign","","",3,[[]]],[11,"bitxor_assign","","",4,[[]]],[11,"bitxor_assign","","",5,[[]]],[11,"bitxor_assign","","",6,[[]]],[11,"bitxor_assign","","",7,[[]]],[11,"bitxor_assign","","",8,[[]]],[11,"bitxor_assign","","",9,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",3,[[]]],[11,"shl_assign","","",4,[[]]],[11,"shl_assign","","",5,[[]]],[11,"shl_assign","","",6,[[]]],[11,"shl_assign","","",7,[[]]],[11,"shl_assign","","",8,[[]]],[11,"shl_assign","","",9,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",3,[[]]],[11,"shr_assign","","",4,[[]]],[11,"shr_assign","","",5,[[]]],[11,"shr_assign","","",6,[[]]],[11,"shr_assign","","",7,[[]]],[11,"shr_assign","","",8,[[]]],[11,"shr_assign","","",9,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]]],"p":[[3,"U8"],[3,"U16"],[3,"U32"],[3,"U64"],[3,"U128"],[3,"I8"],[3,"I16"],[3,"I32"],[3,"I64"],[3,"I128"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);