(function() {var implementors = {};
implementors["chacha20"] = [{"text":"impl Unpin for State","synthetic":true,"types":[]},{"text":"impl Unpin for StateBytes","synthetic":true,"types":[]},{"text":"impl Unpin for IV","synthetic":true,"types":[]},{"text":"impl Unpin for Key","synthetic":true,"types":[]}];
implementors["chacha20_rfc7539"] = [{"text":"impl Unpin for State","synthetic":true,"types":[]},{"text":"impl Unpin for StateBytes","synthetic":true,"types":[]},{"text":"impl Unpin for IV","synthetic":true,"types":[]},{"text":"impl Unpin for Key","synthetic":true,"types":[]}];
implementors["hacspec_lib"] = [{"text":"impl Unpin for DocSecretBytes","synthetic":true,"types":[]},{"text":"impl Unpin for DocPublicBytes","synthetic":true,"types":[]},{"text":"impl Unpin for DocSecretArray","synthetic":true,"types":[]},{"text":"impl Unpin for DocPublicArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for DocParametricArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SecretSeq&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for PublicSeq&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Seq&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for U16Word","synthetic":true,"types":[]},{"text":"impl Unpin for U32Word","synthetic":true,"types":[]},{"text":"impl Unpin for U64Word","synthetic":true,"types":[]},{"text":"impl Unpin for U128Word","synthetic":true,"types":[]},{"text":"impl Unpin for u16Word","synthetic":true,"types":[]},{"text":"impl Unpin for u32Word","synthetic":true,"types":[]},{"text":"impl Unpin for u64Word","synthetic":true,"types":[]},{"text":"impl Unpin for u128Word","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Unpin for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl Unpin for BigUint","synthetic":true,"types":[]},{"text":"impl Unpin for BigInt","synthetic":true,"types":[]},{"text":"impl Unpin for Sign","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Unpin for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Unpin for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Unpin for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Unpin for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Unpin for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Unpin for FloatErrorKind","synthetic":true,"types":[]}];
implementors["poly1305"] = [{"text":"impl Unpin for Block","synthetic":true,"types":[]},{"text":"impl Unpin for Tag","synthetic":true,"types":[]},{"text":"impl Unpin for FieldCanvas","synthetic":true,"types":[]},{"text":"impl Unpin for FieldElement","synthetic":true,"types":[]}];
implementors["secret_integers"] = [{"text":"impl Unpin for U8","synthetic":true,"types":[]},{"text":"impl Unpin for U16","synthetic":true,"types":[]},{"text":"impl Unpin for U32","synthetic":true,"types":[]},{"text":"impl Unpin for U64","synthetic":true,"types":[]},{"text":"impl Unpin for U128","synthetic":true,"types":[]},{"text":"impl Unpin for I8","synthetic":true,"types":[]},{"text":"impl Unpin for I16","synthetic":true,"types":[]},{"text":"impl Unpin for I32","synthetic":true,"types":[]},{"text":"impl Unpin for I64","synthetic":true,"types":[]},{"text":"impl Unpin for I128","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()