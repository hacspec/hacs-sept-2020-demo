(function() {var implementors = {};
implementors["hacspec_chacha20"] = [{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for StateBytes","synthetic":true,"types":[]},{"text":"impl Freeze for IV","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]}];
implementors["hacspec_lib"] = [{"text":"impl Freeze for DocSecretBytes","synthetic":true,"types":[]},{"text":"impl Freeze for DocPublicBytes","synthetic":true,"types":[]},{"text":"impl Freeze for DocSecretArray","synthetic":true,"types":[]},{"text":"impl Freeze for DocPublicArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DocParametricArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SecretSeq&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PublicSeq&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Seq&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for U16Word","synthetic":true,"types":[]},{"text":"impl Freeze for U32Word","synthetic":true,"types":[]},{"text":"impl Freeze for U64Word","synthetic":true,"types":[]},{"text":"impl Freeze for U128Word","synthetic":true,"types":[]},{"text":"impl Freeze for u16Word","synthetic":true,"types":[]},{"text":"impl Freeze for u32Word","synthetic":true,"types":[]},{"text":"impl Freeze for u64Word","synthetic":true,"types":[]},{"text":"impl Freeze for u128Word","synthetic":true,"types":[]}];
implementors["hacspec_poly1305"] = [{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for FieldCanvas","synthetic":true,"types":[]},{"text":"impl Freeze for FieldElement","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Freeze for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl Freeze for BigUint","synthetic":true,"types":[]},{"text":"impl Freeze for BigInt","synthetic":true,"types":[]},{"text":"impl Freeze for Sign","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Freeze for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Freeze for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Freeze for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Freeze for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Freeze for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Freeze for FloatErrorKind","synthetic":true,"types":[]}];
implementors["secret_integers"] = [{"text":"impl Freeze for U8","synthetic":true,"types":[]},{"text":"impl Freeze for U16","synthetic":true,"types":[]},{"text":"impl Freeze for U32","synthetic":true,"types":[]},{"text":"impl Freeze for U64","synthetic":true,"types":[]},{"text":"impl Freeze for U128","synthetic":true,"types":[]},{"text":"impl Freeze for I8","synthetic":true,"types":[]},{"text":"impl Freeze for I16","synthetic":true,"types":[]},{"text":"impl Freeze for I32","synthetic":true,"types":[]},{"text":"impl Freeze for I64","synthetic":true,"types":[]},{"text":"impl Freeze for I128","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()