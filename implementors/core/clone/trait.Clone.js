(function() {var implementors = {};
implementors["hacspec_chacha20"] = [{"text":"impl Clone for State","synthetic":false,"types":[]},{"text":"impl Clone for StateBytes","synthetic":false,"types":[]},{"text":"impl Clone for IV","synthetic":false,"types":[]},{"text":"impl Clone for Key","synthetic":false,"types":[]}];
implementors["hacspec_lib"] = [{"text":"impl Clone for U16Word","synthetic":false,"types":[]},{"text":"impl Clone for U32Word","synthetic":false,"types":[]},{"text":"impl Clone for U64Word","synthetic":false,"types":[]},{"text":"impl Clone for U128Word","synthetic":false,"types":[]},{"text":"impl Clone for u16Word","synthetic":false,"types":[]},{"text":"impl Clone for u32Word","synthetic":false,"types":[]},{"text":"impl Clone for u64Word","synthetic":false,"types":[]},{"text":"impl Clone for u128Word","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Copy + Default + SecretInteger&gt; Clone for SecretSeq&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Copy + Default + PublicInteger&gt; Clone for PublicSeq&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Copy + Default&gt; Clone for Seq&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DocSecretBytes","synthetic":false,"types":[]},{"text":"impl Clone for DocPublicBytes","synthetic":false,"types":[]},{"text":"impl Clone for DocSecretArray","synthetic":false,"types":[]},{"text":"impl Clone for DocPublicArray","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DocParametricArray&lt;T&gt;","synthetic":false,"types":[]}];
implementors["hacspec_poly1305"] = [{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for Tag","synthetic":false,"types":[]},{"text":"impl Clone for FieldCanvas","synthetic":false,"types":[]},{"text":"impl Clone for FieldElement","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Clone for Sign","synthetic":false,"types":[]},{"text":"impl Clone for BigInt","synthetic":false,"types":[]},{"text":"impl Clone for BigUint","synthetic":false,"types":[]},{"text":"impl Clone for ParseBigIntError","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for Range&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeInclusive&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStep&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStepInclusive&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeFrom&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStepFrom&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseRatioError","synthetic":false,"types":[]}];
implementors["secret_integers"] = [{"text":"impl Clone for U8","synthetic":false,"types":[]},{"text":"impl Clone for U16","synthetic":false,"types":[]},{"text":"impl Clone for U32","synthetic":false,"types":[]},{"text":"impl Clone for U64","synthetic":false,"types":[]},{"text":"impl Clone for U128","synthetic":false,"types":[]},{"text":"impl Clone for I8","synthetic":false,"types":[]},{"text":"impl Clone for I16","synthetic":false,"types":[]},{"text":"impl Clone for I32","synthetic":false,"types":[]},{"text":"impl Clone for I64","synthetic":false,"types":[]},{"text":"impl Clone for I128","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()