(function() {var implementors = {};
implementors["hacspec_chacha20"] = [{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StateBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IV","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]}];
implementors["hacspec_lib"] = [{"text":"impl UnwindSafe for DocSecretBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DocPublicBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DocSecretArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DocPublicArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DocParametricArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SecretSeq&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PublicSeq&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Seq&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U16Word","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U32Word","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U64Word","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U128Word","synthetic":true,"types":[]},{"text":"impl UnwindSafe for u16Word","synthetic":true,"types":[]},{"text":"impl UnwindSafe for u32Word","synthetic":true,"types":[]},{"text":"impl UnwindSafe for u64Word","synthetic":true,"types":[]},{"text":"impl UnwindSafe for u128Word","synthetic":true,"types":[]}];
implementors["hacspec_poly1305"] = [{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldCanvas","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldElement","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl UnwindSafe for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sign","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; UnwindSafe for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; UnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; UnwindSafe for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; UnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl UnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["secret_integers"] = [{"text":"impl UnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for I8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for I16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for I32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for I64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for I128","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()